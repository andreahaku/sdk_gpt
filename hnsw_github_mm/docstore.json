[["0",{"pageContent":"---\ntitle: Snaps lifecycle\ndescription: Learn about the lifecycle of a snap.\n---\n\n# Snaps lifecycle\n\nJust like [service workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) or\nAWS lambda functions, snaps are designed to wake up in response to messages/events, and shut down\nwhen idle.\nSnaps have an ephemeral lifecycle: they're here one moment, gone the next.\nAlso, if MetaMask detects that a snap becomes unresponsive, it shuts the snap down.\nThis doesn't mean that you can't create long-running snaps, but it does mean that your snaps must\nhandle being shut down, especially when they're not within the JSON-RPC request/response cycle.\n\nA snap is considered unresponsive if:\n\n1. It hasn't received a JSON-RPC request for 30 seconds.\n1. It takes more than 60 seconds to process a JSON-RPC request.\n\nStopped snaps start whenever they receive a JSON-RPC request, unless they're disabled.\nIf a snap is disabled, the user must re-enable it before it can start again.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/lifecycle.md"}}],["1",{"pageContent":"---\ntitle: Snaps user interface\ndescription: Learn about the user interface of a snap.\n---\n\n# Snaps user interface\n\nAny snap must represent itself and what it does to the end user.\nUsing the MetaMask settings page, the user can see their installed snaps.\nFor each snap, the user can:\n\n- See most of its manifest data.\n- See its execution status (running, stopped, or crashed).\n- Enable and disable the snap.\n\nOther than the settings page, a snap can modify the MetaMask UI using\n[custom UI](../how-to/use-custom-ui.md) in only two ways:\n\n- By opening a dialog using the [`snap_dialog`](../reference/rpc-api.md#snap_dialog) RPC method.\n- By returning transaction insights from the [`onTransaction`](../reference/exports.md#ontransaction)\n  export.\n\nThis means that most snaps must rely on dapps/websites and their own RPC methods to present their\ndata to the user.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/user-interface.md"}}],["2",{"pageContent":"This means that most snaps must rely on dapps/websites and their own RPC methods to present their\ndata to the user.\n\nProviding more ways for snaps to modify the MetaMask UI is an important goal of the Snaps system,\nand over time more and more snaps will be able to contain their user interfaces entirely within\nMetaMask itself.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/user-interface.md"}}],["3",{"pageContent":"---\ndescription: Install Snaps dependencies.\n---\n\n# Install Snaps\n\nTo use Snaps, you must install [MetaMask Flask](#install-metamask-flask) and the [Snaps CLI](#install-the-snaps-cli).\n\nYou can then [get started quickly using the Snaps template](quickstart.md).\n\n## Prerequisites\n\n- Up-to-date Chromium or Firefox browser\n- [Node.js](https://nodejs.org/) version 16 or later\n- [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) or [Yarn](https://yarnpkg.com/)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/install-snaps.md"}}],["4",{"pageContent":"Install MetaMask Flask\n\n[MetaMask Flask](https://metamask.io/flask/) is a canary distribution for developers that provides\naccess to upcoming MetaMask features.\nSnaps is the first feature rolled out in the Flask environment.\n\n[Install Flask](https://chrome.google.com/webstore/detail/metamask-flask-developmen/ljfoeinjpaedjfecbmggjgodbgkmjkjk)\nin a new browser profile, or disable any existing installed versions of MetaMask before installing\nFlask.\n\n:::caution\nRunning multiple instances of MetaMask in the same browser profile breaks dapp interactions.\n:::\n\n## Install the Snaps CLI\n\nThe [Snaps CLI](../reference/cli/index.md) provides commands for initiating a snap project and building,\nexecuting, and serving your snap for local development.\n\nIn a terminal window, install the CLI globally using npm or Yarn:\n\n```bash\nnpm install -g @metamask/snaps-cli\nor\nyarn global add @metamask/snaps-cli\n```\n\nVerify the installation and display usage instructions:\n\n```bash\nmm-snap --help\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/install-snaps.md"}}],["5",{"pageContent":"---\ndescription: Request permissions in a manifest file.\n---\n\n# Request permissions\n\nTo access certain powerful JavaScript globals or API methods, a snap must ask the user for permission.\nSnaps follow the [EIP-2255 wallet permissions specification](https://eips.ethereum.org/EIPS/eip-2255),\nand you must specify a snap's required permissions in the `initialPermissions` field of the\n[manifest file](../concepts/anatomy.md#manifest-file).\n\n## RPC API permissions\n\nYou must request permission to use any\n[restricted JSON-RPC API methods](../reference/rpc-api.md#restricted-methods).\n\nFor example, to request to use [`snap_dialog`](../reference/rpc-api.md#snap_dialog), add the\nfollowing to the manifest file:\n\n```json\n\"initialPermissions\": {\n  \"snap_dialog\": {}\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/request-permissions.md"}}],["6",{"pageContent":"Endowments\n\nEndowments are a type of permission.\nSee the [Snaps permissions reference](../reference/permissions.md) for the full list of endowments\nyou can specify in the manifest file.\n\nFor example, to request the [`endowment:long-running`](../reference/permissions.md#endowmentlong-running)\npermission, add the following to the manifest file:\n\n```json\n\"initialPermissions\": {\n  \"endowment:long-running\": {}\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/request-permissions.md"}}],["7",{"pageContent":"---\ntitle: Introduction\n---\n\n# Extend the functionality of MetaMask using Snaps\n\nSnaps is an open source system that allows anyone to safely extend the functionality of MetaMask,\ncreating new web3 end user experiences.\n\nGet started by [installing Snaps](get-started/install-snaps.md).\n\n:::note\n- Snaps is pre-release software.\n- To learn how to integrate your dapp with MetaMask, visit the\n  [MetaMask wallet developer documentation](../wallet).\n:::\n\n## What is a snap?\n\nA snap is a JavaScript program run in an isolated environment that customizes the wallet experience.\nSnaps have access to a limited set of capabilities, determined by the\n[permissions](how-to/request-permissions.md) the user granted them during installation.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/index.md"}}],["8",{"pageContent":"What can you do with a snap?\n\nA snap can add new API methods to MetaMask, add support for different blockchain protocols, or\nmodify existing functionalities using the [Snaps JSON-RPC API](reference/rpc-api.md).\n\nFor example, you can:\n\n- [Display a custom confirmation screen](reference/rpc-api.md#snap_dialog) in MetaMask.\n- [Notify users](reference/rpc-api.md#snapnotify) in MetaMask.\n- [Securely store and manage data](reference/rpc-api.md#snap_managestate) on your device.\n- [Control non-EVM accounts and assets](reference/rpc-api.md#snap_getbip44entropy) in MetaMask.\n- [Provide transaction insights](reference/exports.md#ontransaction) in MetaMask's pre-transaction window.\n- [Schedule periodic actions](reference/exports.md#oncronjob) for your users.\n- [Display custom UI](how-to/use-custom-ui.md) in MetaMask using a set of pre-defined components,\n  including inline Markdown.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/index.md"}}],["9",{"pageContent":"Questions?\n\nIf you have questions about using Snaps or want to propose a new feature, you can interact with the\nSnaps team and community on [GitHub discussions](https://github.com/MetaMask/snaps-monorepo/discussions)\nand the Snaps channel on [ConsenSys Discord](https://discord.gg/consensys).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/index.md"}}],["10",{"pageContent":"---\ndescription: Snaps CLI subcommands and options reference\n---\n\n# Snaps command line interface\n\nThis reference describes the syntax of the Snaps command line interface (CLI) subcommands and options.\n\nMake sure to [install the Snaps CLI](../../get-started/install-snaps.md#install-the-snaps-cli).\n\nYou can specify subcommands and options using the `mm-snap` command:\n\n```bash\nmm-snap [SUBCOMMAND] [OPTIONS]\n```\n\nYou can also override the default values of the options by specifying them in the\n[configuration file](../../concepts/anatomy.md#configuration-file).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/index.md"}}],["11",{"pageContent":"---\ntitle: Options\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Snaps command line options\n\n## b, bundle\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--bundle <file>\n```\n\n# Example\n\n```bash\n-b out/bundle.js\n```\n\n# Configuration file\n\n```js\nbundle: 'out/bundle.js' \n```\n\n<!--/tabs-->\n\nPath to the snap [bundle file](../../concepts/anatomy.md#bundle-file).\nThe default is `dist/bundle.js`.\n\nYou can use this option with the [`eval`](subcommands.md#e-eval) subcommand.\n\n`-b` is an alias for `--bundle`.\n\n## d, dist\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--dist <directory>\n```\n\n# Example\n\n```bash\n-d out\n```\n\n# Configuration file\n\n```js\ndist: 'out'\n```\n\n<!--/tabs-->\n\nPath to the output directory.\nThe default is `dist`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-d` is an alias for `--dist`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["12",{"pageContent":"depsToTranspile\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--depsToTranspile <array>\n```\n\n# Example\n\n```bash\n--depsToTranspile dep1,dep2\n```\n\n# Configuration file\n\n```js\ndepsToTranspile: ['dep1','dep2']\n```\n\n<!--/tabs-->\n\nList of dependencies to transpile, if [`--transpilationMode`](#transpilationmode) is set to\n`localAndDeps`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n## e, eval\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--eval <boolean>\n```\n\n# Example\n\n```bash\n-e false\n```\n\n# Configuration file\n\n```js\neval: false\n```\n\n<!--/tabs-->\n\nIndicates whether to attempt to evaluate the snap bundle in SES.\nThe default is `true`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-e` is an alias for `--eval`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["13",{"pageContent":"fix, writeManifest\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--fix <boolean>\n```\n\n# Example\n\n```bash\n--fix false\n```\n\n# Configuration file\n\n```js\nfix: false\n```\n\n<!--/tabs-->\n\nWhen validating the snap [manifest file](../../concepts/anatomy.md#manifest-file) using the\n[`manifest`](subcommands.md#m-manifest) subcommand, indicates whether to make necessary changes to\nthe manifest file.\nThe default is `true`.\n\n`--fix` is an alias for `--writeManifest`.\n\n## h, help\n\n```bash\n-h, --help\n```\n\nDisplays the help message and exits.\nYou can use this option with `mm-snap` or any [subcommand](subcommands.md).\n\n`-h` is an alias for `--help`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["14",{"pageContent":"h, help\n\n```bash\n-h, --help\n```\n\nDisplays the help message and exits.\nYou can use this option with `mm-snap` or any [subcommand](subcommands.md).\n\n`-h` is an alias for `--help`.\n\n## m, manifest\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--manifest <boolean>\n```\n\n# Example\n\n```bash\n-m false\n```\n\n# Configuration file\n\n```js\nmanifest: false\n```\n\n<!--/tabs-->\n\nIndicates whether to validate the snap [manifest file](../../concepts/anatomy.md#manifest-file).\nThe default is `true`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-m` is an alias for `--manifest`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["15",{"pageContent":"n, outfileName\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--outfileName <string>\n```\n\n# Example\n\n```bash\n-n snap.js\n```\n\n# Configuration file\n\n```js\noutfileName: 'snap.js'\n```\n\n<!--/tabs-->\n\nOutput file name when building a snap from source.\nThe default is `bundle.js`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-n` is an alias for `--outfileName`.\n\n## p, port\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--port <number>\n```\n\n# Example\n\n```bash\n-p 9000\n```\n\n# Configuration file\n\n```js\nport: 9000\n```\n\n<!--/tabs-->\n\nLocal server port for testing.\nThe default is `8081`.\n\nYou can use this option with the [`serve`](subcommands.md#s-serve) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-p` is an alias for `--port`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["16",{"pageContent":"r, root\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--root <directory>\n```\n\n# Example\n\n```bash\n-r out\n```\n\n# Configuration file\n\n```js\nroot: 'out'\n```\n\n<!--/tabs-->\n\nServer root directory.\nThe default is the current working directory (`.`).\n\nYou can use this option with the [`serve`](subcommands.md#s-serve) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-r` is an alias for `--root`.\n\n## s, src\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--src <file>\n```\n\n# Example\n\n```bash\n-s lib/index.js\n```\n\n# Configuration file\n\n```js\nsrc: 'lib/index.js'\n```\n\n<!--/tabs-->\n\nPath to the snap source file.\nThe default is `src/index.js`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`-s` is an alias for `--src`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["17",{"pageContent":"sourceMaps\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--sourceMaps <boolean>\n```\n\n# Example\n\n```bash\n--sourceMaps true\n```\n\n# Configuration file\n\n```js\nsourceMaps: true\n```\n\n<!--/tabs-->\n\nIndicates whether builds should include source maps.\nThe default is `false`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n## strip, stripComments\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--strip <boolean>\n```\n\n# Example\n\n```bash\n--strip false\n```\n\n# Configuration file\n\n```js\nstrip: false\n```\n\n<!--/tabs-->\n\nIndicates whether to remove code comments from the build output.\nThe default is `true`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n`--strip` is an alias for `--stripComments`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["18",{"pageContent":"suppressWarnings\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--suppressWarnings <boolean>\n```\n\n# Example\n\n```bash\n--suppressWarnings true\n```\n\n# Configuration file\n\n```js\nsuppressWarnings: true\n```\n\n<!--/tabs-->\n\nIndicates whether to suppress warnings.\nThe default is `false`.\n\nYou can use this option with any [subcommand](subcommands.md).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["19",{"pageContent":"transpilationMode\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--transpilationMode <string>\n```\n\n# Example\n\n```bash\n--transpilationMode localAndDeps\n```\n\n# Configuration file\n\n```js\ntranspilationMode: 'localAndDeps'\n```\n\n<!--/tabs-->\n\n[Babel](https://babeljs.io/) transpilation mode.\nSpecify `localAndDeps` to transpile all source code including dependencies, `localOnly` to transpile\nlocal source code only, and `none` to transpile nothing.\n\nThe default is `localOnly`.\n\nYou can use this option with the [`build`](subcommands.md#b-build) and\n[`watch`](subcommands.md#w-watch) subcommands.\n\n:::note\nFor TypeScript snaps, `--transpilationMode` must be set to either `localOnly` or `localAndDeps`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["20",{"pageContent":"verboseErrors\n\n<!--tabs-->\n\n# Syntax\n\n```bash\n--verboseErrors <boolean>\n```\n\n# Example\n\n```bash\n--verboseErrors false\n```\n\n# Configuration file\n\n```js\nverboseErrors: false\n```\n\n<!--/tabs-->\n\nIndicates whether to display original errors.\nThe default is `true`.\n\nYou can use this option with any [subcommand](subcommands.md). \n\n## version\n\n```bash\n--version\n```\n\nDisplays the version number and exits.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/options.md"}}],["21",{"pageContent":"---\ntitle: Subcommands\n---\n\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n# Snaps subcommands\n\n## b, build\n\n<!--tabs-->\n\n# Syntax\n\n```bash\nmm-snap build [options]\n```\n\n# Example\n\n```bash\nmm-snap b -s lib/index.js -d out -n snap.js\n```\n\n<!--/tabs-->\n\nBuilds a snap from source.\n\n`b` is an alias for `build`.\n\n## e, eval\n\n<!--tabs-->\n\n# Syntax\n\n```bash\nmm-snap eval [options]\n```\n\n# Example\n\n```bash\nmm-snap e -b out/snap.js\n```\n\n<!--/tabs-->\n\nAttempts to evaluate the snap bundle in SES.\n\n`e` is an alias for `eval`.\n\n## i, init\n\n<!--tabs-->\n\n# Syntax\n\n```bash\nmm-snap init [directory]\n```\n\n# Example\n\n```bash\nmm-snap i my-snap\n```\n\n<!--/tabs-->\n\nInitializes a snap project in the specified directory.\nIf no directory is specified, the snap project is initialized in the current directory.\n\n`i` is an alias for `init`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/subcommands.md"}}],["22",{"pageContent":"m, manifest\n\n<!--tabs-->\n\n# Syntax\n\n```bash\nmm-snap manifest [options]\n```\n\n# Example\n\n```bash\nmm-snap m --fix false\n```\n\n<!--/tabs-->\n\nValidates the snap [manifest file](../../concepts/anatomy.md#manifest-file).\n\n`m` is an alias for `manifest`.\n\n## s, serve\n\n<!--tabs-->\n\n# Syntax\n\n```bash\nmm-snap serve [options]\n```\n\n# Example\n\n```bash\nmm-snap s -r out -p 9000\n```\n\n<!--/tabs-->\n\nLocally serves snap files for testing.\n\n`s` is an alias for `serve`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/subcommands.md"}}],["23",{"pageContent":"w, watch\n\n<!--tabs-->\n\n# Syntax\n\n```bash\nmm-snap watch [options]\n```\n\n# Example\n\n```bash\nmm-snap w -s lib/index.js -d out\n```\n\n<!--/tabs-->\n\nRebuilds a snap from source upon changes to the files in the parent and child directories of the\nsource directory.\n\n:::note\nAll files in the parent and child directories of sthe source directory are watched for changes, except:\n\n- Files in the `node_modules` directory.\n- Files in the `test` or `tests` directories.\n- Any files named `test.js` or `test.ts`.\n- Files in the `dist` directory, or the directory specified using [`--dist`](options.md#d-dist).\n- Dotfiles.\n:::\n  \n`w` is an alias for `watch`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/cli/subcommands.md"}}],["24",{"pageContent":"---\ndescription: Snaps permissions reference\n---\n\n# Snaps permissions\n\nYou can [request the following permissions](../how-to/request-permissions.md) in your snap manifest\nfile.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["25",{"pageContent":"endowment:cronjob\n\nTo run periodic actions for the user (cron jobs), a snap must request the `endowment:cronjob` permission.\nThis permission allows the snap to specify cron jobs that trigger the exported\n[`onCronjob`](../reference/exports.md#oncronjob) method.\n\nSpecify this permission in the manifest file as follows:\n\n```json\n{\n  \"initialPermissions\": {\n    \"endowment:cronjob\": {\n      \"jobs\": [\n        {\n          \"expression\": {\n            \"minute\": \"*\",\n            \"hour\": \"*\",\n            \"dayOfMonth\": \"*\",\n            \"month\": \"*\",\n            \"dayOfWeek\": \"*\"\n          },\n          \"request\": {\n            \"method\": \"exampleMethodOne\",\n            \"params\": {\n              \"param1\": \"foo\"\n            }\n          }\n        },\n        {\n          \"expression\": \"* * * * *\",\n          \"request\": {\n            \"method\": \"exampleMethodTwo\",\n            \"params\": {\n              \"param1\": \"bar\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["26",{"pageContent":"endowment:ethereum-provider\n\nTo communicate with a node using MetaMask, a snap must request the `endowment:ethereum-provider` permission.\nThis permission exposes the global API `ethereum` to the snap execution environment.\nThis global is an EIP-1193 provider.\n\nSpecify this permission in the manifest file as follows:\n\n```json\n\"initialPermissions\": {\n  \"endowment:ethereum-provider\": {}\n},\n```\n\n## endowment:long-running\n\nA snap that is computationally heavy and can't finish execution within the\n[snap lifecycle requirements](../concepts/lifecycle.md) must request the `endowment:long-running` permission.\nThis permission allows the snap to run indefinitely while processing RPC requests.\n\nSpecify this permission in the manifest file as follows:\n\n```json\n\"initialPermissions\": {\n  \"endowment:long-running\": {}\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["27",{"pageContent":"endowment:network-access\n\nTo access the internet, a snap must request the `endowment:network-access` permission.\nThis permission exposes the global networking APIs `fetch` and `WebSocket` to the Snaps execution environment.\n\n:::caution\n`XMLHttpRequest` isn't available in Snaps, and you should replace it with `fetch`.\nIf your dependencies use `XMLHttpRequest`, you can\n[patch it away](../how-to/troubleshoot.md#patch-the-use-of-xmlhttprequest).\n:::\n\nSpecify this permission in the manifest file as follows:\n\n```json\n\"initialPermissions\": {\n  \"endowment:network-access\": {}\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["28",{"pageContent":"endowment:rpc\n\nTo handle arbitrary JSON-RPC requests, a snap must request the `endowment:rpc` permission.\nThis permission grants a snap access to JSON-RPC requests sent to the snap, using the exported\n[`onRpcRequest`](exports.md#onrpcrequest) method.\n\nThis permission requires an object with a `snaps` or `dapps` property (or both), to signal if the\nsnap can receive JSON-RPC requests from other snaps, or dapps, respectively.\nThe default for both properties is `false`.\n\nSpecify this permission in the manifest file as follows:\n\n```json\n{\n  \"initialPermissions\": {\n    \"endowment:rpc\": {\n      \"dapps\": true,\n      \"snaps\": false\n    }\n  }\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["29",{"pageContent":"endowment:transaction-insight\n\nTo provide transaction insights, a snap must request the `endowment:transaction-insight` permission.\nThis permission grants a snap read-only access to raw transaction payloads, before they're accepted\nfor signing by the user, by exporting the [`onTransaction`](../reference/exports.md#ontransaction) method.\n\nThis permission requires an object with an `allowTransactionOrigin` property to signal if the snap\nshould pass the `transactionOrigin` property as part of the `onTransaction` parameters.\nThis property represents the transaction initiator origin.\nThe default is `false`.\n\nSpecify this permission in the manifest file as follows:\n\n```json\n\"initialPermissions\": {\n  \"endowment:transaction-insight\": {\n    \"allowTransactionOrigin\": true\n  }\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["30",{"pageContent":"endowment:webassembly\n\nTo use WebAssembly, a snap must request the `endowment:webassembly` permission.\nThis permission exposes the global `WebAssembly` API to the snap execution environment.\n\nSpecify this permission in the manifest file as follows:\n\n```json\n\"initialPermissions\": {\n  \"endowment:webassembly\": {}\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/permissions.md"}}],["31",{"pageContent":"---\ntitle: Snaps execution environment\ndescription: Learn about the Snaps execution environment.\n---\n\n# Snaps execution environment\n\nSnaps are untrusted JavaScript programs that execute safely in a sandboxed environment that runs\n[Secure ECMAScript (SES)](#secure-ecmascript-ses).\nThere's no DOM, no Node.js built-ins, and no platform-specific APIs other than MetaMask's `wallet`\nglobal object.\nAlmost all standard JavaScript globals contained in\n[this list](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects) that\nare also in Node.js are available as normal.\nThis includes globals such as `Promise`, `Error`, `Math`, `Set`, and `Reflect`.\n\nThe following globals are also available:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/execution-environment.md"}}],["32",{"pageContent":"The following globals are also available:\n\n- `console`\n- `crypto`\n- `fetch` (with the\n  [`endowment:network-access`](../reference/permissions.md#endowmentnetwork-access) permission)\n- `setTimeout` / `clearTimeout`\n- `setInterval` / `clearInterval`\n- `SubtleCrypto`\n- `WebAssembly` (with the\n  [`endowment:webassembly`](../reference/permissions.md#endowmentwebassembly) permission)\n- `TextEncoder` / `TextDecoder`\n- `atob` / `btoa`\n- `URL`\n\nThe execution environment is instrumented in this way to:\n\n1. Prevent snaps from influencing any other running code, including MetaMask itself.\n   That is, prevent all snaps from polluting the global environment and malicious snaps from\n   stealing the user's stuff.\n1. Prevent snaps from accessing sensitive JavaScript APIs (such as `fetch`) without permission.\n1. Ensure that the execution environment is \"fully virtualizable,\" that is, platform-independent.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/execution-environment.md"}}],["33",{"pageContent":"This allows you to safely execute snaps anywhere, without the snap needing to worry about where and\nhow it's executed.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/execution-environment.md"}}],["34",{"pageContent":"Secure ECMAScript (SES)\n\n[Secure ECMAScript (SES)](https://github.com/endojs/endo/tree/master/packages/ses), is a subset of\nthe JavaScript language designed to enable mutually suspicious programs to execute in the same\nJavaScript process (or more accurately, the same [realm](https://tc39.es/ecma262/#realm)).\nYou can think of it as a more severe form of\n[strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/execution-environment.md"}}],["35",{"pageContent":"---\ndescription: Use a custom user interface.\n---\n\n# Use custom UI\n\nThe [`snap_dialog`](../reference/rpc-api.md#snap_dialog) RPC method and\n[`onTransaction`](../reference/exports.md#ontransaction) exported method use the\n`@metamask/snaps-ui` module to display custom user interface (UI) components.\n\nTo use custom UI, first install `@metamask/snaps-ui` using the following command:\n\n```bash\nyarn add @metamask/snaps-ui\n```\n\nThen, whenever you're required to return a custom UI component, import the components from the\npackage and build your UI with them.\nFor example:\n\n```javascript\nimport { panel, heading, text } from '@metamask/snaps-ui';\n\n// ...\n\nconst content = panel([\n  heading('Alert heading'),\n  text('Something happened in the system.'),\n]);\n\nreturn content;\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/use-custom-ui.md"}}],["36",{"pageContent":"Components\n\nThe `NodeType` enum exported by `@metamask/snaps-ui` details the available components.\n\n### copyable\n\nOutputs a read-only text field with a copy-to-clipboard shortcut.\n\n```javascript\nimport { copyable } from '@metamask/snaps-ui';\n\n// ...\n\nconst content = copyable('Text to be copied');\n```\n\n### divider\n\nOutputs a horizontal divider.\n\n```javascript\nimport { panel, divider, text } from '@metamask/snaps-ui';\n\n// ...\n\nconst content = panel([\n  text('Text before the divider'),\n  divider(),\n  text('Text after the divider'),\n]);\n```\n\n### heading\n\nOutputs a heading.\nThis is useful for [panel](#panel) titles.\n\n```javascript\nimport { panel, heading, text } from '@metamask/snaps-ui';\n\n// ...\n\nconst content = panel([\n  heading('Title of the panel'),\n  text('Text of the panel'),\n]);\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/use-custom-ui.md"}}],["37",{"pageContent":"panel\n\nOutputs a panel, which can be used as a container for other components.\n\n```javascript\nimport { panel, heading, text } from '@metamask/snaps-ui';\n\n// ...\n\nconst insights = [\n  /*...*/\n];\nconst content = panel([\n  heading('Here are the transaction insights'),\n  ...insights.map((insight) => text(insight.description)),\n]);\n```\n\n### spinner\n\nOutputs a loading indicator.\n\n```javascript\nimport { panel, heading, spinner } from '@metamask/snaps-ui';\n\n// ...\n\nconst content = panel([heading('Please wait...'), spinner()]);\n```\n\n### text\n\nOutputs text.\n\n```javascript\nimport { text } from '@metamask/snaps-ui';\n\n// ...\n\nconst content = text('This is a simple text UI');\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/use-custom-ui.md"}}],["38",{"pageContent":"Markdown\n\nText-based components accept a very small subset of Markdown: `**bold**` and `_italic_`.\nThis subset will be increased in the future.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/use-custom-ui.md"}}],["39",{"pageContent":"---\ntitle: Snaps design guidelines\ndescription: Guiding principles for designers, developers, builders, and writers to create snap install flows that are accessible for all types of users.\n---\n\n# Snaps design guidelines\n\nThis page outlines guiding principles for designers, developers, builders, and writers to create snap install flows that are accessible for all users. Use these guidelines when introducing your snap within a dapp or website.\n\n## Why this matters\n\nThe snap installation process contains critical info about your snap, including what it does, how it enhances your application, and why it’s beneficial for users. It's important to provide this information on your website or dapp to help users understand the purpose and benefits of the snap before installing it. Without this information, users may drop out during installation or install the snap without fully understanding its purpose.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["40",{"pageContent":"Guidelines at a glance\n\n**Metadata must-haves**\n\n- Keep your name to **21 characters or less** (including spaces).\n- Never use “snap” in your snap’s name. Use the space for something more descriptive.\n- Your avatar should fit in a **32px circular frame, SVG format**.\n- Always aim for short and simple copy.\n\n**Before** asking for permission to install, provide users with **clear and concise information** about:\n\n- _What_ the snap does and _how_ it meets their needs.\n- _How_ the snap works.\n- Any _security precautions_ they may need to know about.\n\nWrite in active voice and use sentence case. Avoid jargon—write in plain language that can be understood at a glance.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["41",{"pageContent":"Think like your users, write like a human\n\nConsider whether the details that interest you as a developer are relevant to the user’s experience. Often times, content can be drastically reduced by cutting jargon and run-on sentences. Read your content out loud to hear what stands out most in your messaging. If something is hard to say, it’s probably hard to read.\n\n- **Be clear.**\n\n  When labeling buttons or actions, use descriptive action verbs instead of vague phrases. _Install_ is more clear than _Complete_, for example.\n\n- **Be concise.**\n\n  Use short, simple words. Make every word earn its place on the screen.\n\n- **Be consistent.**\n\n  Identify synonyms and eliminate them. Each important object and action should have a single word to represent it. Inconsistency can blur the lines for users, creating uncertainty and confusion.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["42",{"pageContent":"Introducing your snap\n\nUse conversational language when explaining the snap. If you need to use a technical term, briefly define it so everyone can understand. Avoid jargon whenever possible, and keep your words short and simple. Introduce your snap in the context of your application to make it clear what the user gets if they install.\n\n![Introducing your snap's features via a modal](../assets/install-modal.png)\n\n:::note How to (not) describe what your snap does\n\n**Don'ts**\n\n❌ _Allow the snap to perform actions that run periodically at fixed times, dates, or intervals. This can be used to trigger time-sensitive interactions or notifications._\n\n❌ _Allow this snap to display notifications regarding your Ethereum Name Service expiration._\n\n**Do's**\n\n✅ _Let this snap schedule and run recurring tasks or notifications._\n\n✅ _Let this snap notify you when your ENS is about to expire._\n\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["43",{"pageContent":"Details to include when introducing your snap\n\nThis is your chance to share the benefits of your snap to the intended user. If it isn’t clear what a user stands to gain from your snap, chances are they won’t even install it. So don’t be afraid to think like a marketer and emphasize the benefits of your snap.\n\nConsider introducing your snap on your website with a modal, tooltip, or card. This introduction can happen before or alongside the installation prompt, but should always be clear and descriptive.\n\n#### Important details include:\n\n- What your snap does, why someone would use it, and how it works.\n- Security precautions in plain, basic language that anyone can understand.\n- Descriptions of the features that make your snap appealing to the intended users.\n\n:::tip Tip\nSome studies estimate users read only 20-28% of text on any screen, so write about your snap with language that’s impactful, clear, and direct.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["44",{"pageContent":"Embedded in existing flows\n\nIntroduce the snap as a natural extension of existing elements on your screen, and suggest installation when the time is right. This can be a make or break moment for your snap, so put yourself in the shoes of the intended user.\n\nAt what point does it make the most sense to prompt an install? Don’t ask the user to install your snap before they do anything in the dapp or website, as they will probably decline. Instead, **wait to prompt installation** **until a point where the snap is required**.\n\nIn the following example, a key management snap is suggested in the context of a network picker screen.\n\n![Installation and connection to your snap embedded in existing flows](../assets/picker.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["45",{"pageContent":"Making the most of your metadata\n\nYour snap’s avatar and name will be among the first things a user sees when deciding whether to install your snap. These are also a key part of your identity, so it’s worth spending a bit of time on this step.\n\n**Avatar**\n\nYour snap’s avatar should be suitable for a **32 px circular frame in SVG format**. Avoid using images with small details, as they won't be impactful in the allotted space. Aim for something bold, simple, and easily understood.\n\n**Name**\n\nYour snap's name should be short and easy to remember. It should be **21 characters maximum**, **including spaces**, to ensure that it is easy to read and fits comfortably on small screens.\n\nUsing a descriptive name can help users understand how they will benefit from installing your snap, and may increase the likelihood that they will install and use it. **Never** use the word **“snap”** in your name — your name should be specific and memorable, and which will differentiate your snap from others.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["46",{"pageContent":":::note How to (not) name your snap\n\n**Don'ts**\n\n❌ _Solana Snap_\n\n❌ _Snap for Filecoin_\n\n❌ _Best manager for Bitcoin_\n\n**Do's**\n\n✅ _Solana Manager_\n\n✅ _Bitcoin Helper_\n\n✅ _Filecoin Wallet_\n\n:::\n\n![How your snap’s avatar and name is displayed during installation](../assets/install.png)\n![How your snap’s name is displayed during transaction insights](../assets/insights.png)\n![How your snap’s avatar and name is displayed during a custom dialog screen](../assets/dialog.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["47",{"pageContent":"Upleveling your copy\n\nAt MetaMask, we use an in-depth style guide to inform our writing decisions. Here are a couple of ways to easily uplevel your own copy so it feels more at home in the MetaMask ecosystem.\n\n\n### Capitalization\n\nWith few exceptions, use **sentence case as a default**. Sentence case is capitalizing only the first word of a line of copy. Not only is sentence case is more casual and conversational, it’s also easier to scan than title case. Keep in mind, there are a handful of times that title case is the way to go.\n\n### Active voice\n\nWrite your copy in active voice. There are certain situations where passive voice is the better option, but it’s more likely that active voice will suit your situation.\n\n:::tip How to write in active voice\n_Subject_ (person/thing acting) _verb_ (the action) _object_ (receives the action).\n:::\n\n:::note How to (not) write in active voice\n\n❌ _The problem is being investigated_\n\n✅ _We’re investigating the problem_\n\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/design-guidelines.md"}}],["48",{"pageContent":"---\ndescription: Get started quickly using the Snaps template.\n---\n\n# Snaps quickstart\n\nGet started with Snaps using the\n[Snaps template](https://github.com/MetaMask/template-snap-monorepo) built with TypeScript and React.\n\n## Prerequisites\n\n- [Snaps installed](install-snaps.md)\n\n  :::note\n  Snaps works with the latest LTS version of Node.js, but we recommend using the version specified in\n  the template's [`.nvmrc`](https://github.com/MetaMask/template-snap-monorepo/blob/main/.nvmrc) file.\n  :::\n\n- A text editor (for example, [VS Code](https://code.visualstudio.com/))\n\n- [Yarn](https://yarnpkg.com/) version 3","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/quickstart.md"}}],["49",{"pageContent":"Create the project\n\nUse the Snaps template by\n[creating a new repository from the template](https://github.com/MetaMask/template-snap-monorepo/generate).\n\n[Clone the repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)\nusing the command line:\n\n```bash\ngit clone git@github.com:<your-username>/template-snap-monorepo.git\n```\n\nYou can learn about the [anatomy of your snap project files](../concepts/anatomy.md).\n\n## Start the snap\n\nFrom the root of the repository, install the project dependencies using Yarn:\n\n```shell\nyarn\n```\n\nStart the development server:\n\n```shell\nyarn start\n```\n\nYou're now serving the snap and its front-end at [`http://localhost:8000`](http://localhost:8000/).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/quickstart.md"}}],["50",{"pageContent":"Connect to the snap\n\nOn the front-end, select the **Connect** button and the MetaMask Flask extension pops up and\nrequires you to approve the snap's permissions.\n\nOnce connected, select the **Send message** button to display a custom message within a confirmation\nscreen in MetaMask.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/quickstart.md"}}],["51",{"pageContent":"Customize the snap\n\nOpen the project in a text editor.\nYou can customize your snap by editing `index.ts` in the `packages/snap/src` folder.\n\n`index.ts` contains an example request that uses the\n[`snap_dialog`](../reference/rpc-api.md#snapdialog) method to display a custom confirmation screen:\n\n```ts\nimport { OnRpcRequestHandler } from '@metamask/snaps-types';\nimport { getMessage } from './message';","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/quickstart.md"}}],["52",{"pageContent":"```ts\nimport { OnRpcRequestHandler } from '@metamask/snaps-types';\nimport { getMessage } from './message';\n\nexport const onRpcRequest: OnRpcRequestHandler = ({ origin, request }) => {\n  switch (request.method) {\n    case 'hello':\n      return snap.request({\n        method: 'snap_dialog',\n        params: {\n          type: 'Confirmation',\n          content: panel([\n            text(`Hello, **${origin}**!`),\n            text('This custom confirmation is just for display purposes.'),\n            text(\n              'But you can edit the snap source code to make it do something, if you want to!',\n            ),\n          ]),\n        },\n      });\n    default:\n      throw new Error('Method not found.');\n  }\n};","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/quickstart.md"}}],["53",{"pageContent":"Edit the text in the `description` or `textAreaContent` field and select the **Reconnect** button\non the front-end to re-install the snap.\n\n:::note\nMetaMask automatically re-installs locally hosted snaps whenever it receives a connection request\nfor them.\n:::\n\nThe next time you select the **Send message** button, you see the updated text in the confirmation screen.\n\nYou've now successfully connected, installed, interacted with, and customized your snap!\nLearn more about [developing a snap](../how-to/develop-a-snap.md).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/get-started/quickstart.md"}}],["54",{"pageContent":"---\ndescription: Develop, test, and publish a snap.\n---\n\n# Develop a snap\n\nA snap can extend the dapp-facing [MetaMask JSON-RPC API](../../wallet/reference/rpc-api) in\narbitrary ways, or integrate with and extend the functionality of MetaMask using the\n[Snaps JSON-RPC API](../reference/rpc-api.md) and [permissions](request-permissions.md).\n\nBefore developing a snap, it's important to understand:\n\n- [The snap anatomy](../concepts/anatomy.md).\n- [The snap lifecycle](../concepts/lifecycle.md).\n- [The snap user interface](../concepts/user-interface.md).\n- [The Snaps execution environment](../concepts/execution-environment.md).\n\nYou can [get started quickly using the Snaps template](../get-started/quickstart.md) or follow a\n[tutorial](../category/tutorials).\n\nThis page describes additional important steps when developing a snap.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["55",{"pageContent":"Detect the user's MetaMask version\n\nWhen developing a website that depends on Snaps, you need to know whether the user has\n[MetaMask Flask](../get-started/install-snaps.md#install-metamask-flask) installed.\n\nWe recommend calling the\n[`web3_clientVersion`](https://metamask.github.io/api-playground/api-documentation/#web3_clientVersion)\nMetaMask RPC method to obtain this information.\nThe following example uses the\n[`@metamask/detect-provider`](https://npmjs.com/package/@metamask/detect-provider) package to get\nthe provider object from MetaMask first:\n\n```js\nimport detectEthereumProvider from '@metamask/detect-provider';\n\n// This resolves to the value of window.ethereum or null\nconst provider = await detectEthereumProvider();\n\n// web3_clientVersion returns the installed MetaMask version as a string\nconst isFlask = (\n  await provider?.request({ method: 'web3_clientVersion' })\n)?.includes('flask');\n\nif (provider && isFlask) {\n  console.log('MetaMask Flask successfully detected!');","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["56",{"pageContent":"if (provider && isFlask) {\n  console.log('MetaMask Flask successfully detected!');\n\n  // Now you can use Snaps!\n} else {\n  console.error('Please install MetaMask Flask!', error);\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["57",{"pageContent":"Test your snap\n\nTest your snap by hosting it locally using `mm-snap serve`, installing it in Flask, and calling its\nAPI methods from a web page.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["58",{"pageContent":"Debug your snap\n\nTo debug your snap, use `console.log` and inspect the MetaMask background process.\nYou can add your log statements in your source code and build your snap, or add them directly\nto your snap bundle and use `mm-snap manifest --fix` to update the `shasum` in your snap manifest file.\nThe manifest `shasum` must match the contents of your bundle at the time MetaMask fetches your snap.\n\n:::note\nBecause adding logs modifies the snap source code, you must re-install the snap whenever you add a\nlog statement.\n:::\n\nThe snap log output is only visible in the extension background process console.\nIf you're using a Chromium browser, use the following steps to inspect the background process and\nview its console:\n\n1. Go to `chrome://extensions`.\n2. Toggle **Developer mode** on in the top right corner.\n3. Find MetaMask Flask, and select **Details**.\n4. Under **Inspect views**, select `background.html`.\n\nThe log output displays in the console that pops up.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["59",{"pageContent":"Publish your snap\n\nSnaps are npm packages, so publishing a snap is as simple as publishing an npm package.\nRefer to the [npm CLI documentation](https://docs.npmjs.com/cli/v8/commands/npm-publish) for details\non publishing to the public registry.\nThe following details are specific to Snaps:\n\n- The version in `package.json` and `snap.manifest.json` must match.\n- The image specified in `iconPath` in the manifest file is used as the icon displayed when\n  installing and displaying confirmations from the snap.\n\nAfter publishing the snap, any dapp can connect to the snap by using the snap ID `npm:[packageName]`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["60",{"pageContent":"Distribute your snap\n\nSince snaps are currently intended for a developer audience, MetaMask doesn't currently facilitate\ndistributing snaps to a wide audience.\nIf you have a website that expects the user to install a snap, ask the user to install MetaMask\nFlask, and then ask the user to install the snap using the\n[`wallet_enable`](../reference/rpc-api.md#wallet_enable) API method.\n\nIn the future, MetaMask will create some way for users to more easily discover snaps, but everyone\ncan always build, publish, and use snaps without MetaMask's permission.\n(Although we may try to make it difficult to use known scams.)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["61",{"pageContent":"Resources and tools\n\nYou can review the growing number of\n[example snaps](https://github.com/MetaMask/snaps-monorepo/tree/main/packages/examples) maintained\nby MetaMask, as well as the following fully functional and open source snaps:\n\n- [StarkNet](https://github.com/ConsenSys/starknet-snap)\n- [FilSnap for Filecoin](https://github.com/Chainsafe/filsnap/)\n- [Password Manager Snap](https://github.com/ritave/snap-passwordManager)\n- [Transaction Simulation with Ganache](https://github.com/Montoya/tx-simulation-with-ganache-snap)\n  (uses Truffle for local testing)\n\nMetaMask also maintains tools to help developers build, debug, and maintain snaps:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["62",{"pageContent":"MetaMask also maintains tools to help developers build, debug, and maintain snaps:\n\n- [Template snap](https://github.com/MetaMask/template-snap-monorepo) - A template that includes\n  TypeScript/React and vanilla JavaScript options and a CLI for building, packaging, and deploying\n  your snap and a companion dapp.\n- [Snaps Truffle Box](https://trufflesuite.com/boxes/metamask-snap-box/) - A template that combines\n  the TypeScript template snap and Truffle so you can easily test snaps that use smart contracts\n  with Ganache.\n- [Test snaps](https://github.com/MetaMask/test-snaps) - A collection of test snaps and a dapp for\n  evaluating them.\n\nIf you have any questions, ask them on\n[GitHub discussions](https://github.com/MetaMask/snaps-monorepo/discussions), and if you encounter\nany issues, please [open a GitHub issue](https://github.com/MetaMask/snaps-monorepo/issues).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/develop-a-snap.md"}}],["63",{"pageContent":"---\ndescription: Manage users' private keys.\n---\n\n# Manage keys\n\nThe [Snaps JSON-RPC API](../reference/rpc-api.md) allows you to manage users' private keys with\ntheir approval.\n\n:::caution important\nManaging users' keys comes with great responsibility: Misplaced or stolen\nprivate keys can lead to a complete loss of funds for users of your snap.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["64",{"pageContent":"Responsible key management\n\nIt's critical to practice responsible key management.\nThe general rule is: **Don't create a situation where your users can lose assets.**\n\n:::tip examples of responsible key management:\n\n- Deriving private keys and/or storing them in Snaps persistent storage, without ever moving them\n  out of the [Snaps execution environment](../concepts/execution-environment.md).\n- Ensuring arbitrary code execution can't access irreversible operations or private keys.\n- Asking the user for consent and informing them of what's going to happen before performing\n  irreversible operations.\n\n:::\n\n:::danger examples of irresponsible key management:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["65",{"pageContent":":::\n\n:::danger examples of irresponsible key management:\n\n- Allowing extraction of private keys outside the snap in any way, especially through RPC or\n  network connections.\n- Executing arbitrary or untrusted code with access to private keys.\n- Not getting properly informed consent before performing irreversible operations.\n- Asking for consent but ignoring the decision.\n- Exposing key material in clear-text.\n- Producing a bug that leads to any of the above.\n\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["66",{"pageContent":"Derive keys\n\nTo derive a user's private keys:\n\n1. Choose between the BIP-32 or BIP-44 specifications to derive the user's private keys.\n    If the keys you want to derive conform to the\n    [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) structure, use\n    [`snap_getBip44Entropy`](../reference/rpc-api.md#snap_getbip44entropy) to derive them.\n    Otherwise, use [`snap_getBip32Entropy`](../reference/rpc-api.md#snap_getbip32entropy).\n2. Add the required permission to your manifest file.\n3. Find out the derivation path to use.\n    This is dependent on the application you're building.\n4. Use the [`@metamask/key-tree`](https://github.com/MetaMask/key-tree) module to derive the keys.\n    Any additional code, for example, to derive addresses from keys, is application-specific.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["67",{"pageContent":"Dogecoin example\n\nFor example, to derive Dogecoin keys:\n\n1. Dogecoin uses the BIP-44 scheme, so you'll use\n   [`snap_getBip44Entropy`](../reference/rpc-api.md#snap_getbip44entropy).\n2. Dogecoin has coin type `3`, so add the following to the manifest file:\n\n   ```json\n   {\n     \"initialPermissions\": {\n       \"snap_getBip44Entropy\": [\n         {\n           \"coinType\": 3\n         }\n       ]\n     }\n   }\n   ```\n\n3. Dogecoin uses the following derivation path:\n\n   ```\n   m/44'/3'/0'/0/{address_index}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["68",{"pageContent":"3. Dogecoin uses the following derivation path:\n\n   ```\n   m/44'/3'/0'/0/{address_index}\n   ```\n\n   To get the second Dogecoin account, add the following code to your snap:\n\n   ```javascript\n   import { getBIP44AddressKeyDeriver } from '@metamask/key-tree';\n\n   // Get the Dogecoin node, corresponding to the path m/44'/3'.\n   const dogecoinNode = await snap.request({\n     method: 'snap_getBip44Entropy',\n     params: {\n       coinType: 3,\n     },\n   });\n\n   /**\n    * Create a function that takes an index and returns an extended private key for m/44'/3'/0'/0/address_index.\n    * The second parameter to getBIP44AddressKeyDeriver isn't passed. This sets account and changes to 0.\n    */\n   const deriveDogecoinAddress = await getBIP44AddressKeyDeriver(dogecoinNode);\n\n   // Derive the second Dogecoin address, which has index 1.\n   const secondAccount = deriveDogecoinAddress(1);\n   ```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["69",{"pageContent":"Examples\n\nThe following are examples of existing snaps that manage accounts and keys:\n\n- [KeystoneHQ's Btcsnap](https://github.com/KeystoneHQ/btcsnap-1)\n- [ConsenSys's Starknet Snap](https://github.com/ConsenSys/starknet-snap)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/manage-keys.md"}}],["70",{"pageContent":"---\ndescription: Snaps exports reference\ntoc_max_heading_level: 2\n---\n\n# Snaps exports\n\nA snap can export the following methods.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["71",{"pageContent":"onRpcRequest\n\nTo communicate with dapps and other snaps, a snap must implement its own JSON-RPC API by exporting\n`onRpcRequest`.\nWhenever the snap receives a JSON-RPC request, the `onRpcRequest` handler method is called.\n\n:::caution important\nIf your snap can do something useful without receiving and responding to JSON-RPC requests, such as\nproviding [transaction insights](#ontransaction), you can skip exporting `onRpcRequest`.\nHowever, if you want to do something such as manage the user's keys for a particular protocol and\ncreate a dapp that sends transactions for that protocol via your snap, for example, you must\nspecify an RPC API.\n:::\n\n### Parameters\n\nAn object containing:\n\n- `origin` - The origin as a string.\n- `request` - The JSON-RPC request.\n\n### Returns\n\nA promise containing the return of the implemented method.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["72",{"pageContent":"Parameters\n\nAn object containing:\n\n- `origin` - The origin as a string.\n- `request` - The JSON-RPC request.\n\n### Returns\n\nA promise containing the return of the implemented method.\n\n### Example\n\n<!--tabs-->\n\n# TypeScript\n\n```typescript\nimport { OnRpcRequestHandler } from '@metamask/snaps-types';\n\nexport const onRpcRequest: OnRpcRequestHandler = async ({\n  origin,\n  request,\n}) => {\n  switch (request.method) {\n    case 'hello':\n      return 'world!';\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n```\n\n# JavaScript\n\n```js\nmodule.exports.onRpcRequest = async ({ origin, request }) => {\n  switch (request.method) {\n    case 'hello':\n      return 'world!';\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["73",{"pageContent":"onTransaction\n\nTo provide transaction insights before a user signs a transaction, a snap must export `onTransaction`.\nWhenever there's a contract interaction, and a transaction is submitted using the MetaMask\nextension, MetaMask calls this method.\nMetaMask passes the raw unsigned transaction payload to the `onTransaction` handler method.\n\n:::note\nFor MetaMask to call the snap's `onTransaction` method, you must request the\n[`endowment:transaction-insight`](permissions.md#endowmenttransaction-insight) permission.\n:::\n\n### Parameters\n\nAn object containing:\n\n- `transaction` - The raw transaction payload.\n- `chainId` - The [CAIP-2](https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md)\n  chain ID.\n- `transactionOrigin` - The transaction origin if\n  [`allowTransactionOrigin`](permissions.md#endowmenttransaction-insight) is set to `true`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["74",{"pageContent":"Returns\n\nA content object displayed using [custom UI](../how-to/use-custom-ui.md), alongside the confirmation\nfor the transaction that `onTransaction` was called with.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["75",{"pageContent":"Example\n\n<!--tabs-->\n\n# TypeScript\n\n```typescript\nimport { OnTransactionHandler } from '@metamask/snaps-types';\nimport { panel, heading, text } from '@metamask/snaps-ui';\n\nexport const onTransaction: OnTransactionHandler = async ({\n  transaction,\n  chainId,\n  transactionOrigin,\n}) => {\n  const insights = /* Get insights */;\n  return {\n    content: panel([\n      heading('My Transaction Insights'),\n      text('Here are the insights:'),\n      ...(insights.map((insight) => text(insight.value)))\n    ])\n  };\n};\n```\n\n# JavaScript\n\n```js\nimport { panel, heading, text } from '@metamask/snaps-ui';\n\nmodule.exports.onTransaction = async ({\n  transaction,\n  chainId,\n  transactionOrigin,\n}) => {\n  const insights = /* Get insights */;\n  return {\n    content: panel([\n      heading('My Transaction Insights'),\n      text('Here are the insights:'),\n      ...(insights.map((insight) => text(insight.value)))\n    ])\n  };\n};\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["76",{"pageContent":"onCronjob\n\nTo run periodic actions for the user (cron jobs), a snap must export `onCronjob`.\nThis method is called at the specified times with the specified payloads defined in the\n[`endowment:cronjob`](permissions.md#endowmentcronjob) permission.\n\n:::note\nFor MetaMask to call the snap's `onCronjob` method, you must request the\n[`endowment:cronjob`](permissions.md#endowmentcronjob) permission.\n:::\n\n### Parameters\n\nAn object containing an RPC request specified in the `endowment:cronjob` permission.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["77",{"pageContent":"Parameters\n\nAn object containing an RPC request specified in the `endowment:cronjob` permission.\n\n### Example\n\n<!--tabs-->\n\n# TypeScript\n\n```typescript\nimport { OnCronjobHandler } from '@metamask/snaps-types';\n\nexport const onCronjob: OnCronjobHandler = async ({ request }) => {\n  switch (request.method) {\n    case 'exampleMethodOne':\n      return snap.request({\n        method: 'snap_notify',\n        params: {\n          type: 'inApp',\n          message: `Hello, world!`,\n        },\n      });\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n```\n\n# JavaScript\n\n```js\nmodule.exports.onCronjob = async ({ request }) => {\n  switch (request.method) {\n    case 'exampleMethodOne':\n      return snap.request({\n        method: 'snap_notify',\n        params: {\n          type: 'inApp',\n          message: `Hello, world!`,\n        },\n      });\n\n    default:\n      throw new Error('Method not found.');\n  }\n};\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/exports.md"}}],["78",{"pageContent":"---\ndescription: Create a snap that estimates gas fees.\n---\n\n# Create a gas estimation snap\n\nThis tutorial walks you through creating a snap that estimates gas fees.\nThe snap is based on the\n[Snaps template](https://github.com/MetaMask/template-snap-monorepo).\nIt uses the `fetch` API to request information from the internet, and displays custom information in\na confirmation dialog.\n\n## Prerequisites\n\n- [Snaps installed](../get-started/install-snaps.md)\n\n- A text editor (for example, [VS Code](https://code.visualstudio.com/))\n\n- [Yarn](https://yarnpkg.com/) version 3","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["79",{"pageContent":"Steps\n\n### 1. Set up the project\n\nUse the Snaps template by\n[creating a new repository from the template](https://github.com/MetaMask/template-snap-monorepo/generate).\n\nGive your project a new name, such as `gas-estimation-snap`.\n\n[Clone the repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)\nusing the command line:\n\n```bash\ngit clone git@github.com:<your-username>/gas-estimation-snap.git\n```\n\nTo initialize your development environment with the required dependencies, in your project\ndirectory, enter the command `yarn`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["80",{"pageContent":"2. Set a custom icon\n\nOpen `/packages/snap/snap.manifest.json` in a text editor.\nThis file has the main configuration details for your snap.\nEdit the section under `npm` to change the `iconPath` to your new icon:\n\n```json title=\"snap.manifest.json\"\n\"location\": {\n   \"npm\": {\n      \"filePath\": \"dist/bundle.js\",\n      \"iconPath\": \"images/gas.svg\",\n      \"packageName\": \"snap\",\n      \"registry\": \"https://registry.npmjs.org/\"\n   }\n```\n\nThen, place\n[this file](https://raw.githubusercontent.com/Montoya/gas-fee-snap/main/packages/snap/images/gas.svg)\ninto the `/packages/snap/images` folder.\nThis is a free icon, **Gas** by Mello from\n[Noun Project](https://thenounproject.com/browse/icons/term/gas/).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["81",{"pageContent":"3. Enable network access\n\nTo enable your snap to use the `fetch` API, request the\n[`endowment:network-access`](../reference/permissions.md#endowmentnetwork-access) permission by\nmodifying `initialPermissions` in `snap.manifest.json`:\n\n```json title=\"snap.manifest.json\"\n\"initialPermissions\": {\n  \"snap_dialog\": {},\n  \"endowment:rpc\": {\n    \"dapps\": true,\n    \"snaps\": false\n  }, \n  \"endowment:network-access\": {}\n},\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["82",{"pageContent":"4. Fetch gas fee estimates\n\nOpen `/packages/snap/src/index.ts`.\nThis is the main code file for your snap.\nTo get a gas fee estimate, use the public API endpoint provided by\n[Open Source Ethereum Explorer](https://beaconcha.in/).\nAdd the following `getFees()` function to the top of the file:\n\n```typescript title=\"index.ts\"\nimport { OnRpcRequestHandler } from '@metamask/snaps-types';\nimport { panel, text } from '@metamask/snaps-ui';\n\nasync function getFees() {\n  const response = await fetch('https://beaconcha.in/api/v1/execution/gasnow'); \n  return response.text();\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["83",{"pageContent":"Then, modify the snap RPC message handler that displays the confirmation window.\nThis handler uses a switch statement to handle various request methods, but in this case there's\nonly one method, `hello`.\nFor this method, the handler returns a call to MetaMask with the parameters to display a\nconfirmation window, and passes some static strings.\n\nSince `getFees()` returns a promise, you must use `then()` to resolve it in your `hello` method.\nRewrite the `hello` method with the following code:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["84",{"pageContent":"Since `getFees()` returns a promise, you must use `then()` to resolve it in your `hello` method.\nRewrite the `hello` method with the following code:\n\n```typescript title=\"index.ts\"\nexport const onRpcRequest: OnRpcRequestHandler = ({ origin, request }) => {\n  switch (request.method) {\n    case 'hello':\n      return getFees().then(fees => {\n        return snap.request({\n          method: 'snap_dialog',\n          params: {\n            type: 'Alert',\n            content: panel([\n              text(`Hello, **${origin}**!`),\n              text(`Current gas fee estimates: ${fees}`),\n            ]),\n          }\n        });\n      });\n    default:\n      throw new Error('Method not found.');\n  }\n};\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["85",{"pageContent":"5. Build and test the snap\n\nTo build and test your snap:\n\n1. Open `package.json` in the root directory of the project, and bump the version (if the version is\n    `0.1.0`, bump it to `0.2.0`).\n\n2. From the command line, run `yarn start`.\n    You should get a message that includes:\n\n    ```bash\n    You can now view site in the browser.\n    \n      http://localhost:8000/","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["86",{"pageContent":"3. Open [`localhost:8000`](http://localhost:8000/) in your browser (with MetaMask Flask installed).\n    A page like the following displays:\n\n    ![Test dapp with template snap](../assets/template-snap.png)\n\n    This is a boilerplate test dapp for installing and testing your snap.\n\n4. Select **Connect** to connect Flask to the dapp.\n    After connecting, you're prompted to install the snap with the following permissions:\n\n    - **Allow websites to communicate directly with this snap.**\n    - **Access the internet.**\n    - **Display dialog windows in MetaMask.**\n\n5. Select **Approve & install**, then **Send message**.\n    A dialog prompt displays with the response from the gas fee API:\n\n<p align=\"center\">\n\n![Gas estimation dialog](../assets/gas-estimation.png)\n\n</p>\n\nCongratulations!\nYou've integrated a public API into MetaMask and displayed real-time gas fee estimates.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["87",{"pageContent":"6. Next steps\n\nNext, you can try parsing the JSON response from the remote API and displaying the fees in a nicely\nformatted way.\n\nYou can also update the fields in `snap.manifest.json` to match your custom snap:\n\n- `proposedName` - The name of your snap.\n- `description` - The description of your snap.\n- `repository` - The URL of your cloned GitHub repository.\n- `source` - The `shasum` is set automatically when you build from the command line.\n  If you decided to publish your snap to npm, update the `location` to its published location.\n\nSimilarly, you should update the `name`, `version`, `description`, and `repository` sections of\n`/packages/snap/package.json` even if you don't plan to publish your snap to npm.\n\n:::note\nThe `version` field in `snap.manifest.json` inherits the `version` field from `package.json`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["88",{"pageContent":":::note\nThe `version` field in `snap.manifest.json` inherits the `version` field from `package.json`.\n:::\n\nLastly, you can update the content of `/packages/site/src/pages/index.tsx`, such as changing the\nname of the method for showing gas fee estimates.\nIf you change the method name, make sure to change the method name in `/packages/snap/src/index.ts`\nto match.\n\nOnce you've made all necessary changes, you can\n[publish your snap to npm](../how-to/develop-a-snap.md#publish-your-snap).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/gas-estimation.md"}}],["89",{"pageContent":"---\ndescription: Create a snap that provides transaction insights.\n---\n\n# Create a transaction insights snap\n\nThis tutorial walks you through creating a snap that calculates the percentage of gas fees that\na user would pay when creating a transaction.\nThe snap is based on the\n[Snaps template](https://github.com/MetaMask/template-snap-monorepo), and it provides transaction\ninsights in the MetaMask transaction window.\n\n## Prerequisites\n\n- [Snaps installed](../get-started/install-snaps.md)\n\n- An account on your MetaMask Flask instance with testnet ETH\n\n  :::tip\n  You can use [Infura's Sepolia faucet](https://www.infura.io/faucet) to get Sepolia ETH.\n  :::\n\n- A text editor (for example, [VS Code](https://code.visualstudio.com/))\n\n- [Yarn](https://yarnpkg.com/) version 3","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["90",{"pageContent":"Steps\n\n### 1. Set up the project\n\nUse the Snaps template by\n[creating a new repository from the template](https://github.com/MetaMask/template-snap-monorepo/generate).\n\nGive your project a new name, such as `transaction-insights-snap`.\n\n[Clone the repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)\nusing the command line:\n\n```bash\ngit clone git@github.com:<your-username>/transaction-insights-snap.git\n```\n\nTo initialize your development environment with the required dependencies, in your project\ndirectory, enter the command `yarn`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["91",{"pageContent":"2. Enable transaction insights and the Ethereum provider\n\nThe template snap is set up to expose a JSON-RPC API with a simple hello command, which brings up a\ndialog box.\nIn contrast, the snap you're creating in this tutorial doesn't expose any API.\nInstead, it provides transaction insights directly in the MetaMask transaction window.\n\nIn particular, the snap shows the user the percentage of gas fees they would pay for their transaction.\nIt gets the current gas price by calling the\n[`eth_gasPrice`](https://metamask.github.io/api-playground/api-documentation/#eth_gasPrice) RPC\nmethod using the global Ethereum provider made available to snaps.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["92",{"pageContent":"To enable your snap to provide transaction insights and use the global Ethereum provider, open\n`/packages/snap/snap.manifest.json` in a text editor.\nRequest the\n[`endowment:transaction-insight`](../reference/permissions.md#endowmenttransaction-insight) and\n[`endowment:ethereum-provider`](../reference/permissions.md#endowmentethereum-provider)\npermissions by modifying `initialPermissions`:\n\n```json title=\"snap.manifest.json\"\n\"initialPermissions\": {\n  \"endowment:transaction-insight\": {},\n  \"endowment:ethereum-provider\": {}\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["93",{"pageContent":"3. Calculate and display the percentage of gas fees\n\nTo calculate and display the gas fees a user would pay as a percentage of their outgoing transaction,\nreplace the code in `/packages/snap/src/index.ts` with the following:\n\n```typescript title=\"index.ts\"\nimport { OnTransactionHandler } from '@metamask/snaps-types';\nimport { heading, panel, text } from '@metamask/snaps-ui';\n\n// Handle outgoing transactions.\nexport const onTransaction: OnTransactionHandler = async ({ transaction }) => {","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["94",{"pageContent":"// Handle outgoing transactions.\nexport const onTransaction: OnTransactionHandler = async ({ transaction }) => {\n\n  // Use the window.ethereum global provider to fetch the gas price.\n  const currentGasPrice = await window.ethereum.request({\n    method: 'eth_gasPrice',\n  });\n  \n  // Get fields from the transaction object.\n  const transactionGas = parseInt(transaction.gas as string, 16);\n  const currentGasPriceInWei = parseInt(currentGasPrice ?? '', 16);\n  const maxFeePerGasInWei = parseInt(transaction.maxFeePerGas as string, 16);\n  const maxPriorityFeePerGasInWei = parseInt(\n    transaction.maxPriorityFeePerGas as string,\n    16,\n  );\n\n  // Calculate gas fees the user would pay.\n  const gasFees = Math.min(\n    maxFeePerGasInWei * transactionGas,\n    (currentGasPriceInWei + maxPriorityFeePerGasInWei) * transactionGas,\n  );","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["95",{"pageContent":"// Calculate gas fees the user would pay.\n  const gasFees = Math.min(\n    maxFeePerGasInWei * transactionGas,\n    (currentGasPriceInWei + maxPriorityFeePerGasInWei) * transactionGas,\n  );\n\n  // Calculate gas fees as percentage of transaction.\n  const transactionValueInWei = parseInt(transaction.value as string, 16);\n  const gasFeesPercentage = (gasFees / (gasFees + transactionValueInWei)) * 100;\n\n  // Display percentage of gas fees in the transaction insights UI.\n  return {\n    content: panel([\n      heading('Transaction insights snap'),\n      text(\n        `As set up, you are paying **${gasFeesPercentage.toFixed(\n          2,\n        )}%** in gas fees for this transaction.`,\n      ),\n    ]),\n  };\n};\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["96",{"pageContent":"4. Build and test the snap\n\nTo build and test your snap:\n\n1. From the command line, run `yarn start` in the root of your project.\n    This starts two development servers: one for watching and compiling the snap, and another for the\n    React site.\n    The snap bundle is served from `localhost:8080`, and the site is served from `localhost:8000`.\n    You should get a message that includes:\n\n    ```bash\n    You can now view site in the browser.\n    \n      http://localhost:8000/","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["97",{"pageContent":"2. Open [`localhost:8000`](http://localhost:8000) in your browser (with MetaMask Flask installed).\n\n3. Select **Connect**, and accept the permission request.\n\n4. After connecting, you're prompted to install the snap with the **Fetch and display transaction\n    insights** and **Access the Ethereum provider** permissions.\n    Select **Approve & install**.\n\n5. From MetaMask Flask, create a new testnet ETH transfer.\n    You can set up multiple accounts to transfer between your accounts.\n\n6. On the confirmation window, switch to the tab named **TYPESCRIPT EXAMPLE SNAP**.\n    Switching to the tab activates the [`onTransaction`](../reference/exports.md#ontransaction)\n    export of your snap and displays the percentage of gas fees in the transaction insights UI:\n\n<p align=\"center\">\n\n![Transaction insights UI](../assets/transaction-insights.png)\n\n</p>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["98",{"pageContent":"5. Display a different UI for contract interactions\n\nThe snap should only display a gas fee percentage if the user is doing a regular ETH transfer.\nFor contract interactions, it should display a UI that conveys that message.\nAdd the following code to the beginning of the `onTransaction` export:\n\n```typescript\nif (typeof transaction.data === 'string' && transaction.data !== '0x') {\n  return {\n    content: panel([\n      heading('Percent Snap'),\n      text(\n        'This snap only provides transaction insights for simple ETH transfers.',\n      ),\n    ]),\n  };\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["99",{"pageContent":"6. Next steps\n\nThe initial project has generic names in multiple places.\nYou can update the fields in `snap.manifest.json` to match your custom snap:\n\n- `proposedName` - The name of your snap.\n  This replaces **TYPESCRIPT EXAMPLE SNAP** in the transaction insights UI.\n- `description` - The description of your snap.\n- `repository` - The URL of your cloned GitHub repository.\n- `source` - The `shasum` is set automatically when you build from the command line.\n  If you decided to publish your snap to npm, update the `location` to its published location.\n\nSimilarly, you should update the `name`, `version`, `description`, and `repository` sections of\n`/packages/snap/package.json` even if you don't plan to publish your snap to npm.\n\n:::note\nThe `version` field in `snap.manifest.json` inherits the `version` field from `package.json`.\n:::\n\nLastly, you can update the content of `/packages/site/src/pages/index.tsx`, such as removing the\ntemplate **Send Hello** button.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["100",{"pageContent":"Lastly, you can update the content of `/packages/site/src/pages/index.tsx`, such as removing the\ntemplate **Send Hello** button.\n\nOnce you've made all necessary changes, you can\n[publish your snap to npm](../how-to/develop-a-snap.md#publish-your-snap).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/tutorials/transaction-insights.md"}}],["101",{"pageContent":"---\ntitle: Snaps anatomy\ndescription: Learn about the anatomy of a snap project.\n---\n\n# Snaps anatomy\n\nIf you look at the directory structure of the\n[Snaps template repository](https://github.com/MetaMask/template-snap-monorepo) used in the\n[Snaps quickstart](../get-started/quickstart.md), it looks something like this:\n\n```text\ntemplate-snap-monorepo/\n├─ packages/\n│  ├─ site/\n|  |  |- src/\n|  |  |  |- App.tsx\n|  |  ├─ package.json\n|  |  |- ...(react app content)\n|  |\n│  ├─ snap/\n|  |  ├─ src/\n|  |  |  |- index.ts\n|  |  ├─ snap.manifest.json\n|  |  ├─ package.json\n|  |  |- ... (snap content)\n├─ package.json\n├─ ... (other stuff)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["102",{"pageContent":"Source files other than `index.ts` are located through its imports.\nThe defaults can be overwritten in the [configuration file](#configuration-file).\n\n:::tip Create a snap project\nWhen you create a new snap project using `mm-snap init`, it has all these files.\nStill, we recommend\n[cloning the template snap repository to get started](../get-started/quickstart.md).\n:::\n\nThis page examines the major components of a snap:\n\n- [The source code](#source-code) contains the primary code of the snap.\n- [The manifest file](#manifest-file) tells MetaMask important information about the snap.\n- [The configuration file](#configuration-file) specifies configuration options for the snap.\n- [The bundle file](#bundle-file) is the output file of the published snap.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["103",{"pageContent":"Source code\n\nIf you're familiar with JavaScript or TypeScript development, developing a snap might feel familiar\nto you.\nConsider this simple snap, `hello-snap`:\n\n```typescript title=\"index.ts\"\nmodule.exports.onRpcRequest = async ({ origin, request }) => {\n  switch (request.method) {\n    // Expose a \"hello\" RPC method to dapps\n    case \"hello\":\n      return \"world!\";\n\n    default:\n      throw new Error(\"Method not found.\");\n  }\n};","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["104",{"pageContent":"To communicate with the outside world, the snap must implement its own JSON-RPC API by exposing\nthe exported function [`onRpcRequest`](../reference/exports.md#onrpcrequest).\nWhenever the snap receives a JSON-RPC request from a dapp or another snap, this handler function is\ncalled with the specified parameters.\n\nIn addition to being able to expose a JSON-RPC API, snaps can access the global object `snap`.\nYou can use this object to make Snaps-specific JSON-RPC requests.\n\nIf a dapp wants to use `hello-snap`, it can implement something like this:\n\n```javascript\n// Connect to the snap, enabling its usage inside the dapp\nawait window.ethereum.request({\n  method: \"wallet_enable\",\n  params: [\n    {\n      wallet_snap: {\n        \"npm:hello-snap\": {\n          version: \"^1.0.0\",\n        },\n      },\n    },\n  ],\n});","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["105",{"pageContent":"// Invoke the \"hello\" RPC method exposed by the snap\nconst hello = await window.ethereum.request({\n  method: \"wallet_invokeSnap\",\n  params: { snapId: \"npm:hello-snap\", request: { method: \"hello\" } },\n});\n\nconsole.log(hello); // 'world!'","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["106",{"pageContent":"The snap's RPC API is completely up to you, as long as it's a valid\n[JSON-RPC](https://www.jsonrpc.org/specification) API.\n\n:::tip Does my snap need to have an RPC API?\nNo, that's also up to you!\nIf your snap can do something useful without receiving and responding to JSON-RPC requests, such as\nproviding [transaction insights](../reference/exports.md#ontransaction), then you can skip exporting\n`onRpcRequest`.\nHowever, if you want to do something such as manage the user's keys for a particular protocol and\ncreate a dapp that, for example, sends transactions for that protocol using your snap, you must\nspecify an RPC API.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["107",{"pageContent":"Manifest file\n\nTo get MetaMask to execute your snap, you must have a valid manifest file named `snap.manifest.json`,\nlocated in your package root directory.\nThe manifest file of `hello-snap` would look something like this:\n\n```json\n{\n  \"version\": \"1.0.0\",\n  \"proposedName\": \"hello-snap\",\n  \"description\": \"A snap that says hello!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Hello/hello-snap.git\"\n  },\n  \"source\": {\n    \"shasum\": \"w3FltkDjKQZiPwM+AThnmypt0OFF7hj4ycg/kxxv+nU=\",\n    \"location\": {\n      \"npm\": {\n        \"filePath\": \"dist/bundle.js\",\n        \"iconPath\": \"images/icon.svg\",\n        \"packageName\": \"hello-snap\",\n        \"registry\": \"https://registry.npmjs.org/\"\n      }\n    }\n  },\n  \"initialPermissions\": {},\n  \"manifestVersion\": \"0.1\"\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["108",{"pageContent":"The manifest tells MetaMask important information about your snap, such as where it's published\n(using `source.location`) and how to verify the integrity of the snap source code (by attempting to\nreproduce the `source.shasum` value).\n\n:::note\nCurrently, snaps can only be\n[published to the official npm registry](https://docs.npmjs.com/packages-and-modules/contributing-packages-to-the-registry),\nand the manifest must also match the corresponding fields of the `package.json` file.\nIn the future, developers will be able to distribute snaps in different ways, and the manifest will\nexpand to support different publishing solutions.\n\nThe [snaps publishing specification](https://github.com/MetaMask/SIPs/blob/main/SIPS/sip-9.md)\ndetails the requirements of both `snap.manifest.json` and its relationship to `package.json`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["109",{"pageContent":"The [snaps publishing specification](https://github.com/MetaMask/SIPs/blob/main/SIPS/sip-9.md)\ndetails the requirements of both `snap.manifest.json` and its relationship to `package.json`.\n:::\n\nYou might need to modify some manifest fields manually.\nFor example, if you change the location of the (optional) icon SVG file, you must update\n`source.location.npm.iconPath` to match.\nYou can also use the [command line](../reference/cli/index.md) to update some fields for you.\nFor example, `mm-snap build` or `mm-snap manifest --fix` updates `source.shasum`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["110",{"pageContent":"Configuration file\n\nThe snap configuration file, `snap.config.js`, should be placed in the project root directory.\nYou can override the default values of the [Snaps CLI options](../reference/cli/options.md) by specifying\nthem in the `cliOptions` property of the configuration file.\nFor example:\n\n```javascript\nmodule.exports = {\n  cliOptions: {\n    src: \"lib/index.js\",\n    dist: \"out\",\n    port: 9000,\n  },\n};\n```\n\nIf you want to customize the Browserify build process, you can provide the `bundlerCustomizer` property.\nIt's a function that takes one argument, the\n[browserify object](https://github.com/browserify/browserify#api-example) which MetaMask uses\ninternally to bundle the snap.\nYou can transform it in any way you want, for example, adding plugins.\nThe `bundleCustomizer` function looks something like this:\n\n```javascript\nconst brfs = require(\"brfs\");\n\nmodule.exports = {\n  cliOptions: {\n    /* ... */\n  },\n  bundlerCustomizer: (bundler) => {\n    bundler.transform(brfs);\n  },\n};","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["111",{"pageContent":":::note\nYou should not publish the configuration file to NPM, since it's only used for development and\nbuilding.\nHowever, you can commit the file to GitHub to share the configuration with your team, since it\nshouldn't contain any secrets.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["112",{"pageContent":"Bundle file\n\nBecause of the way snaps are executed, they must be published as a single `.js` file containing the\nentire source code and all dependencies.\nMoreover, the [Snaps execution environment](execution-environment.md) has no DOM, no Node.js\nAPIs, and no filesystem access, so anything that relies on the DOM doesn't work, and any Node\nbuilt-ins must be bundled along with the snap.\n\nUse the command `mm-snap build` to bundle your snap using [Browserify](https://browserify.org).\nThis command finds all dependencies using your specified main entry point and outputs a bundle\nfile to your specified output path.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/concepts/anatomy.md"}}],["113",{"pageContent":"---\ndescription: Solve common issues.\n---\n\n# Troubleshoot\n\nThis page describes common issues you may encounter when developing a snap, and how to resolve them.\n\nIf you encounter any issues that you can't solve on your own, please\n[open a GitHub issue](https://github.com/MetaMask/snaps-monorepo/issues).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["114",{"pageContent":"Fix build and evaluation issues\n\nBecause [Secure ECMAScript (SES)](../concepts/execution-environment.md) adds additional restrictions\non the JavaScript runtime on top of strict mode, code that executes normally under strict mode might\nnot under SES.\n`mm-snap build` by default attempts to execute a snap in a stubbed SES environment.\nYou can also disable this behavior and run the evaluation step separately using `mm-snap eval`.\nIf an error is thrown during this step, it's likely due to a SES incompatibility, and you must fix\nthe issues manually.\nThese incompatibilities tend to occur in dependencies.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["115",{"pageContent":"While the errors you get from SES may seem scary, they're usually not that hard to fix.\nThe actual file, function, and variable names in the `mm-snap eval` error stack trace might not make\na lot of sense to you, but the line numbers should correspond to your snap\n[bundle file](../concepts/anatomy.md#bundle-file).\nThus, you can identify if the error is due to your code or one of your dependencies.\nIf the problem is in a dependency, you can try a different version or to fix the issue locally by\nusing tools such as [`patch-package`](https://npmjs.com/package/patch-package) (see how to\n[patch dependencies](#patch-dependencies)) or by modifying the bundle file directly.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["116",{"pageContent":"To give you an idea of a common error and how to fix it, \"sloppily\" declared variables (i.e.\nassigning to a new variable without an explicit variable declaration) are forbidden in strict mode,\nand therefore in SES as well.\nIf you get an error during the `eval` step that says something like `variableName is not defined`,\nsimply prepending `var variableName;` to your snap bundle may solve the problem.\n(This actually happened so frequently with [Babel's](https://babeljs.io/) `regeneratorRuntime` that\n`mm-snap build` automatically handles that one.)\n\n:::caution\nRun `mm-snap manifest --fix` if you modified your snap bundle after building.\nOtherwise your manifest `shasum` value won't be correct, and attempting to install your snap fails.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["117",{"pageContent":"Use other build tools\n\nIf you prefer building your snap with a build system you're more comfortable with, Snaps implements\nplugins for several other build systems:\n\n- [Webpack](https://www.npmjs.com/package/@metamask/snaps-webpack-plugin)\n- [Rollup](https://www.npmjs.com/package/@metamask/rollup-plugin-snaps)\n- [Browserify](https://www.npmjs.com/package/@metamask/snaps-browserify-plugin)\n\nFor examples on how to set up these build systems yourself, please see the\n[examples](https://github.com/MetaMask/snaps-monorepo/tree/main/packages/examples/examples).\n\nWe still recommend using the Snaps CLI to make sure your manifest `shasum` value is correct, by\nrunning `mm-snap manifest --fix` after creating your bundle.\nYou may also benefit from running `mm-snap eval` to detect any SES issues up front.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["118",{"pageContent":"Patch dependencies\n\nSome dependencies might make use of APIs that aren't available in the\n[Snaps execution environment](../concepts/execution-environment.md).\nTo work around this, we recommend checking if another library is available that makes use of those APIs.\n\nIf you can't find another library (or version) that works with the Snaps execution environment, you\ncan patch the dependency yourself using [`patch-package`](https://npmjs.com/package/patch-package).\n\n`patch-package` allows you to make changes to your dependencies, saving the changes as a patch and\nreplaying it when installing dependencies.\n\nInstall `patch-package` using Yarn:\n\n```bash\nyarn add -D patch-package postinstall-postinstall\n```\n\nThen add a postinstall script to your `package.json`:\n\n```diff\n \"scripts\": {\n+  \"postinstall\": \"patch-package\"\n }","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["119",{"pageContent":"Then add a postinstall script to your `package.json`:\n\n```diff\n \"scripts\": {\n+  \"postinstall\": \"patch-package\"\n }\n```\n\nNow you can make changes to your dependencies inside `node_modules` and run\n`yarn patch-package package-name` to save the changes as a patch.\nThis creates a `.patch` file containing your dependency patch.\nThese patches can be committed to your Git repository and are replayed when you re-install your dependencies.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["120",{"pageContent":"Patch the use of XMLHttpRequest\n\nThe `XMLHttpRequest` API is not exposed in the Snaps execution environment and won't be in the future.\nBecause of this, you may run into issues with dependencies in your dependency tree attempting to\nuse this API for their network requests.\n\nThe following are examples of popular libraries that use `XMLHttpRequest` and are thus **not**\ncompatible with the Snaps execution environment.\nThis section also describes patching strategies for fixing dependencies that try to use these libraries.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["121",{"pageContent":"cross-fetch\n\n`cross-fetch` is a popular library used for cross-platform access to the `fetch` API across multiple\nenvironments.\nUnder the hood, however, the library uses `XMLHttpRequest` and thus causes issues when used in a snap.\n\nYou can easily patch this issue using `patch-package`.\nOpen `node_modules/cross-fetch/browser-ponyfill.js` and find the following lines near the bottom of\nthe file:\n\n```javascript\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\n```\n\nYou can replace that with the following snippet:\n\n```javascript\n// Choose between native implementation (global) or custom implementation (__self__)\nvar ctx = global.fetch\n  ? { ...global, fetch: global.fetch.bind(global) }\n  : __self__;\n// var ctx = __self__; // this line disable service worker support temporarily","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["122",{"pageContent":"After replacing it, run `yarn patch-package cross-fetch`, which saves the patch for future use.\n\nAlternatively, you can use the following patch, copy and paste it to\n`patches/cross-fetch+3.1.5.patch`, and re-install your dependencies:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["123",{"pageContent":"```diff\ndiff --git a/node_modules/cross-fetch/dist/browser-ponyfill.js b/node_modules/cross-fetch/dist/browser-ponyfill.js\nindex f216aa3..6b3263b 100644\n--- a/node_modules/cross-fetch/dist/browser-ponyfill.js\n+++ b/node_modules/cross-fetch/dist/browser-ponyfill.js\n@@ -543,8 +543,8 @@ __self__.fetch.ponyfill = true;\n // Remove \"polyfill\" property added by whatwg-fetch\n delete __self__.fetch.polyfill;\n // Choose between native implementation (global) or custom implementation (__self__)\n-// var ctx = global.fetch ? global : __self__;\n-var ctx = __self__; // this line disable service worker support temporarily\n+var ctx = global.fetch ? { ...global, fetch: global.fetch.bind(global) } : __self__;\n+// var ctx = __self__; // this line disable service worker support temporarily\n exports = ctx.fetch // To enable: import fetch from 'cross-fetch'\n exports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\n exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["124",{"pageContent":"Using either of these methods allows your dependencies to access the `fetch` API correctly and\n`cross-fetch` compatible with the Snaps execution environment.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["125",{"pageContent":"axios\n\n`axios` is a popular networking library that uses `XMLHttpRequest` under the hood.\n\nCurrently, there's no known way of patching `axios` to work with the Snaps execution environment.\nInstead, you must replace `axios` with another library such as `isomorphic-fetch` or\n`isomorphic-unfetch`, or simply use the Snaps execution environment global `fetch`.\n\nThe following is an example of how you can rewrite your dependency to use `fetch` instead of `axios`.\n\n:::note\nIn a production environment this may be a large task depending on the usage of `axios`.\n:::\n\n<!--tabs-->\n\n# axios\n\n```javascript\nconst instance = axios.create({\n  baseURL: 'https://api.github.com/',\n});\n\ninstance\n  .get('users/MetaMask')\n  .then((res) => {\n    if (res.status >= 400) {\n      throw new Error('Bad response from server');\n    }\n    return res.data;\n  })\n  .then((user) => {\n    console.log(user);\n  })\n  .catch((err) => {\n    console.error(err);\n  });","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["126",{"pageContent":"# fetch\n\n```javascript\nfetch('https://api.github.com/users/MetaMask')\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error('Bad response from server');\n    }\n    return res.json();\n  })\n  .then((json) => console.log(json))\n  .catch((err) => console.error(err));\n```\n\n<!--/tabs-->\n\nFor more information, see how to\n[replace axios with a simple custom fetch wrapper](https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/how-to/troubleshoot.md"}}],["127",{"pageContent":"---\ndescription: Snaps JSON-RPC API reference\n---\n\n# Snaps JSON-RPC API\n\nSnaps communicate with MetaMask using the Snaps JSON-RPC API.\nThese API methods allow snaps to modify the functionality of MetaMask, and websites (dapps) to\ninstall and communicate with individual snaps.\nSome methods are only callable by snaps, and some are only callable by websites.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["128",{"pageContent":"Unrestricted methods\n\nYou can call unrestricted methods without requesting permission to do so.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["129",{"pageContent":"wallet_getSnaps\n\nReturns the IDs of the caller's permitted snaps and some relevant metadata.\n\nThis method is only callable by websites.\n\n#### Returns\n\nAn object containing the requester's permitted snaps.\nEach snap is an object containing:\n\n- `id` - The ID of the snap.\n- `initialPermissions` - The initial permissions of the snap, which will be requested when the snap\n  is installed.\n- `version` - The version of the snap.\n- `enabled` - `true` if the snap is enabled, `false` otherwise.\n- `blocked` - `true` if the snap is blocked, `false` otherwise.\n\n#### Example\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript\nconst result = await window.ethereum.request({ method: 'wallet_getSnaps' });\n\nconsole.log(result);\n```\n\n# Result\n\n```javascript\n// Example result if any snaps are permitted\n{\n  'npm:@metamask/example-snap': {\n    version: '1.0.0',\n    id: 'npm:@metamask/example-snap',\n    enabled: true,\n    blocked: false,\n  },\n}\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["130",{"pageContent":"wallet_invokeSnap\n\nInvokes the specified JSON-RPC method of the specified snap.\nThe snap must be installed and the caller must have the permission to communicate with the snap, or\nthe request is rejected.\n\nSnaps are fully responsible for implementing their JSON-RPC API.\nConsult the snap's documentation for available methods, their parameters, and return values.\n\nThis method is only callable by websites.\n\n#### Parameters\n\nAn object containing:\n\n- `snapId` - The ID of the snap to invoke.\n- `request` - The JSON-RPC request object to send to the invoked snap.\n\n#### Returns\n\nResult of the snap method call.\n\n#### Example\n\n```javascript\nconst result = await ethereum.request({\n  method: 'wallet_invokeSnap',\n  params: {\n    snapId: 'npm:@metamask/example-snap',\n    request: {\n      method: 'hello',\n    },\n  },\n});\n\nconsole.log(result); // In this example, the result is a boolean.\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["131",{"pageContent":"wallet_requestSnaps\n\nRequests permission for a website to communicate with the specified snaps and attempts to install\nthem if they're not already installed.\nIf the installation of any snap fails, returns the error that caused the failure.\n\nYou can optionally specify a [SemVer range](https://www.npmjs.com/package/semver) for a snap.\nMetaMask attempts to install a version of the snap that satisfies the requested range.\nIf a compatible version of a snap is already installed, the request succeeds.\nIf an incompatible version is installed, MetaMask attempts to update the snap to the latest version\nthat satisfies the requested range.\nThe request succeeds if the snap is successfully updated.\n\nThis method is only callable by websites.\n\n#### Parameters\n\nAn object containing the snaps to request permission to communicate with.\n\n#### Returns\n\nAn object mapping the IDs of installed snaps to either their metadata or an error if installation fails.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["132",{"pageContent":"Parameters\n\nAn object containing the snaps to request permission to communicate with.\n\n#### Returns\n\nAn object mapping the IDs of installed snaps to either their metadata or an error if installation fails.\n\n#### Example\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript\ntry {\n  const result = await window.ethereum.request({\n    method: 'wallet_requestSnaps',\n    params: {\n      'npm:@metamask/example-snap': {},\n      'npm:fooSnap': {\n        // The optional version argument allows requesting a SemVer version\n        // range, with the same semantics as npm package.json ranges.\n        version: '^1.0.2',\n      },\n    },\n  });\n\n  console.log(result);\n\n} catch (error) {\n  console.log(error);\n}\n```\n\n# Result\n\n```javascript\n{\n  'npm:@metamask/example-snap': {\n    version: '1.0.0',\n    id: 'npm:@metamask/example-snap',\n    enabled: true,\n    blocked: false,\n  },\n  'npm:fooSnap': {\n    version: '1.0.5',\n    id: 'npm:fooSnap',\n    enabled: true,\n    blocked: false,\n  },\n}\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["133",{"pageContent":"Restricted methods\n\nFor restricted methods callable by snaps, a snap must request permission to call the method in the\n[snap manifest file](../how-to/request-permissions.md).\nFor restricted methods callable by websites, a website must request permission to call the method using\n[`wallet_requestPermissions`](../../wallet/reference/rpc-api#wallet_requestpermissions).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["134",{"pageContent":"snap_dialog\n\nDisplays a dialog in the MetaMask UI.\nThere are three types of dialogs with different parameters and return types:\n\n- [Alert](#alert-dialog)\n- [Confirmation](#confirmation-dialog)\n- [Prompt](#prompt-dialog)\n\nThis method is only callable by snaps.\n\n#### Alert dialog\n\nDisplays an alert that can only be acknowledged.\n\n##### Parameters\n\nAn object containing the contents of the alert dialog:\n\n- `type` - The type of dialog (`'Alert'`).\n- `content` - The content of the alert, as a [custom UI](../how-to/use-custom-ui.md) component.\n\n#### Example\n\n```javascript\nimport { panel, text, heading } from '@metamask/snaps-ui';\n\nawait snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Alert',\n    content: panel([\n      heading('Something happened in the system'),\n      text('The thing that happened is...'),\n    ]),\n  },\n});\n\n// Code that should execute after the alert has been acknowledged\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["135",{"pageContent":"Confirmation dialog\n\nDisplays a confirmation that can be accepted or rejected.\n\n##### Parameters\n\nAn object containing the contents of the confirmation dialog:\n\n- `type` - The type of dialog (`'Confirmation'`).\n- `content` - The content of the confirmation, as a [custom UI](../how-to/use-custom-ui.md) component.\n\n##### Returns\n\n`true` if the confirmation was accepted, `false` otherwise.\n\n#### Example\n\n```javascript\nimport { panel, text, heading } from '@metamask/snaps-ui';\n\nconst result = await snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Confirmation',\n    content: panel([\n      heading('Would you like to take the action?'),\n      text('The action is...'),\n    ]),\n  },\n});\n\nif (result === true) {\n  // Do the action\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["136",{"pageContent":"Prompt dialog\n\nDisplays a prompt where the user can enter a text response.\n\n##### Parameters\n\nAn object containing the contents of the prompt dialog:\n\n- `type` - The type of dialog (`'Prompt'`).\n- `content` - The content of the prompt, as a [custom UI](../how-to/use-custom-ui.md) component.\n- `placeholder` - Text that will be in the input field when nothing is typed.\n\n##### Returns\n\nThe text entered by the user.\n\n#### Example\n\n```javascript\nimport { panel, text, heading } from '@metamask/snaps-ui';\n\nconst walletAddress = await snap.request({\n  method: 'snap_dialog',\n  params: {\n    type: 'Prompt',\n    content: panel([\n      heading('What is the wallet address?'),\n      text('Please enter the wallet address to be monitored'),\n    ]),\n    placeholder: '0x123...',\n  },\n});\n\n// `walletAddress` will be a string containing the address entered by the user\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["137",{"pageContent":"snap_getBip32Entropy\n\n:::danger important\nIf you call this method, you receive the user's parent key for the derivation path they request.\nYou're managing the user's keys and assets on their behalf.\nTheir safety is your responsibility.\n:::\n\nGets the [SLIP-10](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) key for the `path`\nand `curve` specified by the method name.\n\nThis method is designed to be used with the\n[`@metamask/key-tree`](https://npmjs.com/package/@metamask/key-tree) module.\n`@metamask/key-tree` can help you get the\n[extended private keys](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys)\nfor user addresses, but it's your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user.\n\nThis method is only callable by snaps.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["138",{"pageContent":"Parameters\n\nAn object containing:\n\n- `path` - An array, starting with `m`, containing the BIP-32 derivation path to the key to\n  retrieve.\n  For example, `[\"m\", \"44'\", \"60'\"]`.\n- `curve` - The curve to use for the key derivation.\n  Must be `'ed25519'` or `'secp256k1'`.\n\n#### Returns\n\nAn object representing the\n[SLIP-10](https://github.com/satoshilabs/slips/blob/master/slip-0010.md) HD tree node and containing\nits corresponding key material:\n\n- `depth` - The 0-indexed path depth of the node.\n- `parentFingerprint` - The fingerprint of the parent key, or 0 if this is a master node.\n- `index` - The index of the node, or 0 if this is a master node.\n- `privateKey` - The private key of the node.\n- `publicKey` - The public key of the node.\n- `chainCode` - The chain code of the node.\n- `curve` - The name of the curve used by the node: `'ed25519'` or `'secp256k1'`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["139",{"pageContent":"Example\n\n<!--tabs-->\n\n# Manifest file\n\n```json\n{\n  \"initialPermissions\": {\n    \"snap_getBip32Entropy\": [\n      {\n        \"path\": [\"m\", \"44'\", \"3'\"],\n        \"curve\": \"secp256k1\" // Or \"ed25519\"\n      }\n    ]\n  }\n}\n```\n\n# JavaScript\n\n```javascript\nimport { SLIP10Node } from '@metamask/key-tree';\n\n// This example uses Dogecoin, which has a derivation path starting with `m/44'/3'`.\nconst dogecoinNode = await snap.request({\n  method: 'snap_getBip32Entropy',\n  params: {\n    // Must be specified exactly in the manifest\n    path: ['m', \"44'\", \"3'\"],\n    curve: 'secp256k1',\n  },\n});\n\n// Next, create an instance of a SLIP-10 node for the Dogecoin node.\nconst dogecoinSlip10Node = await SLIP10Node.fromJSON(dogecoinNode);\n\n// m / 44' / 3' / 0'\nconst accountKey0 = await dogecoinSlip10Node.derive([\"bip32:0'\"]);\n\n// m / 44' / 3' / 1'\nconst accountKey1 = await dogecoinSlip10Node.derive([\"bip32:1'\"]);\n\n// Now, you can ask the user to sign transactions, etc.\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["140",{"pageContent":"snap_getBip32PublicKey\n\nGets the [BIP-32](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki) public key for the\nderivation path specified by the `path` parameter.\nNote that this returns the public key, not the extended public key (`xpub`), or Ethereum address.\n\nThis method is only callable by snaps.\n\n#### Parameters\n\nAn object containing:\n\n- `path` - An array, starting with `m`, containing the BIP-32 derivation path to the public key to\n  retrieve.\n  For example, `[\"m\", \"44'\", \"60'\"]`.\n- `curve` - The curve to use for the key derivation.\n  Must be `'ed25519'` or `'secp256k1'`.\n- `compressed` - Indicates whether the public key should be compressed.\n  The default is `false`.\n\n#### Returns\n\nThe public key as hexadecimal string.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["141",{"pageContent":"Returns\n\nThe public key as hexadecimal string.\n\n#### Example\n\n<!--tabs-->\n\n# Manifest file\n\n```json\n{\n  \"initialPermissions\": {\n    \"snap_getBip32PublicKey\": [\n      {\n        \"path\": [\"m\", \"44'\", \"3'\", \"0'\", \"0\", \"0\"],\n        \"curve\": \"secp256k1\" // Or \"ed25519\"\n      }\n    ]\n  }\n}\n```\n\n# JavaScript\n\n```javascript\n// This example uses Dogecoin, which has a derivation path starting with `m/44'/3'`.\nconst dogecoinPublicKey = await snap.request({\n  method: 'snap_getBip32PublicKey',\n  params: {\n    // The path and curve must be specified in the initial permissions.\n    path: ['m', \"44'\", \"3'\", \"0'\", '0', '0'],\n    curve: 'secp256k1',\n    compressed: false,\n  },\n});\n\n// `0x...`\nconsole.log(dogecoinPublicKey);\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["142",{"pageContent":"snap_getBip44Entropy\n\n:::danger important\nIf you call this method, you receive the user's parent key for the protocol they request.\nYou're managing the user's keys and assets on their behalf.\nTheir safety is your responsibility.\n:::\n\nGets the [BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) `coin_type` key\nfor the `coin_type` number specified by the method name.\nSee [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md) for the list of\navailable protocols and their `coin_type` values.\n\nThis method is designed to be used with the\n[`@metamask/key-tree`](https://npmjs.com/package/@metamask/key-tree) module.\n`@metamask/key-tree` can help you get the\n[extended private keys](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#extended-keys)\nfor user addresses, but it's your responsibility to know how to use those keys to, for example,\nderive an address for the relevant protocol or sign a transaction for the user.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["143",{"pageContent":"This method is only callable by snaps.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["144",{"pageContent":"Parameters\n\nAn object containing `coinType`, the BIP-44 coin type to get the entropy for.\n\n#### Returns\n\nAn object representing the\n[BIP-44](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki) `coin_type` HD tree node\nand containing its corresponding key material:\n\n- `coin_type` - The BIP-44 [coin type](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)\n  value of the node.\n- `depth` - The 0-indexed BIP-44 path depth of the node.\n  Since this is a `coin_type` node, the depth is `2`.\n- `privateKey` - The hexadecimal-encoded string representation of the private key for the node.\n- `publicKey` - The hexadecimal-encoded string representation of the public key for the node.\n- `chainCode` - The hexadecimal-encoded string representation of the chain code for the node.\n- `path` - A human-readable representation of the BIP-44 HD tree path of the node.\n  Since this is a `coin_type` node, the path is of the form `m / 44' / coin_type'`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["145",{"pageContent":"Example\n\n<!--tabs-->\n\n# Manifest file\n\n```json\n{\n  \"initialPermissions\": {\n    \"snap_getBip44Entropy\": [\n      {\n        \"coinType\": 3\n      }\n    ]\n  }\n}\n```\n\n# JavaScript\n\n```javascript\nimport { getBIP44AddressKeyDeriver } from '@metamask/key-tree';\n\n// This example uses Dogecoin, which has `coin_type` 3.\nconst dogecoinNode = await snap.request({\n  method: 'snap_getBip44Entropy',\n  params: {\n    coinType: 3,\n  },\n});\n\n// Next, create an address key deriver function for the Dogecoin coin_type node.\n// In this case, its path is: m / 44' / 3' / 0' / 0 / address_index\nconst deriveDogecoinAddress = await getBIP44AddressKeyDeriver(dogecoinNode);\n\n// These are BIP-44 nodes containing the extended private keys for\n// the respective derivation paths.\n\n// m / 44' / 3' / 0' / 0 / 0\nconst addressKey0 = await deriveDogecoinAddress(0);\n\n// m / 44' / 3' / 0' / 0 / 1\nconst addressKey1 = await deriveDogecoinAddress(1);\n\n// Now, you can ask the user to sign transactions, etc.\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["146",{"pageContent":"snap_getEntropy\n\nGets a deterministic 256-bit entropy value, specific to the snap and the user's account.\nYou can use this entropy to generate a private key, or any other value that requires a high level of\nrandomness.\nOther snaps can't access this entropy, and it changes if the user's secret recovery phrase changes.\n\nYou can optionally specify a salt to generate different entropy for different purposes.\nUsing a salt results in entropy unrelated to the entropy generated without a salt.\n\nThis value is deterministic: it's always the same for the same snap, user account, and salt.\n\nThis method is only callable by snaps.\n\n#### Parameters\n\nAn object containing:\n\n- `version` - The number `1`.\n  This is reserved for future use.\n- `salt` (optional) - An arbitrary string to be used as a salt for the entropy.\n  This can be used to generate different entropy for different purposes.\n\n#### Returns\n\nThe entropy as a hexadecimal string.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["147",{"pageContent":"Returns\n\nThe entropy as a hexadecimal string.\n\n#### Example\n\n<!--tabs-->\n\n# Manifest file\n\n```json\n{\n  \"initialPermissions\": {\n    \"snap_getEntropy\": {}\n  }\n}\n```\n\n# JavaScript\n\n```javascript\nconst entropy = await snap.request({\n  method: 'snap_getEntropy',\n  params: {\n    version: 1,\n    salt: 'foo', // Optional\n  },\n});\n\n// `0x...`\nconsole.log(entropy);\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["148",{"pageContent":"snap_manageState\n\nAllows the snap to persist up to 100 MB of data to disk and retrieve it at will.\nThe data is automatically encrypted using a snap-specific key and automatically decrypted when retrieved.\n\nThis method is only callable by snaps.\n\n#### Parameters\n\nAn object containing:\n\n- `operation` - The state operation to perform (`'clear'`, `'get'`, or `'update'`).\n- `newState` - The value to update state with if the operation is `update`, and nothing otherwise.\n\n#### Returns\n\nThe value stored in state if the operation is `get`, and `null` otherwise.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["149",{"pageContent":"Returns\n\nThe value stored in state if the operation is `get`, and `null` otherwise.\n\n#### Example\n\n```javascript\n// Persist some data.\nawait snap.request({\n  method: 'snap_manageState',\n  params: { operation: 'update', newState: { hello: 'world' } },\n});\n\n// At a later time, get the data stored.\nconst persistedData = await snap.request({\n  method: 'snap_manageState',\n  params: { operation: 'get' },\n});\n\nconsole.log(persistedData);\n// { hello: 'world' }\n\n// If there's no need to store data anymore, clear it out.\nawait snap.request({\n  method: 'snap_manageState',\n  params: { operation: 'clear' },\n});\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["150",{"pageContent":"snap_notify\n\nDisplays a notification in MetaMask or natively in the browser.\nSnaps can trigger a short notification text for actionable or time sensitive information.\n\nThis method is only callable by snaps.\n\n#### Parameters\n\nAn object containing the contents of the notification:\n\n- `type` - The notification type.\n  Specify `inApp` to display the notification in the MetaMask UI, and `native` to display the\n  notification in the browser.\n  We recommend using `inApp` because there's no guarantee that native notifications are displayed to\n  the user.\n- `message` - A message to show in the notification.\n\n#### Example\n\n```javascript\nawait snap.request({\n  method: 'snap_notify',\n  params: {\n    type: 'inApp',\n    message: 'Hello, world!',\n  },\n});\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["151",{"pageContent":"wallet_snap\n\nA website must request the `wallet_snap` permission using\n[`wallet_requestPermissions`](../../wallet/reference/rpc-api#wallet_requestpermissions) to\ninteract with the specified snaps.\n\nA website can also call this method to invoke the specified JSON-RPC method of the specified snap.\n\nThis method is synonymous to [`wallet_invokeSnap`](#wallet_invokesnap), and is only callable by websites.\n\n:::note\nMost websites only make one call to `wallet_requestPermissions`.\nConsecutive calls to `wallet_requestPermissions` for the `wallet_snap` permission overwrites a\nwebsite's existing permissions to interact with snaps.\nTo deal with this, you must write custom logic to merge existing snap IDs with new ones you're requesting.\nUse [`wallet_getSnaps`](#wallet_getsnaps) to get a list of a website's permitted snaps.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["152",{"pageContent":"Parameters\n\nWhen requesting this permission, specify a caveat of type `snapIds`.\nSpecify each snap to request permission to interact with as an entry in the `value` field of the caveat.\nEach snap entry can include a `version` to install.\nThe default is the latest version.\n\nWhen calling this method, specify an object containing:\n\n- `snapId` - The ID of the snap to invoke.\n- `request` - The JSON-RPC request object to send to the invoked snap.\n\n#### Returns\n\nResult of the snap method call.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["153",{"pageContent":"Returns\n\nResult of the snap method call.\n\n#### Example\n\n<!--tabs-->\n\n# wallet_requestPermissions\n\nThe following is an example of calling `wallet_requestPermissions` to request the `wallet_snap`\npermission:\n\n```javascript\nconst result = await ethereum.request({\n  method: 'wallet_requestPermissions',\n  params: [{\n    wallet_snap: {\n      caveats: [\n        {\n          type: 'snapIds',\n          value: {\n            'npm:@metamask/example-snap': { version: '1.0.0' },\n            'npm:@metamask/foo-bar-snap': { version: '1.2.1' },\n          }\n        }\n      ]\n    }\n  }],\n});\n```\n\n# wallet_snap\n\nThe following is an example of calling `wallet_snap`:\n\n```javascript\nconst result = await ethereum.request({\n  method: 'wallet_snap',\n  params: {\n    snapId: 'npm:@metamask/example-snap',\n    request: {\n      method: 'hello',\n    },\n  },\n});\n\nconsole.log(result); // In this example, the result is a boolean.\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/snaps/reference/rpc-api.md"}}],["154",{"pageContent":"---\ndescription: Learn about convenience libraries.\n---\n\n# Convenience libraries\n\nVarious convenience libraries exist for dapp developers.\nSome of them simplify the creation of specific user interface elements, some entirely manage the\nuser account onboarding, and others give you a variety of methods for interacting with smart\ncontracts, for a variety of API preferences (for example, promises, callbacks, and strong types).\n\nThe [MetaMask Ethereum provider API](../reference/provider-api.md) is very simple, and wraps\n[Ethereum JSON-RPC](https://eth.wiki/json-rpc/API#json-rpc-methods) formatted messages, which is why\nsome developers use a convenience library for interacting with the provider, such as\n[Ethers](https://www.npmjs.com/package/ethers), [web3.js](https://www.npmjs.com/package/web3),\n[Truffle](https://www.trufflesuite.com/), and [Embark](https://framework.embarklabs.io/).\nYou can refer to those tools' documentation to interact with the provider.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/convenience-libraries.md"}}],["155",{"pageContent":"The provider API is all you need to create a full-featured web3 application, but if you need\nhigher-level abstractions than those provided by the API, we recommend using a convenience library.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/convenience-libraries.md"}}],["156",{"pageContent":"---\ndescription: Detect a user's network and network changes.\n---\n\n# Detect a user's network\n\nIt's important to keep track of the user's network chain ID because all RPC requests are submitted\nto the currently connected network.\n\nUse the [`eth_chainId`](https://metamask.github.io/api-playground/api-documentation/#eth_chainId)\nRPC method to detect the chain ID of the user's current network.\nListen to the [`chainChanged`](../reference/provider-api.md#chainchanged) provider event to\ndetect when the user changes networks.\n\nIn the [example project script](set-up-dev-environment.md#example), the following code detects a\nuser's network and when the user changes networks:\n\n```javascript title=\"index.js\"\nconst chainId = await window.ethereum.request({ method: 'eth_chainId' });\n\nwindow.ethereum.on('chainChanged', handleChainChanged);\n\nfunction handleChainChanged(chainId) {\n  // We recommend reloading the page, unless you must do otherwise.\n  window.location.reload();\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/detect-network.md"}}],["157",{"pageContent":"Chain IDs\n\nThese are the chain IDs of the Ethereum networks that MetaMask supports by default.\nConsult [chainid.network](https://chainid.network) for more.\n\n| Hex      | Decimal  | Network                                                                   |\n|----------|----------|---------------------------------------------------------------------------|\n| 0x1      | 1        | Ethereum main network (Mainnet)                                           |\n| 0x5      | 5        | Goerli test network                                                       |\n| 0xaa36a7 | 11155111 | Sepolia test network                                                      |\n| 0xe704   | 59140    | [Linea Goerli test network](https://docs.linea.build/)                    |\n| 0x539    | 1337     | Localhost test networks (including [Ganache](run-development-network.md)) |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/detect-network.md"}}],["158",{"pageContent":"---\ndescription: Access a user's MetaMask provider using metamask-extension-provider.\n---\n\n# Access a user's MetaMask provider\n\nUse the [`@metamask/providers`](https://github.com/MetaMask/providers) module to access a user's\nMetaMask provider from other sources, such as external extension providers and inpage providers.\n\nThe account provided by this provider is the user's MetaMask account.\nWhen sending signing requests to this provider, MetaMask prompts the user to sign with their accounts.\n\nThis module works in Chrome and Firefox.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/access-provider.md"}}],["159",{"pageContent":"Use @metamask/providers\n\nInstall `@metamask/providers` using the following command:\n\n```bash\nnpm install @metamask/providers\n```\n\nInitialize the provider using the following code:\n\n```javascript\nimport { initializeProvider } from '@metamask/providers';\n\n// Create a stream to a remote provider\nconst metamaskStream = new LocalMessageDuplexStream({\n  name: 'inpage',\n  target: 'contentscript',\n});\n\n// Initialize the provider and set it as window.ethereum\ninitializeProvider({\n  connectionStream: metamaskStream,\n});\n```\n\nCreate an external extension provider using the following code:\n\n```javascript\nimport { createExternalExtensionProvider } from '@metamask/providers';\n\nlet provider = createExternalExtensionProvider();\nconst accounts = await provider.request({ method: 'eth_requestAccounts' });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/access-provider.md"}}],["160",{"pageContent":"---\ndescription: Enable your dapp to interact with smart contracts.\n---\n\n# Interact with smart contracts\n\nTo interact with a smart contract, your dapp needs the contract's:\n\n- [Network](#contract-network).\n- [Address](#contract-address).\n- [ABI](#contract-abi).\n- [Bytecode](#contract-bytecode).\n- [Source code](#contract-source-code).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/interact-with-smart-contracts.md"}}],["161",{"pageContent":"Contract network\n\nIf you're not connected to the right network, you can't send transactions to your contract.\nMany dapp developers deploy their contract to a testnet first, in order to avoid potentially\ndisastrous fees if something goes wrong during development and testing on Mainnet.\n\nRegardless of which network you deploy your final dapp on, your users must be able to access it.\nUse the [`wallet_switchEthereumChain`](../reference/rpc-api.md#wallet_switchethereumchain) and\n[`wallet_addEthereumChain`](../reference/rpc-api.md#wallet_addethereumchain) RPC methods to prompt\nthe user to add a chain that you suggest, and switch to it using a confirmation dialogue.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/interact-with-smart-contracts.md"}}],["162",{"pageContent":"Contract address\n\nEvery account in Ethereum has an address, whether it's an external key-pair account or a smart contract.\nFor any smart contract library to communicate with your contracts, a smart contract  must know the exact address.\n\nRead about\n[how to find a token contact address](https://metamask.zendesk.com/hc/en-us/articles/360059683451-How-to-view-or-add-custom-token-contract-address).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/interact-with-smart-contracts.md"}}],["163",{"pageContent":"Contract ABI\n\nIn Ethereum, the [ABI specification](https://solidity.readthedocs.io/en/develop/abi-spec.html) is a\nway to encode the interface of a smart contract that's comprehensible to your user interface.\nThe ABI is an array of method-describing objects, and when you feed this and the address into a\ncontract-abstraction library, the ABI tells those libraries about what methods to provide, and\nhow to compose transactions to call those methods.\n\nExample libraries include:\n\n- [Ethers](https://www.npmjs.com/package/ethers).\n- [web3.js](https://www.npmjs.com/package/web3).\n- [Embark](https://framework.embarklabs.io/).\n- [ethjs](https://www.npmjs.com/package/ethjs).\n- [Truffle](https://www.trufflesuite.com/).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/interact-with-smart-contracts.md"}}],["164",{"pageContent":"Contract bytecode\n\nIf your dapp publishes a new pre-compiled smart contract, it might need to include some bytecode.\nYou don't know the contract address in advance; you must publish the contract, watch for the\ntransaction to be processed, and then extract the final contract's address from the completed transaction.\n\nIf you publish a contract from bytecode, you still need an [ABI](#contract-abi) to interact with it.\nThe bytecode doesn't describe how to interact with the final contract.\n\n## Contract source code\n\nIf your dapp allows users to edit smart contract source code and compile it, similar to\n[Remix](http://remix.ethereum.org/), you can import a whole compiler.\nYou derive your bytecode and ABI from that source code, and eventually derive the contract's address\nfrom the completed transaction, where that bytecode is published.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/interact-with-smart-contracts.md"}}],["165",{"pageContent":"---\ndescription: Register a contract's method names on the Ethereum Signature Database.\n---\n\n# Register a contract's method names\n\nMetaMask uses the [Ethereum Signature Database](https://www.4byte.directory/) to display\nmethod names on the confirmation screen.\nFor many common method names, such as token methods, this allows MetaMask to look up the method\nnames by their [method signature](https://solidity.readthedocs.io/en/v0.4.21/abi-spec.html).\nHowever, sometimes you're using a method that isn't in that database, and MetaMask simply\ndisplays **Contract Interaction** to the user.\n\nTo register your contract's method names so they show in the MetaMask interface,\n[submit each method's signature to the Ethereum Signature Database](https://www.4byte.directory/submit/).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/register-method-names.md"}}],["166",{"pageContent":"---\ndescription: Set an icon on MetaMask for your dapp.\n---\n\n# Set an icon\n\nWhen your dapp makes a login request to a MetaMask user, MetaMask may render a modal that displays\nyour dapp icon.\n\nMetaMask retrieves this icon using the HTML selector `<head> link[rel=\"shortcut icon\"]`, so you can\nfollow the [favicon standard](https://en.wikipedia.org/wiki/Favicon) to customize your dapp icon.\nMake sure to have a `link` tag within your dapp's `head` with `rel = \"shortcut icon\"`, as in the\nfollowing example.\nThe tag's `href` attribute is used for assigning the dapp icon.\n\n```html\n<head>\n  <link rel=\"shortcut icon\" href=\"https://your-dapp.com/your-icon.png\" />\n</head>\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/set-icon.md"}}],["167",{"pageContent":"# Use MetaMask SDK with gaming dapps\n\nYou can import MetaMask SDK into your gaming dapp to enable your users to easily connect with their\nMetaMask Mobile wallet.\nSee the instructions for the following gaming platforms:\n\n- [Unity](unity.md)\n- [Unreal Engine](unreal-engine.md) (coming soon)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/index.md"}}],["168",{"pageContent":"---\ntitle: Unreal Engine (coming soon)\n---\n\n# Use MetaMask SDK with Unreal Engine\n\nMetaMask SDK support for Unreal Engine games is coming soon.\nThe SDK currently supports [Unity](unity.md) gaming dapps,\n[JavaScript-based](../javascript/index.md) dapps, and [mobile](../mobile/index.md) dapps.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unreal-engine.md"}}],["169",{"pageContent":"---\ntitle: Electron\n---\n\n# Use MetaMask SDK with Electron\n\nYou can import MetaMask SDK into your Electron dapp to enable your users to easily connect with\ntheir MetaMask Mobile wallet.\n\nOn the frontend, see the instructions to use the SDK with [React](react.md).\nOn the backend, see the instructions to use the SDK with [Node.js](nodejs.md).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/electron.md"}}],["170",{"pageContent":"---\ntitle: Node.js\n---\n\n# Use MetaMask SDK with Node.js\n\nYou can import MetaMask SDK into your Node.js dapp to enable your users to easily connect with their\nMetaMask Mobile wallet.\nThe SDK for Node.js has the [same prerequisites](index.md#prerequisites) as for standard JavaScript.\n\n## How it works\n\nWhen a user accesses your Node.js dapp, the SDK renders a QR code on the console to scan\nwith their MetaMask Mobile app.\n\n<p align=\"center\">\n\n![SDK Node.js example](../../../assets/sdk-nodejs.gif)\n\n</p>\n\nYou can download the\n[Node.js example](https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/downloads/nodejs_v0.0.1_beta5.zip).\nInstall the example using `yarn` and run it using `node .`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/nodejs.md"}}],["171",{"pageContent":"Steps\n\n### 1. Install the SDK\n\nIn your project directory, install the SDK using Yarn or npm:\n\n```bash\nyarn add @metamask/sdk\nor\nnpm i @metamask/sdk\n```\n\n### 2. Import the SDK\n\nIn your project script, add the following to import the SDK:\n\n```javascript\nimport MetaMaskSDK from '@metamask/sdk';\n```\n\n### 3. Instantiate the SDK\n\nInstantiate the SDK using any [options](../../../reference/sdk-js-options.md):\n\n```javascript\nconst MMSDK = new MetaMaskSDK(options);\n\nconst ethereum = MMSDK.getProvider(); // You can also access via window.ethereum\n```\n\n### 4. Use the SDK\n\nUse the SDK by calling any [provider API methods](../../../reference/provider-api.md).\nAlways call [`eth_requestAccounts`](../../../reference/rpc-api.md#eth_requestaccounts) using\n[`ethereum.request()`](../../../reference/provider-api.md#ethereumrequestargs) first, since it\nprompts the installation or connection popup to appear.\n\n```javascript\nethereum.request({ method: 'eth_requestAccounts', params: [] });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/nodejs.md"}}],["172",{"pageContent":"---\ntitle: Other web frameworks\n---\n\n# Use MetaMask SDK with other web frameworks\n\nYou can import MetaMask SDK into your web dapp to enable your users to easily connect with their\nMetaMask Mobile wallet.\nThe SDK for other web frameworks [works the same way](index.md#how-it-works) and has the\n[same prerequisites](index.md#prerequisites) as for standard JavaScript.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/other-web-frameworks.md"}}],["173",{"pageContent":"Steps\n\n### 1. Install the SDK\n\nIn your project directory, install the SDK using Yarn or npm:\n\n```bash\nyarn add @metamask/sdk\nor\nnpm i @metamask/sdk\n```\n\n### 2. Import the SDK\n\nIn your project script, add the following to import the SDK:\n\n```javascript\nimport MetaMaskSDK from '@metamask/sdk';\n```\n\n### 3. Instantiate the SDK\n\nInstantiate the SDK using any [options](../../../reference/sdk-js-options.md):\n\n```javascript\nconst MMSDK = new MetaMaskSDK(options);\n\nconst ethereum = MMSDK.getProvider(); // You can also access via window.ethereum\n```\n\n### 4. Use the SDK\n\nUse the SDK by calling any [provider API methods](../../../reference/provider-api.md).\nAlways call [`eth_requestAccounts`](../../../reference/rpc-api.md#eth_requestaccounts) using\n[`ethereum.request()`](../../../reference/provider-api.md#ethereumrequestargs) first, since it\nprompts the installation or connection popup to appear.\n\n```javascript\nethereum.request({ method: 'eth_requestAccounts', params: [] });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/other-web-frameworks.md"}}],["174",{"pageContent":"---\ntitle: Pure JavaScript\n---\n\n# Use MetaMask SDK with pure JavaScript\n\nYou can import MetaMask SDK into your pure JavaScript dapp to enable your users to easily connect\nwith a MetaMask wallet client.\nThe SDK for pure JavaScript [works the same way](index.md#how-it-works) and has the\n[same prerequisites](index.md#prerequisites) as for standard JavaScript.\n\nTo import, instantiate, and use the SDK, you can insert a script in the head section of your website:\n\n```javascript\n<head>\n...\n\n<script src=\"https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/cdn/metamask-sdk.js\"></script>\n\n<script>\n\n    const MMSDK = new MetaMaskSDK()\n\n    const ethereum = MMSDK.getProvider() // You can also access via window.ethereum\n\n    ethereum.request({method: 'eth_requestAccounts'})\n\n</script>\n\n...\n</head>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/pure-js.md"}}],["175",{"pageContent":"You can configure the SDK using any [options](../../../reference/sdk-js-options.md) and call any\n[provider API methods](../../../reference/provider-api.md).\nAlways call [`eth_requestAccounts`](../../../reference/rpc-api.md#eth_requestaccounts) using\n[`ethereum.request(args)`](../../../reference/provider-api.md#windowethereumrequestargs) first,\nsince it prompts the installation or connection popup to appear.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/pure-js.md"}}],["176",{"pageContent":"---\ntitle: React\n---\n\n# Use MetaMask SDK with React\n\nYou can import MetaMask SDK into your React dapp to enable your users to easily connect with their\nMetaMask Mobile wallet.\nThe SDK for React [works the same way](index.md#how-it-works) and has the\n[same prerequisites](index.md#prerequisites) as for standard JavaScript.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react.md"}}],["177",{"pageContent":"Steps\n\n### 1. Install the SDK\n\nIn your project directory, install the SDK using Yarn or npm:\n\n```bash\nyarn add @metamask/sdk\nor\nnpm i @metamask/sdk\n```\n\n### 2. Import the SDK\n\nIn your project script, add the following to import the SDK:\n\n```javascript\nimport MetaMaskSDK from '@metamask/sdk';\n```\n\n### 3. Instantiate the SDK\n\nInstantiate the SDK using any [options](../../../reference/sdk-js-options.md):\n\n```javascript\nconst MMSDK = new MetaMaskSDK(options);\n\nconst ethereum = MMSDK.getProvider(); // You can also access via window.ethereum\n```\n\n### 4. Use the SDK\n\nUse the SDK by calling any [provider API methods](../../../reference/provider-api.md).\nAlways call [`eth_requestAccounts`](../../../reference/rpc-api.md#eth_requestaccounts) using\n[`ethereum.request()`](../../../reference/provider-api.md#ethereumrequestargs) first, since it\nprompts the installation or connection popup to appear.\n\n```javascript\nethereum.request({ method: 'eth_requestAccounts', params: [] });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react.md"}}],["178",{"pageContent":"---\ntitle: Native Android (coming soon)\n---\n\n# Use MetaMask SDK with Android\n\nMetaMask SDK support for native Android dapps is coming soon.\nThe SDK currently supports [React Native](../javascript/react-native.md) and [native iOS](ios.md)\nmobile dapps, [JavaScript-based](../javascript/index.md) dapps, and [Unity](../gaming/unity.md)\ngaming dapps.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/android.md"}}],["179",{"pageContent":"# Use MetaMask SDK with mobile dapps\n\nYou can import MetaMask SDK into your mobile dapp to enable your users to easily connect with their\nMetaMask Mobile wallet.\nSee the instructions for the following mobile platforms:\n\n- [React Native](../javascript/react-native.md)\n- [Native iOS](ios.md)\n- [Native Android](android.md) (coming soon)\n\n## How it works\n\nWhen a user accesses your mobile dapp, the SDK automatically deeplinks to MetaMask Mobile (or if the\nuser doesn't already have it, prompts them to install it).\nAfter the user accepts the connection, they're automatically redirected back to your dapp.\nThis happens for all actions that need user approval.\n\n<p align=\"center\">\n\n![SDK mobile browser example](../../../assets/sdk-mobile-browser.gif)\n\n</p>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/index.md"}}],["180",{"pageContent":"---\ntitle: Introduction\n---\n\n# Integrate with the MetaMask wallet\n\nIntegrate your dapp with the MetaMask wallet using the\n[MetaMask Ethereum provider API](reference/provider-api.md), which enables your dapp to interact\nwith its users' Ethereum accounts.\nWe recommend using [MetaMask SDK](how-to/use-sdk) to easily enable your users to connect to their\nMetaMask wallet client from any platform.\n\nGet started by [setting up your development environment](get-started/set-up-dev-environment.md).\n\n:::note\n- This documentation assumes intermediate knowledge of JavaScript, HTML, and CSS.\n- To learn how to extend the functionality of MetaMask, visit the\n  [MetaMask Snaps developer documentation](../snaps).\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/index.md"}}],["181",{"pageContent":"What is the MetaMask Ethereum provider API?\n\nThe [MetaMask Ethereum provider API](reference/provider-api.md) is a JavaScript API that MetaMask\ninjects into websites visited by MetaMask users.\nYour dapp can use this API to request users' Ethereum accounts, read data from blockchains the user\nis connected to, and suggest that the user sign messages and transactions.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/index.md"}}],["182",{"pageContent":"What is MetaMask SDK?\n\n[MetaMask SDK](how-to/use-sdk/index.md) is a library that provides a reliable, secure, and seamless\n[connection](concepts/sdk-connections.md) from your dapp to the MetaMask browser extension and\nMetaMask Mobile.\nYou can install the SDK into your dapp to enable your users to easily connect to a MetaMask wallet\nclient from multiple platforms (web, desktop, and mobile).\n\nFor example, for dapps running on a desktop browser, MetaMask SDK checks if the MetaMask extension\nis installed.\nIf MetaMask isn't installed, the SDK prompts the user to install it or connect to their MetaMask\nMobile wallet using a QR code.\nFor dapps running on a mobile browser, MetaMask SDK automatically deeplinks to the user's MetaMask\nMobile wallet to make the connection.\n\n## Questions?\n\nIf you have questions about integrating your dapp with MetaMask, you can interact with the MetaMask\nteam and community on the MetaMask channels on [ConsenSys Discord](https://discord.gg/consensys).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/index.md"}}],["183",{"pageContent":"---\ntitle: Signing methods\ndescription: A brief history of the signing RPC methods.\n---\n\n# History of the signing methods\n\nThis page describes a brief history of the signing RPC methods in MetaMask.\nLearn how to [use the recommended signing methods](../how-to/sign-data.md).\n\n### eth_sign\n\n`eth_sign` is MetaMask's original signing method.\nIt allows signing an arbitrary hash, which means it can be used to sign transactions, or any other\ndata, making it a dangerous phishing risk.\n\n:::caution important\n`eth_sign` is deprecated.\nMetaMask disables this method by default and doesn't recommend using this method in production.\nHowever, some applications (usually internal administrator panels) use this method for its ease of\nuse, or because of an inability to change the associated dapp.\nIf a wallet user must interact with a dapp that still uses `eth_sign` and accepts the risks,\nthey can still re-enable it through advanced settings.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/signing-methods.md"}}],["184",{"pageContent":"personal_sign\n\n[`personal_sign`](https://metamask.github.io/api-playground/api-documentation/#personal_sign) is\nthe next implemented signing method, which adds a prefix to the signed data so it can't impersonate\ntransactions.\nThis method also displays human-readable text when UTF-8 encoded, making it a popular choice for\nsite logins.\n\nThe text prefix of `personal_sign` makes signatures expensive to verify on-chain.\nIf you don't need signatures to be efficiently processed on-chain, you can\n[use this method](../how-to/sign-data.md#use-personalsign).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/signing-methods.md"}}],["185",{"pageContent":"eth_signTypedData\n\n[EIP-712](https://eips.ethereum.org/EIPS/eip-712) introduced `eth_signTypedData`, which is:\n\n- Cheap to verify on chain.\n- Human-readable.\n- Protected against phishing signatures.\n\nIf on-chain verifiability cost is a high priority for you, we recommend\n[using this method](../how-to/sign-data.md#use-ethsigntypeddatav4).\n\nThe EIP-712 specification changed several times while retaining the same EIP, meaning that MetaMask\noriginally implemented `eth_signTypedData` as the earliest proposed version, then implemented later\nversions with hard-versioned method names:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/signing-methods.md"}}],["186",{"pageContent":"- `eth_signTypedData_v1` – The same as `eth_signTypedData`.\n  Read the\n  [introductory blog post to this method](https://medium.com/metamask/scaling-web3-with-signtypeddata-91d6efc8b290).\n- `eth_signTypedData_v3` – A highly used version of the EIP-712 specification.\n  Read the\n  [introductory blog post to this method](https://medium.com/metamask/eip712-is-coming-what-to-expect-and-how-to-use-it-bb92fd1a7a26).\n- [`eth_signTypedData_v4`](https://metamask.github.io/api-playground/api-documentation/#eth_signTypedData_v4)\n  – The latest version of the EIP-712 specification, with added support for arrays and a breaking\n  fix for the way structs are encoded.\n  Read the\n  [introductory blog post to this method](https://medium.com/metamask/eip712-is-coming-what-to-expect-and-how-to-use-it-bb92fd1a7a26).\n\n:::caution important\nAll early versions of this method lack later security improvements.\nWe recommend using the latest version, `eth_signTypedData_v4`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/signing-methods.md"}}],["187",{"pageContent":":::caution important\nAll early versions of this method lack later security improvements.\nWe recommend using the latest version, `eth_signTypedData_v4`.\n:::\n\nTo avoid compatibility issues between clients, we recommend using the hard-versioned method names.\nThe missing `v2` represents an intermediary design that the Cipher browser implemented –\nMetaMask has room to implement it if there's enough developer demand for it.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/signing-methods.md"}}],["188",{"pageContent":"---\ndescription: Configure and connect a Ganache development network.\n---\n\n# Run a development network\n\nYou can run a personal Ethereum development network using [Ganache](https://www.trufflesuite.com/ganache),\nwhich allows you to develop a dapp in a secure test environment.\n\n:::note\nWhen using a local development blockchain such as Ganache or\n[anvil](https://book.getfoundry.sh/anvil/#overview-of-anvil), your node must calculate gas to make\ntransactions on MetaMask.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/run-development-network.md"}}],["189",{"pageContent":"Connect to Ganache\n\nFollow the [Ganache quickstart](https://trufflesuite.com/docs/ganache/quickstart/) to set\nup a development network.\n\nWhen you create a Ganache workspace, enter your MetaMask seed phrase into\nthe **Account & Keys** setting.\nGanache automatically gives each of your first 10 accounts 100 test ether (you can configure\nthese numbers in **Accounts & Keys**), which makes it easy to start development.\n\n:::caution important\nYour seed phrase controls all your accounts, so we recommend keeping at least one seed phrase for\ndevelopment, separate from any used to store real value.\nYou can manage multiple seed phrases by using multiple browser profiles, each with its own\nMetaMask installation.\n:::\n\nIn the **Server** setting of your workspace, find the hostname and port of your Ganache\nnetwork, which comprises the RPC URL of your network:\n\n```text\nhttp://<hostname>:<port>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/run-development-network.md"}}],["190",{"pageContent":"In the MetaMask extension, connect to your Ganache network:\n\n1. Select the network you're currently connected to.\n1. Select **Add network**.\n1. Select **Add a network manually**.\n1. Enter the RPC URL of your network.\n1. Enter MetaMask's default [chain ID](detect-network.md#chain-ids) for Ganache, `1337`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/run-development-network.md"}}],["191",{"pageContent":"Reset your local nonce calculation\n\nIf you restart your development network, you can accidentally confuse MetaMask\nbecause it calculates the next [nonce](../how-to/send-transactions.md#nonce) based on both the\nnetwork state *and* the known sent transactions.\n\nTo clear MetaMask's transaction queue and reset its nonce calculation, go to **Settings > Advanced**\nand select **Reset account**.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/run-development-network.md"}}],["192",{"pageContent":"---\ndescription: Register a token with users using wallet_watchAsset.\n---\n\n# Register a token with users\n\nWhen a user opens MetaMask, they're shown a variety of assets, including tokens.\nBy default, MetaMask detects some major popular tokens and displays them, but for most tokens, the\nuser must register the token themselves.\nThis process can be cumbersome, involves the user interacting with contract addresses, and is error-prone.\n\nYou can improve the security and experience of users registering your token on their MetaMask\ninterface by using the [`wallet_watchAsset`](../reference/rpc-api.md#wallet_watchasset) RPC method.\n\nFor example, you can add something like the following to your project script:\n\n```javascript\nconst tokenAddress = '0xd00981105e61274c8a5cd5a88fe7e037d935b513';\nconst tokenSymbol = 'TUT';\nconst tokenDecimals = 18;\nconst tokenImage = 'http://placekitten.com/200/300';","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/register-token.md"}}],["193",{"pageContent":"```javascript\nconst tokenAddress = '0xd00981105e61274c8a5cd5a88fe7e037d935b513';\nconst tokenSymbol = 'TUT';\nconst tokenDecimals = 18;\nconst tokenImage = 'http://placekitten.com/200/300';\n\ntry {\n  // wasAdded is a boolean. Like any RPC method, an error can be thrown.\n  const wasAdded = await ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20', // Initially only supports ERC-20 tokens, but eventually more!\n      options: {\n        address: tokenAddress, // The address of the token.\n        symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 characters.\n        decimals: tokenDecimals, // The number of decimals in the token.\n        image: tokenImage, // A string URL of the token logo.\n      },\n    },\n  });\n\n  if (wasAdded) {\n    console.log('Thanks for your interest!');\n  } else {\n    console.log('Your loss!');\n  }\n} catch (error) {\n  console.log(error);\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/register-token.md"}}],["194",{"pageContent":"For more examples, the following are live web dapps that let you enter your token details and share\nthem using a simple web link:\n\n- [WatchToken](https://vittominacori.github.io/watch-token/create/)\n- [Add Token dapp](https://metamask.github.io/Add-Token/#edit)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/register-token.md"}}],["195",{"pageContent":"---\ndescription: Secure your dapp using HTTPS and CSP.\n---\n\n# Secure your dapp\n\nWe recommend implementing security controls, such as [HTTPS](#use-https) and\n[Content Security Policy (CSP)](#use-content-security-policy), to improve the security of your dapp\nand protect your users.\n\n:::caution\nThe following security advice isn't exhaustive.\n:::\n\n## Use HTTPS\n\nHTTPS can protect your dapp against attackers who might try to eavesdrop or tamper the communication\nchannel between your dapp and your users.\nHTTPS encrypts data transmitted between the web server and the user's browser, making it\ndifficult for attackers to intercept or modify the data.\n\nTo secure your dapp using HTTPS, obtain an SSL/TLS certificate from a trusted certificate authority (CA).\nFor example, [Let's Encrypt](https://letsencrypt.org/) offers free SSL/TLS certificates.\n\nInstall the certificate it on your web server.\nIf you're using a static website hosting service, it might have a default way to enable HTTPS on\nyour dapp.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/secure-dapp.md"}}],["196",{"pageContent":"Use Content Security Policy\n\nContent Security Policy (CSP) is a security feature that can protect your dapp against various\ntypes of attacks, such as [cross-site scripting (XSS)](https://owasp.org/www-community/attacks/xss/)\nand [clickjacking](https://owasp.org/www-community/attacks/Clickjacking).\n\nCSP defines a set of policies that the browser must follow when displaying the dapp.\nSee the full list of CSP directives that you can enable for your dapp in the\n[MDN CSP reference documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/secure-dapp.md"}}],["197",{"pageContent":"Use CSP with a server setup\n\nIf you dapp uses a server setup, enable CSP by setting the `Content-Security-Policy` header in all\nresponses from your server.\nFor example, in Express.js, add the following middleware at the top of your server:\n\n```js\napp.use((req, res, next) => {\n  res.setHeader(\n    'Content-Security-Policy',\n    \"default-src 'self'; frame-ancestors 'none'\"\n  );\n  next();\n});\n```\n\nIn a header, this looks like the following:\n\n```\nContent-Security-Policy: default-src 'self'; frame-ancestors 'none'\n```\n\nSee [more examples](https://content-security-policy.com/examples/) of CSP in popular web frameworks\nand languages.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/secure-dapp.md"}}],["198",{"pageContent":"Use CSP with a static site\n\nIf your dapp uses a third party hosting provider, and you can't set a custom\n`Content-Security-Policy` header in the server responses, you can enable CSP by using the\n[`<meta>` HTML tag](https://content-security-policy.com/examples/meta/).\n\nAdd this tag to the `head` section of an HTML file to instruct the browser on which CSP directives\nshould be followed.\nFor example:\n\n```html\n<head>\n  <meta\n    http-equiv=\"Content-Security-Policy\"\n    content=\"default-src 'self'; frame-ancestors 'none'\"\n  />\n</head>\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/secure-dapp.md"}}],["199",{"pageContent":"Configure your CSP\n\nCSP configuration is specific to each dapp.\nWe recommend starting with the following secure and restrictive CSP:\n\n```\ndefault-src 'self'; frame-ancestors 'none'\n```\n\n- `default-src 'self'` - By default, your dapp's code can't load or connect to content from outside\n  your domain.\n- `frame-ancestors 'none'` - Your dapp can't be embedded within the webpage of another domain (to\n  prevent [clickjacking attacks](https://owasp.org/www-community/attacks/Clickjacking)).\n\nFrom here, you can make adjustments as needed by your dapp to support the content you want to load.\nFor example, if your dapp loads images hosted on [OpenSea](https://opensea.io/), you can enable this\nby adding `img-src 'opensea.io'` to your CSP:\n\n```\ndefault-src: 'self'; frame-ancestors 'none'; img-src: 'opensea.io'\n```\n\nFor more information and common use cases for CSP, see the\n[MDN CSP documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/secure-dapp.md"}}],["200",{"pageContent":"# Use MetaMask SDK with JavaScript\n\nYou can import MetaMask SDK into your JavaScript dapp to enable your users to easily connect\nwith a MetaMask wallet client.\nThe following instructions work for web dapps based on standard JavaScript.\nYou can also see instructions for the following JavaScript-based platforms:\n\n- [React](react.md)\n- [Pure JavaScript](pure-js.md)\n- [Other web frameworks](other-web-frameworks.md)\n- [React Native](react-native.md)\n- [Node.js](nodejs.md)\n- [Electron](electron.md)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/index.md"}}],["201",{"pageContent":"How it works\n\n<!--tabs-->\n\n# Desktop browser\n\nWhen a user accesses your JavaScript web dapp on a desktop browser and doesn't have the MetaMask\nextension installed, a popup appears that prompts the user to either install the MetaMask extension or connect\nto MetaMask Mobile using a QR code.\n\n![SDK desktop browser example](../../../assets/sdk-desktop-browser.gif)\n\n# Mobile browser\n\nWhen a user accesses your JavaScript web dapp on a mobile browser, the SDK automatically deeplinks\nto MetaMask Mobile (or if the user doesn't already have it, prompts them to install it).\nOnce the user accepts the connection, they're automatically redirected back to your dapp.\nThis happens for all actions that need user approval.\n\n<p align=\"center\">\n\n![SDK mobile browser example](../../../assets/sdk-mobile-browser.gif)\n\n</p>\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/index.md"}}],["202",{"pageContent":"<p align=\"center\">\n\n![SDK mobile browser example](../../../assets/sdk-mobile-browser.gif)\n\n</p>\n\n<!--/tabs-->\n\nYou can try the\n[hosted test dapp with the SDK installed](https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/test-dapp-2/).\nYou can also download the\n[React project example](https://github.com/MetaMask/examples/tree/main/metamask-with/metamask-sdk-create-react-app).\nInstall the example using `yarn` and run it using `yarn start`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/index.md"}}],["203",{"pageContent":"Prerequisites\n\n- An existing or [new project](../../../get-started/set-up-dev-environment.md) set up.\n- [MetaMask Mobile](https://github.com/MetaMask/metamask-mobile) v5.8.1 or above.\n- [Yarn](https://yarnpkg.com/getting-started/install) or\n  [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/index.md"}}],["204",{"pageContent":"Steps\n\n### 1. Install the SDK\n\nIn your project directory, install the SDK using Yarn or npm:\n\n```bash\nyarn add @metamask/sdk\nor\nnpm i @metamask/sdk\n```\n\n### 2. Import the SDK\n\nIn your project script, add the following to import the SDK:\n\n```javascript\nimport MetaMaskSDK from '@metamask/sdk';\n```\n\n### 3. Instantiate the SDK\n\nInstantiate the SDK using any [options](../../../reference/sdk-js-options.md):\n\n```javascript\nconst MMSDK = new MetaMaskSDK(options);\n\nconst ethereum = MMSDK.getProvider(); // You can also access via window.ethereum\n```\n\n### 4. Use the SDK\n\nUse the SDK by calling any [provider API methods](../../../reference/provider-api.md).\nAlways call [`eth_requestAccounts`](../../../reference/rpc-api.md#eth_requestaccounts) using\n[`ethereum.request()`](../../../reference/provider-api.md#ethereumrequestargs) first, since it\nprompts the installation or connection popup to appear.\n\n```javascript\nethereum.request({ method: 'eth_requestAccounts', params: [] });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/index.md"}}],["205",{"pageContent":"---\ndescription: Learn about MetaMask SDK connections.\n---\n\n# MetaMask SDK connections\n\nYou can [use MetaMask SDK](../how-to/use-sdk/index.md) to enable users to easily connect from your\ndapp to the MetaMask browser extension and MetaMask Mobile.\nWhen connecting to MetaMask Mobile, the SDK uses a secure [communication layer](#communication-layer),\nand it's important to understand the [status of the connection](#connection-status).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/sdk-connections.md"}}],["206",{"pageContent":"Connection status","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/sdk-connections.md"}}],["207",{"pageContent":"Paused connections\n\nConnections pause after MetaMask Mobile is in background (minimized) for 20 seconds.\nThis is to accommodate OS restrictions.\n\nWhen a connection pauses, all traffic to MetaMask Mobile pauses, and the SDK doesn't produce any\nresponse until the user opens MetaMask Mobile again.\nThe SDK automatically deeplinks to MetaMask Mobile, so connections resume automatically.\nIf MetaMask Mobile is paused and the user completely closes MetaMask Mobile, the connection remains\npaused and resumes when the user opens it again.\n\nBecause of this, polling data from MetaMask Mobile may not work for long periods of time.\n\n:::info known issue\nWhen MetaMask Mobile is running in the background, the connection may pause and fail to resume properly when the user reopens MetaMask.\nThe user must return to your dapp so the request is re-sent.\nThe SDK team is working on this issue, and is researching decentralized communication solutions that\nhold state such as [Waku](https://waku.org/).\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/sdk-connections.md"}}],["208",{"pageContent":"Cleared connections\n\nConnections clear if the user closes or refreshes your dapp, since MetaMask doesn't persist\nconnections on the dapp side.\nThis is for simplicity and security purposes.\n\nIf the user completely closes MetaMask Mobile without [pausing the connection](#paused-connections)\nfirst, MetaMask infers that the user isn't using the wallet and closes the connection.\n\n#### Close connections manually\n\nTo close connections manually from MetaMask Mobile, go to **Settings > Experimental**, and select\n**Clear MetaMask SDK connections**.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/sdk-connections.md"}}],["209",{"pageContent":"Communication layer\n\nThe SDK uses elliptic curve integrated encryption scheme (ECIES) to communicate with MetaMask Mobile.\nECIES is a hybrid encryption scheme that combines the benefits of both symmetric and asymmetric encryption.\nIt's a secure method of exchanging encrypted messages between two parties.\n\nIn ECIES, the sender (your dapp) generates a shared secret using the recipient's (MetaMask Mobile's)\npublic key and their own private key.\nThe shared secret is used to encrypt the message using a symmetric cipher (the SDK uses `AES-256-GCM`).\nThe encrypted message is then combined with a message authentication code (MAC) and sent to the recipient.\n\nMetaMask Mobile uses its private key and the dapp's public key to recreate the shared secret and\ndecrypt the message.\nThe MAC is used to verify the authenticity of the message.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/sdk-connections.md"}}],["210",{"pageContent":"MetaMask Mobile uses its private key and the dapp's public key to recreate the shared secret and\ndecrypt the message.\nThe MAC is used to verify the authenticity of the message.\n\nOne of the main benefits of ECIES is that it allows the sender and recipient to exchange messages\nwithout having to exchange a shared secret beforehand.\nIt also provides security against eavesdropping and tampering, since the shared secret is derived\nfrom the sender's and recipient's private keys, which are both kept secret.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/concepts/sdk-connections.md"}}],["211",{"pageContent":"---\ndescription: Detect the MetaMask Ethereum provider object.\n---\n\n# Detect MetaMask\n\nThe presence of the MetaMask Ethereum provider object, `window.ethereum`, in a user's browser\nindicates an Ethereum user.\n\nTo demonstrate this, verify if your browser is running MetaMask by copying and pasting the following\ncode snippet in the developer console of your browser:\n\n```javascript\nif (typeof window.ethereum !== 'undefined') {\n  console.log('MetaMask is installed!');\n}\n```\n\n:::tip\nTo differentiate MetaMask from other Ethereum-compatible browsers, you can detect MetaMask using the\n[`window.ethereum.isMetaMask`](../reference/provider-api.md#windowethereumismetamask) property.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/detect-metamask.md"}}],["212",{"pageContent":"Use @metamask/detect-provider\n\nWe recommend using the [`@metamask/detect-provider`](https://github.com/MetaMask/detect-provider)\nmodule to detect the MetaMask Ethereum provider on any platform or browser.\n\nUse [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) to install\n`@metamask/detect-provider` in your project directory:\n\n```bash\nnpm i @metamask/detect-provider","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/detect-metamask.md"}}],["213",{"pageContent":"In the [example project script](set-up-dev-environment.md#example), the following code detects the\nprovider using `@metamask/detect-provider`:\n\n```javascript title=\"index.js\"\n// This function detects most providers injected at window.ethereum.\nimport detectEthereumProvider from '@metamask/detect-provider';\n\n// This returns the provider, or null if it wasn't detected.\nconst provider = await detectEthereumProvider();\n\nif (provider) {\n  // From now on, this should always be true:\n  // provider === window.ethereum\n  startApp(provider); // initialize your app\n} else {\n  console.log('Please install MetaMask!');\n}\n\nfunction startApp(provider) {\n  // If the provider returned by detectEthereumProvider isn't the same as\n  // window.ethereum, something is overwriting it – perhaps another wallet.\n  if (provider !== window.ethereum) {\n    console.error('Do you have multiple wallets installed?');\n  }\n  // Access the decentralized web!\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/detect-metamask.md"}}],["214",{"pageContent":"Compile the module\n\nUse a bundler such as [Webpack](https://github.com/webpack/webpack) to compile the module and create\nan output script.\nInstall Webpack in your project directory:\n\n```bash\nnpm i --save-dev webpack\n```\n\nInstall the Webpack CLI:\n\n```bash\nnpm i --save-dev webpack-cli\n```\n\nCompile the module:\n\n```bash\nnpx webpack\n```\n\n:::note\nWhen compiling the module, you might need to pass CLI options such as\n[`--experiments-top-level-await`](https://webpack.js.org/configuration/experiments/).\nYou can alternatively specify options in a configuration file as follows:\n\n```javascript title=\"webpack.config.cjs\"\nmodule.exports = {\n    experiments: {\n        topLevelAwait: true,\n    },\n};\n```\n:::\n\nRun `npx webpack` again upon any changes to `index.js`.\nSee [Webpack's Getting Started guide](https://webpack.js.org/guides/getting-started/) for more information.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/detect-metamask.md"}}],["215",{"pageContent":"---\ndescription: Set up a new simple dapp to integrate with MetaMask.\n---\n\n# Set up your development environment\n\nYou can easily set up a simple dapp to integrate with MetaMask.\nFor a full end-to-end tutorial using [Vite](https://v3.vitejs.dev/guide/), see the\n[Create a simple React dapp](../tutorials/react-dapp-local-state.md) tutorial.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["216",{"pageContent":"Prerequisites\n\n- [MetaMask](https://metamask.io/) installed in the browser of your choice on your development\n  machine.\n  We recommend [running a development network](run-development-network.md) on MetaMask when\n  developing a dapp.\n\n- A text editor of your choice, such as [VS Code](https://code.visualstudio.com/).\n  You can install the [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)\n  extension for VS Code to easily launch a local development server for your dapp.\n\n- A module bundler, such as [Webpack](https://github.com/webpack/webpack).\n\n- [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["217",{"pageContent":"Set up a new project\n\nCreate a project directory with the following structure:\n\n```text\nsimple-dapp/\n├─ src/\n│  ├─ index.js\n├─ dist/\n│  ├─ index.html\n```\n\nFor any Ethereum dapp to work, your project script `index.js` must:\n\n- [Detect the Ethereum provider.](detect-metamask.md)\n- [Detect which Ethereum network the user is connected to.](detect-network.md)\n- [Access the user's Ethereum accounts.](access-accounts.md)\n\n:::caution important\nIf you import any modules into your project, such as\n[`@metamask/detect-provider`](https://github.com/MetaMask/detect-provider), use a bundler such as\n[Webpack](https://github.com/webpack/webpack) to compile the modules and create an output script\n`dist/main.js`.\nSee [Webpack's Getting Started guide](https://webpack.js.org/guides/getting-started/) for more information.\n:::\n\n:::tip\nWe also recommend [importing MetaMask SDK](../how-to/use-sdk/index.md) to enable a reliable, secure,\nand seamless connection from your dapp to a MetaMask wallet client.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["218",{"pageContent":"Example\n\nThe following is an example simple dapp script and HTML file:\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript title=\"index.js\"\n/*****************************************/\n/* Detect the MetaMask Ethereum provider */\n/*****************************************/\n\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nconst provider = await detectEthereumProvider();\n\nif (provider) {\n  startApp(provider);\n} else {\n  console.log('Please install MetaMask!');\n}\n\nfunction startApp(provider) {\n  if (provider !== window.ethereum) {\n    console.error('Do you have multiple wallets installed?');\n  }\n}\n\n/**********************************************************/\n/* Handle chain (network) and chainChanged (per EIP-1193) */\n/**********************************************************/\n\nconst chainId = await window.ethereum.request({ method: 'eth_chainId' });\n\nwindow.ethereum.on('chainChanged', handleChainChanged);\n\nfunction handleChainChanged(chainId) {\n  window.location.reload();\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["219",{"pageContent":"const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n\nwindow.ethereum.on('chainChanged', handleChainChanged);\n\nfunction handleChainChanged(chainId) {\n  window.location.reload();\n}\n\n/***********************************************************/\n/* Handle user accounts and accountsChanged (per EIP-1193) */\n/***********************************************************/\n\nlet currentAccount = null;\nwindow.ethereum.request({ method: 'eth_accounts' })\n  .then(handleAccountsChanged)\n  .catch((err) => {\n    console.error(err);\n  });\n\nwindow.ethereum.on('accountsChanged', handleAccountsChanged);\n\nfunction handleAccountsChanged(accounts) {\n  if (accounts.length === 0) {\n    console.log('Please connect to MetaMask.');\n  } else if (accounts[0] !== currentAccount) {\n    currentAccount = accounts[0];\n    showAccount.innerHTML = currentAccount;\n  }\n}\n\n/*********************************************/\n/* Access the user's accounts (per EIP-1102) */\n/*********************************************/","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["220",{"pageContent":"/*********************************************/\n/* Access the user's accounts (per EIP-1102) */\n/*********************************************/\n\nconst ethereumButton = document.querySelector('.enableEthereumButton');\nconst showAccount = document.querySelector('.showAccount');\n\nethereumButton.addEventListener('click', () => {\n  getAccount();\n});\n\nasync function getAccount() {\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    .catch((err) => {\n      if (err.code === 4001) {\n        console.log('Please connect to MetaMask.');\n      } else {\n        console.error(err);\n      }\n    });\n  const account = accounts[0];\n  showAccount.innerHTML = account;\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["221",{"pageContent":"# HTML\n\n```html title=\"index.html\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n  <title>Simple dapp</title>\n  <script type=\"module\" src=\"main.js\"></script>\n</head>\n<body>\n  <!-- Display a connect button and the current account -->\n  <button class=\"enableEthereumButton\">Enable Ethereum</button>\n  <h2>Account: <span class=\"showAccount\"></span></h2>\n</body>\n</html>\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/set-up-dev-environment.md"}}],["222",{"pageContent":"---\ntitle: React Native\n---\n\n# Use MetaMask SDK with React Native\n\nYou can import MetaMask SDK into your React Native dapp to enable your users to easily connect\nwith their MetaMask Mobile wallet.\n\n## How it works\n\nWhen a user accesses your React Native mobile dapp, the SDK automatically deeplinks to MetaMask\nMobile (or if the user doesn't already have it, prompts them to install it).\nOnce the user accepts the connection, they're automatically redirected back to your dapp.\nThis happens for all actions that need user approval.\n\n<p align=\"center\">\n\n![SDK React Native example](../../../assets/sdk-react-native.gif)\n\n</p>\n\nYou can download the\n[React Native example](https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/downloads/reactNativeApp_v0.1.0.zip).\nInstall the example using `yarn setup` and run it using `yarn ios` or `yarn android`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react-native.md"}}],["223",{"pageContent":"Prerequisites\n\n- A React Native project set up\n- [MetaMask Mobile](https://github.com/MetaMask/metamask-mobile) v5.8.1 or above\n- [Yarn](https://yarnpkg.com/getting-started/install) or\n  [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react-native.md"}}],["224",{"pageContent":"Install the SDK\n\n:::tip Coming soon\nA `metamask-react-native-sdk` package that simplifies the installation of the SDK for React Native\ndapps is coming soon.\n:::\n\nUse [`rn-nodeify`](https://github.com/tradle/rn-nodeify) to install the SDK.\nIn your project directory, install `rn-nodeify`:\n\n```bash\nyarn add --dev rn-nodeify\nor\nnpm i --dev rn-nodeify\n```\n\nInstall the `rn-nodeify` libraries:\n\n```bash\nyarn add react-native-crypto\nyarn add react-native-randombytes\nyarn add crypto\nyarn add process\nyarn add stream\nyarn add events\n```\n\nIn your project's `package.json` file, insert the `rn-nodeify` command into the postinstall script:\n\n```json title=\"package.json\"\n\"scripts\": {\n  ...,\n  \"postinstall\": \"rn-nodeify --install 'crypto,process,stream,events' --hack\"\n}\n```\n\n`rn-nodeify` creates a `shim.js` file in your project root directory.\nImport it in the root file of your application:\n\n```bash\nimport './shim'","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react-native.md"}}],["225",{"pageContent":"`rn-nodeify` creates a `shim.js` file in your project root directory.\nImport it in the root file of your application:\n\n```bash\nimport './shim'\n```\n\nInstall `react-native-background-timer`:\n\n```bash\nyarn add react-native-background-timer\n\ncd ios && pod install && cd ..\n```\n\nInstall MetaMask SDK:\n\n```bash\nyarn add @metamask/sdk\n```\n\nRun the postinstall script after everything is installed:\n\n```bash\nyarn postinstall\n```\n\nFinally, install the necessary pods that come with the libraries:\n\n```bash\ncd ios && pod install && cd ..\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react-native.md"}}],["226",{"pageContent":"Use the SDK\n\nImport, instantiate, and use the SDK by adding something similar to the following to your project script:\n\n```javascript\nimport MetaMaskSDK from '@metamask/sdk';\nimport { Linking } from 'react-native';\nimport BackgroundTimer from 'react-native-background-timer';\n\nconst MMSDK = new MetaMaskSDK({\n  openDeeplink: (link) => {\n    Linking.openURL(link); // Use React Native Linking method or another way of opening deeplinks.\n  },\n  timer: BackgroundTimer, // To keep the dapp alive once it goes to background.\n  dappMetadata: {\n    name: 'My dapp', // The name of your dapp.\n    url: 'https://mydapp.com', // The URL of your website.\n  },\n});\n\nconst ethereum = MMSDK.getProvider();\n\nconst accounts = await ethereum.request({ method: 'eth_requestAccounts' });","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react-native.md"}}],["227",{"pageContent":"You can configure the SDK using any [options](../../../reference/sdk-js-options.md) and call any\n[provider API methods](../../../reference/provider-api.md).\nAlways call [`eth_requestAccounts`](../../../reference/rpc-api.md#eth_requestaccounts) using\n[`ethereum.request(args)`](../../../reference/provider-api.md#windowethereumrequestargs) first,\nsince it prompts the installation or connection popup to appear.\n\nYou can use [EthersJS](https://docs.ethers.io/v5/getting-started/) with your React Native app:\n\n```javascript\nconst provider = new ethers.providers.Web3Provider(ethereum);\n\n// Get the balance of an account (by address or ENS name, if supported by network).\nconst balance = await provider.getBalance(ethereum.selectedAddress);\n\n// Often you need to format the output to something more user-friendly,\n// such as in ether (instead of wei).\nconst balanceInETH = ethers.utils.formatEther(balance);\n// '0.182826475815887608'\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/javascript/react-native.md"}}],["228",{"pageContent":"---\ndescription: MetaMask JavaScript SDK options\n---\n\n# MetaMask JavaScript SDK options\n\nThe JavaScript version of [MetaMask SDK](../how-to/use-sdk/index.md) takes several options.\nFor example, you can specify options as follows:\n\n```javascript\nconst options = {\n  injectProvider: false,\n  communicationLayerPreference: 'webrtc',\n};\n\nconst MMSDK = new MetaMaskSDK(options);","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["229",{"pageContent":"The following table shows the full list of options:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["230",{"pageContent":"| Option name                    |                      Type                      | Default value | Description                                                                                                                                                                                                                                |\n|--------------------------------|:----------------------------------------------:|:-------------:|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["231",{"pageContent":"| `dappMetadata`                 | `{name: \"My Dapp\", url: \"https://mydapp.com\"}` |  `undefined`  | Only required for non-web dapps (for example, React Native and Unity).                                                                                                                                                                     |\n| `injectProvider`               |                   `boolean`                    |    `true`     | Doesn't inject in Node.js or React Native since the window object is unavailable.                                                                                                                                                          |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["232",{"pageContent":"| `forceInjectProvider`          |                   `boolean`                    |    `false`    | Forces injection even if another provider is already present on the window object.                                                                                                                                                         |\n| `forceDeleteProvider`          |                   `boolean`                    |    `false`    | Forces deletion of a provider that exists on a window.                                                                                                                                                                                     |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["233",{"pageContent":"| `checkInstallationImmediately` |                   `boolean`                    |    `false`    | The SDK checks if MetaMask is installed when a call to `eth_requestAccounts` is made. When `true`, it checks before any call is made.                                                                                                      |\n| `checkInstallationOnAllCalls`  |                   `boolean`                    |    `false`    | Normally checked when a call to `eth_requestAccounts` is made. When `true`, it checks on all calls.                                                                                                                                        |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["234",{"pageContent":"| `shouldShimWeb3`               |                   `boolean`                    |    `true`     | Set as `true` if `window.web3` should be shimmed for [legacy compatibility purposes](../how-to/migrate-api.md#replace-windowweb3).                                                                                                         |\n| `preferDesktop`                |                   `boolean`                    |    `false`    | For a web dapp running on a desktop browser without a MetaMask extension, the SDK gives the option to connect with a MetaMask Mobile wallet via a QR code. When `true`, the SDK guides the user to install the MetaMask extension instead. |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["235",{"pageContent":"| `openDeeplink`                 |        `(deeplinkUrl: string) => void`         |  `undefined`  | Platforms open deeplinks differently. For example, web: `window.open` versus React Native: `Linking.open`. This function retrieves the deeplink URL and allows developers to customize how it opens.                                       |\n| `getUniversalLink`             |                 `() => string`                 |  `undefined`  | Get the universal link that is presented on the QR Code (web) and deeplinks (mobile). This makes it easier to enable users to connect with backend code.                                                                                   |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["236",{"pageContent":"| `communicationLayerPreference` |             `\"socket\" or \"webrtc\"`             |   `socket`    | Defines the communication library that the dapp and MetaMask wallet use to communicate with each other. Waku or another similar decentralized communication layer solution coming soon.                                                    |\n| `webRTCLib`                    |                  `WebRTC Lib`                  |  `undefined`  | Not installed on the SDK by default.                                                                                                                                                                                                       |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["237",{"pageContent":"| `WalletConnectInstance`        |              `WalletConnect Lib`               |  `undefined`  | Connect a dapp to MetaMask using [WalletConnect](https://docs.walletconnect.com/). Not installed by default.                                                                                                                               |\n| `forceRestartWalletConnect`    |                   `boolean`                    |    `false`    | Set `forceRestartWalletConnect` to `true` to kill the previous WalletConnect session and start another one.                                                                                                                                |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["238",{"pageContent":"| `transports`                   |           `['websocket', 'polling']`           |  `undefined`  | Used to set the preference on [socket.io](https://socket.io/docs/v4/) transports to `use`.                                                                                                                                                 |\n| `timer`                        |               `BackgroundTimer`                |  `undefined`  | Used by React Native dapps to keep the dapp alive while using `react-native-background-timer` in the background                                                                                                                            |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["239",{"pageContent":"| `enableDebug`                  |                   `boolean`                    |    `true`     | Enables/disables the sending of debugging information to the socket.io server. The default is `true` for the beta version of the SDK. The default is `false` in production versions.                                                       |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["240",{"pageContent":":::tip\nIf your project is a web dapp and `injectProvider` is `true`, then the `ethereum` object should be\navailable in `window.ethereum`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/sdk-js-options.md"}}],["241",{"pageContent":"---\ndescription: Send transactions using eth_sendTransaction.\n---\n\n# Send transactions\n\nYou can send a transaction in MetaMask using the\n[`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\nRPC method.\n\nFor example, the following JavaScript gets the user's accounts and sends a transaction when they\nselect each button, and the following HTML displays the buttons.\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript\nconst ethereumButton = document.querySelector('.enableEthereumButton');\nconst sendEthButton = document.querySelector('.sendEthButton');\n\nlet accounts = [];","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["242",{"pageContent":"<!--tabs-->\n\n# JavaScript\n\n```javascript\nconst ethereumButton = document.querySelector('.enableEthereumButton');\nconst sendEthButton = document.querySelector('.sendEthButton');\n\nlet accounts = [];\n\n// Send Ethereum to an address\nsendEthButton.addEventListener('click', () => {\n  ethereum\n    .request({\n      method: 'eth_sendTransaction',\n      params: [\n        {\n          from: accounts[0], // The user's active address.\n          to: '0x2f318C334780961FB129D2a6c30D0763d9a5C970', // Required except during contract publications.\n          value: '0x29a2241af62c0000', // Only required to send ether to the recipient from the initiating external account.\n          gasPrice: '0x09184e72a000', // Customizable by the user during MetaMask confirmation.\n          gas: '0x2710', // Customizable by the user during MetaMask confirmation.\n        },\n      ],\n    })\n    .then((txHash) => console.log(txHash))\n    .catch((error) => console.error(error));\n});","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["243",{"pageContent":"ethereumButton.addEventListener('click', () => {\n  getAccount();\n});\n\nasync function getAccount() {\n  accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["244",{"pageContent":"# HTML\n\n```html\n<button class=\"enableEthereumButton btn\">Enable Ethereum</button>\n<button class=\"sendEthButton btn\">Send ETH</button>\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["245",{"pageContent":"Transaction parameters\n\n### Nonce\n\n:::note\nMetaMask ignores this field.\n:::\n\nIn Ethereum, every transaction has a nonce, so each transaction can only be processed by the\nblockchain once.\nTo be a valid transaction, either:\n\n- The nonce must be `0`.\n- A transaction with a nonce of the previous number, from the same account, must have been processed.\n\nThis means that transactions are always processed in order for a given account.\n\nNonces are easy to mess up, especially when a user is interacting with multiple applications with\npending transactions using the same account, potentially across multiple devices.\nBecause of this, MetaMask doesn't allow dapp developers to customize nonces.\nInstead, MetaMask\n[assists the user in managing their transaction queue themselves](https://metamask.zendesk.com/hc/en-us/articles/360015489251).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["246",{"pageContent":"Gas price\n\nGas price is an optional parameter, and best used on private blockchains.\n\nIn Ethereum, every transaction specifies a price for the gas it consumes.\nTo maximize their profit, block producers pick pending transactions with higher gas prices first\nwhen creating the next block.\nThis means that a high gas price usually causes your transaction to be processed faster, at the cost\nof greater transaction fees.\n\nSome networks, such as Layer 2 networks, might have a constant gas price or no gas price.\nSo while you can ignore this parameter on MetaMask's default networks, you might include it when\nyour dapp knows more about the target network than MetaMask does.\nOn the default networks, MetaMask allows users to choose between slow, medium, and fast options for\ntheir gas price.\n\nRead about [how to use advanced gas controls](https://metamask.zendesk.com/hc/en-us/articles/360022895972).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["247",{"pageContent":"Gas limit\n\nGas limit is an optional parameter, since MetaMask automatically calculates a reasonable gas price.\n\n### To\n\nThe `to` parameter is a hex-encoded Ethereum address.\nIt's required for transactions with a recipient (all transactions except for contract creation).\n\nContract creation occurs when there is no `to` value but there is a `data` value.\n\n### Value\n\nThe `value` parameter is a hex-encoded value of the network's native currency to send.\nOn Mainnet, this is [ether](https://www.ethereum.org/eth), which is denominated in wei.\n\nThese numbers are often far higher precision than native JavaScript numbers, and can cause\nunpredictable behavior if not anticipated.\nWe recommend using [BN.js](https://github.com/indutny/bn.js/) when manipulating\nvalues intended for Ethereum.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["248",{"pageContent":"Data\n\nThe `data` parameter is required for smart contract creation.\n\nThis field is also used for specifying contract methods and their parameters.\nSee the [Solidity ABI spec](https://solidity.readthedocs.io/en/develop/abi-spec.html) for more\ninformation on how the data is encoded.\n\n### Chain ID\n\n:::note\nMetaMask ignores this field.\n:::\n\nThe chain ID is derived from the user's current selected network at `window.ethereum.networkVersion`.\n\nIn the future, MetaMask might allow connecting to multiple networks at the same time, at which point\nthis parameter will become important, so it might be useful to be in the habit of including it now.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/send-transactions.md"}}],["249",{"pageContent":"# Use MetaMask SDK\n\nMetaMask SDK provides a reliable, secure, and seamless [connection](../../concepts/sdk-connections.md)\nfrom your dapp to a MetaMask wallet client.\nIt supports the following dapp platforms:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["250",{"pageContent":"<div class=\"cards\">\n  <div class=\"card\">\n    <div class=\"card__header\">\n      <h3><a href=\"javascript\">JavaScript</a></h3>\n    </div>\n    <div class=\"card__body\">\n      <ul>\n        <li><a href=\"javascript/react\">React</a></li>\n        <li><a href=\"javascript/pure-js\">Pure JavaScript</a></li>\n        <li><a href=\"javascript/other-web-frameworks\">Other web frameworks</a></li>\n        <li><a href=\"javascript/react-native\">React Native</a></li>\n        <li><a href=\"javascript/nodejs\">Node.js</a></li>\n        <li><a href=\"javascript/electron\">Electron</a></li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"card\">\n    <div class=\"card__header\">\n      <h3><a href=\"mobile\">Mobile</a></h3>\n    </div>\n    <div class=\"card__body\">\n      <ul>\n        <li><a href=\"javascript/react-native\">React Native</a></li>\n        <li><a href=\"mobile/ios\">Native iOS</a></li>\n        <li><a href=\"mobile/android\">Native Android</a> (coming soon)</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"card\">\n    <div class=\"card__header\">","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["251",{"pageContent":"<li><a href=\"mobile/android\">Native Android</a> (coming soon)</li>\n      </ul>\n    </div>\n  </div>\n  <div class=\"card\">\n    <div class=\"card__header\">\n      <h3><a href=\"gaming\">Gaming</a></h3>\n    </div>\n    <div class=\"card__body\">\n      <ul>\n        <li><a href=\"gaming/unity\">Unity</a></li>\n        <li><a href=\"gaming/unreal-engine\">Unreal Engine</a> (coming soon)</li>\n      </ul>\n    </div>\n  </div>\n</div>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["252",{"pageContent":":::note\nMetaMask SDK uses the [Ethereum provider](../../reference/provider-api.md) that developers are\nalready used to, so existing dapps work out of the box with the SDK.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["253",{"pageContent":"How it works\n\nThe following are examples of how a user experiences a dapp with the SDK installed, on various platforms.\n\n<!--tabs-->\n\n# Desktop\n\nWhen a user accesses your web dapp on a desktop browser that doesn't have the MetaMask extension\ninstalled, a popup appears that prompts the user to either install the MetaMask extension or connect\nto MetaMask Mobile using a QR code.\n\n![SDK desktop browser example](../../assets/sdk-desktop-browser.gif)\n\nYou can try the\n[hosted test dapp with the SDK installed](https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/test-dapp-2/).\nYou can also download the\n[React project example](https://github.com/MetaMask/examples/tree/main/metamask-with/metamask-sdk-create-react-app).\nInstall the example using `yarn` and run it using `yarn start`.\n\n# Mobile","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["254",{"pageContent":"# Mobile\n\nWhen a user accesses your mobile dapp, or web dapp on a mobile browser, the SDK automatically\ndeeplinks to MetaMask Mobile (or if the user doesn't already have it, prompts them to install it).\nAfter the user accepts the connection, they're automatically redirected back to your dapp.\nThis happens for all actions that need user approval.\n\n<p align=\"center\">\n\n![SDK mobile browser example](../../assets/sdk-mobile-browser.gif)\n\n</p>\n\nYou can try the\n[hosted test dapp with the SDK installed](https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/test-dapp-2/).\nYou can also download the\n[React project example](https://github.com/MetaMask/examples/tree/main/metamask-with/metamask-sdk-create-react-app).\nInstall the example using `yarn` and run it using `yarn start`.\n\n# Node.js\n\nWhen a user accesses your Node.js dapp, the SDK renders a QR code on the console which users can\nscan with their MetaMask Mobile app.\n\n<p align=\"center\">\n\n![SDK Node.js example](../../assets/sdk-nodejs.gif)\n\n</p>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["255",{"pageContent":"<p align=\"center\">\n\n![SDK Node.js example](../../assets/sdk-nodejs.gif)\n\n</p>\n\nYou can download the\n[Node.js example](https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/downloads/nodejs_v0.0.1_beta5.zip).\nInstall the example using `yarn` and run it using `node .`.\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/index.md"}}],["256",{"pageContent":"---\ndescription: Access a user's accounts and handle changed accounts.\n---\n\n# Access a user's accounts\n\nUser accounts are used in a variety of contexts in Ethereum, including as identifiers and for\n[signing transactions](../how-to/sign-data.md).\nTo request a signature from a user or have a user approve a transaction, your dapp must\naccess the user's accounts using the\n[`eth_requestAccounts`](../reference/rpc-api.md#eth_requestaccounts) RPC method.\n\nWhen accessing a user's accounts:\n\n- **Only** initiate a connection request in response to direct user action, such as\n  selecting a [connect button](#create-a-connect-button).\n- **Always** disable the connect button while the connection request is pending.\n- **Never** initiate a connection request on page load.\n\n:::tip\nYou can also [use MetaMask SDK](../how-to/use-sdk/index.md) to enable a reliable, secure, and\nseamless connection from your dapp to a MetaMask wallet client.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["257",{"pageContent":"Create a connect button\n\nWe recommend providing a button to allow users to connect MetaMask to your dapp.\nSelecting this button should call `eth_requestAccounts` to access the user's account.\n\nIn the [example project code](set-up-dev-environment.md#example), the following JavaScript code\naccesses the user's accounts when they select a connect button, and the following HTML code\ndisplays the button and the current account:\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript title=\"index.js\"\n// You should only attempt to request the user's account in response to user\n// interaction, such as selecting a button.\n// Otherwise, you popup-spam the user like it's 1999.\n// If you fail to retrieve the user's account, you should encourage the user\n// to initiate the attempt.\nconst ethereumButton = document.querySelector('.enableEthereumButton');\nconst showAccount = document.querySelector('.showAccount');\n\nethereumButton.addEventListener('click', () => {\n  getAccount();\n});","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["258",{"pageContent":"ethereumButton.addEventListener('click', () => {\n  getAccount();\n});\n\n// While awaiting the call to eth_requestAccounts, you should disable\n// any buttons the user can select to initiate the request.\n// MetaMask rejects any additional requests while the first is still\n// pending.\nasync function getAccount() {\n  const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n    .catch((err) => {\n      if (err.code === 4001) {\n        // EIP-1193 userRejectedRequest error\n        // If this happens, the user rejected the connection request.\n        console.log('Please connect to MetaMask.');\n      } else {\n        console.error(err);\n      }\n    });\n  const account = accounts[0];\n  showAccount.innerHTML = account;\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["259",{"pageContent":"# HTML\n\n```html title=\"index.html\"\n<!-- Display a connect button and the current account -->\n<button class=\"enableEthereumButton\">Enable Ethereum</button>\n<h2>Account: <span class=\"showAccount\"></span></h2>\n```\n\n<!--/tabs-->\n\n:::note\nMetaMask currently returns at most one account in the `accounts` array.\nThe array may contain more than one account in the future.\n\nTo retrieve the full list of accounts for which the user has permitted access, use the\n[`wallet_getPermissions`](../reference/rpc-api#wallet_getpermissions) RPC method.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["260",{"pageContent":"Handle accounts\n\nUse the [`eth_accounts`](https://metamask.github.io/api-playground/api-documentation/#eth_accounts)\nRPC method to handle user accounts.\nListen to the [`accountsChanged`](../reference/provider-api.md#accountschanged) provider event to\nbe notified when the user changes accounts.\n\nIn the [example project script](set-up-dev-environment.md#example), the following code handles user\naccounts and detects when the user changes accounts:\n\n```javascript title=\"index.js\"\nlet currentAccount = null;\nwindow.ethereum.request({ method: 'eth_accounts' })\n  .then(handleAccountsChanged)\n  .catch((err) => {\n    // Some unexpected error.\n    // For backwards compatibility reasons, if no accounts are available,\n    // eth_accounts returns an empty array.\n    console.error(err);\n  });\n\n// Note that this event is emitted on page load.\n// If the array of accounts is non-empty, you're already\n// connected.\nwindow.ethereum.on('accountsChanged', handleAccountsChanged);","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["261",{"pageContent":"// Note that this event is emitted on page load.\n// If the array of accounts is non-empty, you're already\n// connected.\nwindow.ethereum.on('accountsChanged', handleAccountsChanged);\n\n// eth_accounts always returns an array.\nfunction handleAccountsChanged(accounts) {\n  if (accounts.length === 0) {\n    // MetaMask is locked or the user has not connected any accounts.\n    console.log('Please connect to MetaMask.');\n  } else if (accounts[0] !== currentAccount) {\n    // Reload your interface with accounts[0].\n    currentAccount = accounts[0];\n    // Update the account displayed (see the HTML for the connect button)\n    showAccount.innerHTML = currentAccount;\n  }\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["262",{"pageContent":":::note\nMetaMask currently returns at most one account in the `accounts` array.\nThe array may contain more than one account in the future.\nThe first account in the array will always be considered the user's \"selected\" account.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/get-started/access-accounts.md"}}],["263",{"pageContent":"---\ndescription: Integrate your dapp with MetaMask Mobile.\n---\n\n# Use MetaMask Mobile\n\nWith MetaMask Mobile, you can onboard your users in seconds, whether they're new or existing\nMetaMask users.\nYour users can sign with their MetaMask wallet, whether they use your dapp on MetaMask browser,\nother primary browsers, mobile, or desktop.\n\nTo use MetaMask Mobile:\n\n- Ensure your dapp is compatible with the [MetaMask Ethereum provider API](../reference/provider-api.md).\n- Include MetaMask Mobile as a listed wallet in your dapp, and link to open the MetaMask Mobile app\n  (if installed) or to go to the app store (if not yet installed).\n  We recommend adding a **Connect with MetaMask** button and [using deeplinks](#use-deeplinks).\n- Direct your users to either the relevant app store listing or to the\n  [MetaMask homepage](https://metamask.io/download.html) to download MetaMask Mobile.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["264",{"pageContent":":::tip\nWe recommend using [MetaMask SDK](use-sdk/index.md) to enable a reliable, secure,\nand seamless connection from your dapp to both the MetaMask extension and MetaMask Mobile.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["265",{"pageContent":"Detect the provider\n\nThe [provider API](../reference/provider-api.md) is the same for MetaMask Mobile and the desktop extension.\nHowever, the providers become available (injected into the page) at different points in the page lifecycle.\n\nIf you\n[use the `@metamask/detect-provider` module](../get-started/detect-metamask.md#use-metamaskdetect-provider),\nit reliably detects both the mobile and extension provider.\nIf you don't use `@metamask/detect-provider`, you must detect the mobile provider manually.\nFor example, you can manually detect the mobile and extension provider with the following code:\n\n```javascript\nif (window.ethereum) {\n  handleEthereum();\n} else {\n  window.addEventListener('ethereum#initialized', handleEthereum, {\n    once: true,\n  });\n\n  // If the event is not dispatched by the end of the timeout,\n  // the user probably doesn't have MetaMask installed.\n  setTimeout(handleEthereum, 3000); // 3 seconds\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["266",{"pageContent":"// If the event is not dispatched by the end of the timeout,\n  // the user probably doesn't have MetaMask installed.\n  setTimeout(handleEthereum, 3000); // 3 seconds\n}\n\nfunction handleEthereum() {\n  const { ethereum } = window;\n  if (ethereum && ethereum.isMetaMask) {\n    console.log('Ethereum successfully detected!');\n    // Access the decentralized web!\n  } else {\n    console.log('Please install MetaMask!');\n  }\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["267",{"pageContent":"The extension provider is always available when your code executes.\nBecause of platform limitations, the mobile provider may not be injected until later in the page\nlifecycle, so the MetaMask provider dispatches the event `ethereum#initialized` on `window` when\nit's fully initialized.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["268",{"pageContent":"Use WalletConnect\n\nWith WalletConnect, your users can use MetaMask Mobile as a signer while using other web, desktop,\nor mobile apps.\nRead the [WalletConnect mobile linking documentation](https://docs.walletconnect.org/mobile-linking)\nfor more information.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["269",{"pageContent":"Use deeplinks\n\nDeeplinks enable instant invocation of the user's preferred wallet app with correctly parameterized\ntransactions.\nOnly the user can confirm the transaction, and the wallet can be a web, desktop, or mobile app.\n\nURLs embedded in QR codes, and hyperlinks in web pages, emails, or chat messages enable robust\nsignaling between otherwise loosely coupled apps.\n\nWith deeplinks, you can enable your users to:\n\n- Open your dapp directly in MetaMask Mobile to interact with your dapp with their Ethereum account.\n- Make payments to another account in one click (with pre-filled parameters such as recipient\n  address, amount, and network).\n- Make gasless and instant transactions with Connext payment channel requests.\n  This requires that the user opt in for the InstaPay experimental feature.\n\nUse the [MetaMask deeplink generator](https://metamask.github.io/metamask-deeplinks/) to create deeplinks.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["270",{"pageContent":"Test your dapp\n\nTo test your dapp's integration with MetaMask Mobile:\n\n1. Configure your development server to run on your host machine's local IP address `192.168.x.x`,\n    or `0.0.0.0`.\n1. Ensure your testing device uses the same WiFi connection as the machine hosting the server.\n1. In the MetaMask Mobile web browser, navigate to your website at `http://YOUR_LOCAL_IP:PORT`.\n\n:::note\nIf you use an Android device, you must use `sslip` in your URL.\nFor example, `http://192.168.x.x.sslip.io:8000`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["271",{"pageContent":"Debug your dapp\n\n:::caution\nFor security purposes, web browser debugging on both iOS and Android doesn't work if you downloaded\nMetaMask Mobile through the Apple App Store or Google Play Store.\nYou must build MetaMask Mobile locally from the [GitHub repository](https://github.com/MetaMask/metamask-mobile)\nand run it on a simulator or physical device.\n:::\n\n### iOS\n\nTo debug your dapp on iOS:\n\n1. Open **Safari Preferences > Advanced** and check **Show Develop menu in the menu bar**.\n1. Open MetaMask Mobile in an iOS simulator or iOS device.\n1. In the Safari menu bar, select **Develop > [device name] > [dapp name] > [url - title]**.\n\n:::note\nWhen debugging on a physical device, you must enable Web Inspector in your device's settings by\nselecting **Settings > Safari > Advanced > Web Inspector**.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["272",{"pageContent":"Android\n\nTo debug your dapp on Android:\n\n1. Open MetaMask Mobile in an Android emulator or Android device.\n1. Open Google Chrome's **DevTools > menu (`...`) > More tools > Remote devices**.\n    You can also navigate to `chrome://inspect` from Chrome to display the list of available devices\n    for debugging.\n1. Select your device on the left and select **Inspect** on the browser contents you'd like to inspect.\n\n:::note\nWhen debugging on a physical device you must enable USB debugging in your device's settings by\nselecting **Settings > System > About Phone > Developer options > Enable USB debugging**.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-mobile.md"}}],["273",{"pageContent":"---\ntitle: Use the onboarding library\ndescription: Simplify the MetaMask onboarding experience for your users.\n---\n\n# Use the MetaMask onboarding library\n\n:::caution important\nWe recommend using [MetaMask SDK](use-sdk/index.md), which incorporates the functionality of the\nMetaMask onboarding library.\nYou don't need to set up the onboarding library if you use the SDK.\n:::\n\nSending users away from your dapp to install MetaMask presents challenges.\nYou must inform the user to return to your dapp and refresh their browser after the installation.\nYour dapp detects the user's newly installed MetaMask extension only after that refresh.\n\nYou can use MetaMask's [onboarding library](https://github.com/MetaMask/metamask-onboarding) to\nimprove and simplify the onboarding experience.\nThe library exposes an API to initiate the onboarding process.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["274",{"pageContent":"During the onboarding process, the library registers your dapp as the origin of the onboarding request.\nMetaMask checks for this origin after the user completes the onboarding flow.\nIf it finds an origin, the final confirmation button of the MetaMask onboarding flow indicates that\nthe user will be redirected back to your dapp.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["275",{"pageContent":"Steps\n\n1. Install [@metamask/onboarding](https://github.com/MetaMask/metamask-onboarding).\n1. Import the library or include it in your page:\n\n    ```javascript\n    // As an ES6 module\n    import MetaMaskOnboarding from '@metamask/onboarding';\n    // Or as an ES5 module\n    const MetaMaskOnboarding = require('@metamask/onboarding');\n    ```\n    \n    Alternatively, you can include the prebuilt ES5 bundle that ships with the library:\n    \n    ```html\n    <script src=\"./metamask-onboarding.bundle.js\"></script>\n    ```\n\n1. Create a new instance of the onboarding library:\n\n    ```javascript\n    const onboarding = new MetaMaskOnboarding();\n    ```\n\n1. Start the onboarding process in response to a user event (for example, a button click):\n\n    ```javascript\n    onboarding.startOnboarding();\n    ```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["276",{"pageContent":"Example\n\nThe following are example ways to use the onboarding library in various frameworks:\n\n<!--tabs-->\n\n# React\n\n```jsx\nimport MetaMaskOnboarding from '@metamask/onboarding';\nimport React from 'react';\n\nconst ONBOARD_TEXT = 'Click here to install MetaMask!';\nconst CONNECT_TEXT = 'Connect';\nconst CONNECTED_TEXT = 'Connected';\n\nexport function OnboardingButton() {\n  const [buttonText, setButtonText] = React.useState(ONBOARD_TEXT);\n  const [isDisabled, setDisabled] = React.useState(false);\n  const [accounts, setAccounts] = React.useState([]);\n  const onboarding = React.useRef();\n\n  React.useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding();\n    }\n  }, []);","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["277",{"pageContent":"React.useEffect(() => {\n    if (!onboarding.current) {\n      onboarding.current = new MetaMaskOnboarding();\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      if (accounts.length > 0) {\n        setButtonText(CONNECTED_TEXT);\n        setDisabled(true);\n        onboarding.current.stopOnboarding();\n      } else {\n        setButtonText(CONNECT_TEXT);\n        setDisabled(false);\n      }\n    }\n  }, [accounts]);\n\n  React.useEffect(() => {\n    function handleNewAccounts(newAccounts) {\n      setAccounts(newAccounts);\n    }\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      window.ethereum\n        .request({ method: 'eth_requestAccounts' })\n        .then(handleNewAccounts);\n      window.ethereum.on('accountsChanged', handleNewAccounts);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleNewAccounts);\n      };\n    }\n  }, []);","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["278",{"pageContent":"const onClick = () => {\n    if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n      window.ethereum\n        .request({ method: 'eth_requestAccounts' })\n        .then((newAccounts) => setAccounts(newAccounts));\n    } else {\n      onboarding.current.startOnboarding();\n    }\n  };\n  return (\n    <button disabled={isDisabled} onClick={onClick}>\n      {buttonText}\n    </button>\n  );\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["279",{"pageContent":"# TypeScript\n\nThe onboarding library ships with MetaMask's TypeScript types.\nModify the React example as follows to get type safety:\n\n```jsx\n-const onboarding = React.useRef();\n+const onboarding = React.useRef<MetaMaskOnboarding>();","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["280",{"pageContent":"This gives you editor auto-completion for the methods exposed by the library, and\nhelpful documentation:\n\n![Editor Highlighting](https://user-images.githubusercontent.com/4448075/85584481-ccc7ec00-b604-11ea-9b74-49c76ee0bf22.png)\n\n# Vanilla JavaScript and HTML\n\n```html\n<!DOCTYPE html>\n<html lang=\"en-CA\">\n  <head>\n    <title>MetaMask Onboarding Example</title>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <h1>Sample Dapp</h1>\n    <button id=\"onboard\">Loading...</button>\n    <script src=\"./metamask-onboarding.bundle.js\"></script>\n    <script>\n      window.addEventListener('DOMContentLoaded', () => {\n        const onboarding = new MetaMaskOnboarding();\n        const onboardButton = document.getElementById('onboard');\n        let accounts;","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["281",{"pageContent":"const updateButton = () => {\n          if (!MetaMaskOnboarding.isMetaMaskInstalled()) {\n            onboardButton.innerText = 'Click here to install MetaMask!';\n            onboardButton.onclick = () => {\n              onboardButton.innerText = 'Onboarding in progress';\n              onboardButton.disabled = true;\n              onboarding.startOnboarding();\n            };\n          } else if (accounts && accounts.length > 0) {\n            onboardButton.innerText = 'Connected';\n            onboardButton.disabled = true;\n            onboarding.stopOnboarding();\n          } else {\n            onboardButton.innerText = 'Connect';\n            onboardButton.onclick = async () => {\n              await window.ethereum.request({\n                method: 'eth_requestAccounts',\n              });\n            };\n          }\n        };","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["282",{"pageContent":"updateButton();\n        if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n          window.ethereum.on('accountsChanged', (newAccounts) => {\n            accounts = newAccounts;\n            updateButton();\n          });\n        }\n      });\n    </script>\n  </body>\n</html>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["283",{"pageContent":"<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-onboarding-library.md"}}],["284",{"pageContent":"---\ndescription: MetaMask Ethereum provider API reference\n---\n\n# Ethereum provider API\n\nMetaMask injects a global JavaScript API into websites visited by its users using the\n`window.ethereum` provider object.\nThis API allows websites to request users' Ethereum accounts, read data from blockchains the user is\nconnected to, and suggest that the user sign messages and transactions.\n\nYou can use the provider [properties](#properties), [methods](#methods), and [events](#events) in\nyour dapp.\nGet started by [setting up your development environment](../get-started/set-up-dev-environment.md).\n\n## Properties\n\n### window.ethereum.isMetaMask\n\nThis property is `true` if the user has MetaMask installed.\n\n:::note\nThis property is non-standard.\nNon-MetaMask providers may also set this property to `true`.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["285",{"pageContent":"Methods\n\n### window.ethereum.isConnected()\n\n```typescript\nwindow.ethereum.isConnected(): boolean;\n```\n\nReturns `true` if the provider is connected to the current chain.\n\nIf the provider isn't connected, the page must be reloaded to re-establish the connection.\nSee the [`connect`](#connect) and [`disconnect`](#disconnect) events for more information.\n\n:::note\nThis method is unrelated to [accessing a user's accounts](../get-started/access-accounts.md).\nIn the provider interface, \"connected\" and \"disconnected\" refer to whether the provider can make RPC\nrequests to the current chain.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["286",{"pageContent":"window.ethereum.request(args)\n\n```typescript\ninterface RequestArguments {\n  method: string;\n  params?: unknown[] | object;\n}\n\nwindow.ethereum.request(args: RequestArguments): Promise<unknown>;","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["287",{"pageContent":"Use this method to submit [RPC API](rpc-api.md) requests to Ethereum using MetaMask.\nIt returns a promise that resolves to the result of the RPC method call.\n\nThe parameters and return value vary by RPC method.\nIn practice, if a method has parameters, they're almost always of type `Array<any>`.\n\nIf the request fails, the promise rejects with an [error](#errors).\n\nThe following is an example of using `window.ethereum.request(args)` to call\n[`eth_sendTransaction`](https://metamask.github.io/api-playground/api-documentation/#eth_sendTransaction):\n\n```javascript\nparams: [\n  {\n    from: '0xb60e8dd61c5d32be8058bb8eb970870f07233155',\n    to: '0xd46e8dd67c5d32be8058bb8eb970870f07244567',\n    gas: '0x76c0', // 30400\n    gasPrice: '0x9184e72a000', // 10000000000000\n    value: '0x9184e72a', // 2441406250\n    data:\n      '0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675',\n  },\n];","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["288",{"pageContent":"window.ethereum\n  .request({\n    method: 'eth_sendTransaction',\n    params,\n  })\n  .then((result) => {\n    // The result varies by RPC method.\n    // For example, this method returns a transaction hash hexadecimal string upon success.\n  })\n  .catch((error) => {\n    // If the request fails, the Promise rejects with an error.\n  });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["289",{"pageContent":"window.ethereum._metamask.isUnlocked()\n\n:::caution\nThis method is experimental.\nUse it at your own risk.\n:::\n\n```typescript\nwindow.ethereum._metamask.isUnlocked(): Promise<boolean>;\n```\n\nReturns a promise that resolves to a `boolean` indicating if MetaMask is unlocked by the user.\nMetaMask must be unlocked to perform any operation involving user accounts.\nNote that this method doesn't indicate if the user has exposed any accounts to the caller.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["290",{"pageContent":"Events\n\nThe MetaMask provider emits events using the Node.js\n[`EventEmitter`](https://nodejs.org/api/events.html) API.\nThe following is an example of listening to the [`accountsChanged`](#accountschanged) event.\nYou should remove listeners once you're done listening to an event (for example, on component\nunmount in React).\n\n```javascript\nfunction handleAccountsChanged(accounts) {\n  // Handle new accounts, or lack thereof.\n}\n\nwindow.ethereum.on('accountsChanged', handleAccountsChanged);\n\n// Later\n\nwindow.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n```\n\nThe first argument of `window.ethereum.removeListener` is the event name, and the second argument is\na reference to the function passed to `window.ethereum.on` for the event.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["291",{"pageContent":"accountsChanged\n\n```typescript\nwindow.ethereum.on('accountsChanged', handler: (accounts: Array<string>) => void);\n```\n\nThe provider emits this event when the return value of the\n[`eth_accounts`](https://metamask.github.io/api-playground/api-documentation/#eth_accounts) RPC\nmethod changes.\n`eth_accounts` returns either an empty array, or an array that contains the address of the most\nrecently used account the caller is permitted to access.\nCallers are identified by their URL origin, which means that all sites with the same origin share\nthe same permissions.\n\nThis means that the provider emits `accountsChanged` when the user's exposed account address changes.\nListen to this event to [handle accounts](../get-started/access-accounts.md#handle-accounts).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["292",{"pageContent":"chainChanged\n\n```typescript\nwindow.ethereum.on('chainChanged', handler: (chainId: string) => void);\n```\n\nThe provider emits this event when the currently connected chain changes.\nListen to this event to [detect a user's network](../get-started/detect-network.md).\n\n:::caution important\n\nWe strongly recommend reloading the page upon chain changes, unless you have a good reason not to:\n\n```javascript\nwindow.ethereum.on('chainChanged', (chainId) => window.location.reload());\n```\n\n:::\n\n### connect\n\n```typescript\ninterface ConnectInfo {\n  chainId: string;\n}\n\nwindow.ethereum.on('connect', handler: (connectInfo: ConnectInfo) => void);\n```\n\nThe provider emits this event when it's first able to submit RPC requests to a chain.\nWe recommend listening to this event and using the\n[`window.ethereum.isConnected()`](#windowethereumisconnected) provider method to determine when\nthe provider is connected.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["293",{"pageContent":"disconnect\n\n```typescript\nethereum.on('disconnect', handler: (error: ProviderRpcError) => void);\n```\n\nThe provider emits this event if it becomes unable to submit RPC requests to a chain.\nIn general, this only happens due to network connectivity issues or some unforeseen error.\n\nWhen the provider emits this event, it doesn't accept new requests until the connection to the chain\nis re-established, which requires reloading the page.\nYou can also use the [`window.ethereum.isConnected()`](#windowethereumisconnected) provider method\nto determine if the provider is disconnected.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["294",{"pageContent":"message\n\n```typescript\ninterface ProviderMessage {\n  type: string;\n  data: unknown;\n}\n\nwindow.ethereum.on('message', handler: (message: ProviderMessage) => void);\n```\n\nThe provider emits this event when it receives a message that the user should be notified of.\nThe `type` property identifies the kind of message.\n\nRPC subscription updates are a common use case for this event.\nFor example, if you create a subscription using\n[`eth_subscribe`](https://metamask.github.io/api-playground/api-documentation/#eth_subscribe), each\nsubscription update is emitted as a `message` event with a `type` of `eth_subscription`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["295",{"pageContent":"Errors\n\nAll errors returned by the MetaMask provider follow this interface:\n\n```typescript\ninterface ProviderRpcError extends Error {\n  message: string;\n  code: number;\n  data?: unknown;\n}\n```\n\nThe [`window.ethereum.request(args)`](#windowethereumrequestargs) provider method throws errors\neagerly.\nYou can use the error `code` property to determine why the request failed.\nCommon codes and their meaning include:\n\n- `4001` - The request is rejected by the user.\n- `-32602` - The parameters are invalid.\n- `-32603` - Internal error.\n\nFor the complete list of errors, see [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193#provider-errors)\nand [EIP-1474](https://eips.ethereum.org/EIPS/eip-1474#error-codes).\n\n:::tip\nThe [`eth-rpc-errors`](https://npmjs.com/package/eth-rpc-errors) package implements all RPC errors\nreturned by the MetaMask provider, and can help you identify their meaning.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/provider-api.md"}}],["296",{"pageContent":"---\ntitle: Unity\n---\n\n# Use MetaMask SDK with Unity\n\nYou can import MetaMask SDK into your [Unity](https://unity.com/) game to enable users to easily\nconnect to their MetaMask Mobile wallet.\nThe MetaMask Unity SDK supports macOS, Windows, Linux, iOS, Android, and WebGL.\n\n## How it works\n\nThe SDK renders a QR code in the Unity game UI using a dedicated prefab which players can scan with\ntheir MetaMask Mobile app.\nIt also supports deeplinking on mobile platforms.\nYou can use all the [provider API methods](../../../reference/provider-api.md) right from your game.\n\n## Video demo\n\nThe following video demonstrates how to install and use the MetaMask Unity SDK.\n\n<p align=\"center\">\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0D1cIH-PZtI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</p>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["297",{"pageContent":"Steps\n\n### 1. Configure build settings\n\nTo build the SDK, configure the following settings in your Unity editor according to your\ndevelopment platform:\n\n- iOS:\n  - Go to **Build Settings > Build Options** and set **Enable Bitcode** to **NO**.\n- Android:\n  - Go to the **Assets** dropdown menu and select **External Dependency Manager > Android\n    Resolver > Resolve**.\n  - Go to **Build Settings > Player Settings** and set **Minimum API level** to **Android 7.0\n    'Nougat'** (API level 24).\n- WebGL:\n  - Go to **Build Settings > Player Settings**, switch to the **Resolution & Presentation Tab**, and\n    select **MetaMask**.\n\nFor all platforms, also set the **Scripting Backend** in **Player Settings** to **IL2CPP**, and set\n**IL2CPP Code Generation** in **Build Settings** to **Faster (smaller) builds**.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["298",{"pageContent":"2. Install the SDK for Unity\n\nDownload the\n[MetaMask SDK for Unity](https://assetstore.unity.com/packages/decentralization/infrastructure/metamask-246786)\nfrom the Unity Asset Store.\n\nIn your Unity editor, go to the menu > **Package Manager**.\nSelect **My Assets**, **MetaMask Unity SDK**, and **Install**.\nYou should see the MetaMask SDK package listed in the project packages and be able to interface\nwith it and its examples in the scene.\n\nYou also need to install [TextMeshPro](https://docs.unity3d.com/Manual/com.unity.textmeshpro.html).\nIf you don't have TextMeshPro installed, the Unity editor automatically prompts you to install it.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["299",{"pageContent":"3. Initialize MetaMask\n\nThe main class you interface with is called `MetaMaskWallet`.\nIt handles the connection to the user's wallet, as well as processing the requests to it using a\nsocket.io implementation.\n\nTo use it inside Unity, you must attach the component called `MetaMaskUnity` to a game object within\nthe editor.\nThis component is a singleton and you can use its `Instance` property to access the wallet instance.\nYou first must initialize by doing one of the following:\n\n- Manually call `Initialize()`:\n\n    ```csharp\n    MetaMaskUnity.Instance.Initialize();\n    ```\n\n- Check **Initialize On Start** on the component within the editor.\n\nThis initializes the wallet instance, making it accessible from `MetaMaskUnity.Instance.Wallet`.\nYou can now make calls to the user's wallet using [provider API methods](../../../reference/provider-api.md).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["300",{"pageContent":"4. Connect to MetaMask\n\nOnce the wallet is prepared and initialized, you can connect to MetaMask.\nCall the `Connect()` method on the wallet instance as follows:\n\n```csharp\nvar wallet = MetaMaskUnity.Instance.Wallet;\nwallet.Connect();\n```\n\nYou can also subscribe to the `OnWalletConnected` callback on the wallet instance to be notified\nonce the wallet is connected:\n\n```csharp\nwallet.WalletConnected += OnWalletConnected;\n\nvoid OnWalletConnected(object sender, EventArgs e) {\n    Debug.Log(\"Wallet is connected\");\n}\n```\n\nYou can also use the `Connect()` method from `MetaMaskUnity` that delegates the call to the wallet\ninstance:\n\n```csharp\nMetaMaskUnity.Instance.Connect();","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["301",{"pageContent":"You can also use the `Connect()` method from `MetaMaskUnity` that delegates the call to the wallet\ninstance:\n\n```csharp\nMetaMaskUnity.Instance.Connect();\n```\n\nThere are a variety of sample buttons included inside the package that call this method when clicked.\nThese are provided as a convenience to get started quickly with your project.\nOnce the connection request is made, a QR code is generated, and based on the transport you're using\n(`Unity UI` by default), either a new Canvas that contains the QR code is spawned or the\n`MetaMaskUnityUIQRImage` generates the QR code when the connection is requested.\n\nIf you want to use the latter, add an instance of the `MetaMaskUnityUIQRImage` component to the\nscene with its fields provided.\nThe transport field is also required if you want to use it isolated from the canvas that is spawned\nby the transport, then it generates the QR code for you.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["302",{"pageContent":"5. Use MetaMask\n\nOnce the wallet is authorized, you can make requests to it.\nThe wallet is authorized when the buttons become interactable or the `WalletAuthorized` event is fired:\n\n```csharp\nvar wallet = MetaMaskUnity.Instance.Wallet;\nwallet.WalletAuthorized += OnWalletAuthorized;\n\nvoid OnWalletAuthorized(object sender, EventArgs e) {\n    Debug.Log(\"Wallet is authorized\");\n}\n```\n\nYou can call any Ethereum request on the wallet using `wallet.Request(myRequest)`.\nThe following is a sample transaction request:\n\n```csharp\nvar wallet = MetaMaskUnity.Instance.Wallet;\nvar transactionParams = new MetaMaskTransaction\n{\n    To = \"0xd0059fB234f15dFA9371a7B45c09d451a2dd2B5a\",\n    From = MetaMaskUnity.Instance.Wallet.SelectedAddress,\n    Value = \"0x0\"\n};\n\nvar request = new MetaMaskEthereumRequest\n{\n    Method = \"eth_sendTransaction\",\n    Parameters = new MetaMaskTransaction[] { transactionParams }\n};\nawait wallet.Request(request);\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["303",{"pageContent":"6. Configure MetaMask\n\nYou can customize the default configuration or create your own configuration.\n\nEdit the default configuration by doing one of the following:\n\n- Navigate to the **Window > MetaMask > Setup** menu item.\n- Open the `MetaMaskConfig` asset in the project window.\n\nEdit the fields and save the changes.\n\nCreate a new configuration by right-clicking on the project window and navigating to\n**MetaMask > Config**.\nName the new configuration and use it when initializing the `MetaMaskUnity` instance.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["304",{"pageContent":"API\n\nThe following is an overview of the APIs from the most important classes.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["305",{"pageContent":"MetaMaskUnity\n\nThis is a singleton class that you can use to access the `MetaMaskWallet` instance, which is\nspecific to Unity.\n\n#### `Instance`\n\nThis is the singleton instance of the `MetaMaskUnity` class that is lazy-loaded when you access it\nfor the first time.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["306",{"pageContent":"`Instance`\n\nThis is the singleton instance of the `MetaMaskUnity` class that is lazy-loaded when you access it\nfor the first time.\n\n#### `Initialize`\n\nThis method initializes the `MetaMaskWallet` instance and makes it accessible via the `Wallet` property.\nYou can also pass extra options and parameters to it to customize the wallet instance:\n\n```csharp\n// Initialize using default settings\nMetaMaskUnity.Instance.Initialize();\n\n// Initialize using custom transport and socket provider\nvar transport = new MyCustomTransport();\nvar socketProvider = new MyCustomSocketProvider();\nMetaMaskUnity.Instance.Initialize(transport, socketProvider);\n\n// Initialize using custom config, transport and socket provider\nvar config = myMetaMaskConfig;\nvar transport = new MyCustomTransport();\nvar socketProvider = new MyCustomSocketProvider();\nMetaMaskUnity.Instance.Initialize(config, transport, socketProvider);\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["307",{"pageContent":"`SaveSession`\n\nThis method saves the current session to the persistent storage.\nThis is useful when you want to save the session and restore it later.\nThis is automatically called when the application quits, but you can also manually call it.\n\n#### `LoadSession`\n\nThis method loads the session from the persistent storage.\nThis is useful when you want to restore the session after the application quits.\nThis is automatically called when the application starts, but you can also manually call it.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["308",{"pageContent":"MetaMaskWallet\n\n#### `Connect`\n\nThis method connects to the MetaMask app.\nIt renders a generated QR code in the user interface for your users to scan with MetaMask Mobile.\nAfter the user scans this QR code, a connect screen appears in MetaMask Mobile where the user can\napprove the connection with your game application.\n\n#### `Disconnect`\n\nThis method disconnects the user that is connected from the MetaMask app session.\n\n#### `Request`\n\nThis method sends a request to MetaMask.\nYou can use it to call any [provider API method](../../../reference/provider-api.md).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["309",{"pageContent":"Package structure\n\n| File or directory        | Contents                                       |\n| ------------------------ | ---------------------------------------------- |\n| `Documentation`          | Documentation and link to online documentation |\n| `Editor`                 | Editor-only code such as Setup GUI windows, data persistence for SDK settings |\n| `Plugins`                | Plugins needed by the package (the ECIES Platform runtime libraries and core SDK Codebase) |\n| `Runtime`                | Main scripts for the SDK that are environment-agnostic, including the C# scripts that provide the base implementation of the SDK |\n| `Samples`                | Test application scene that can be used as a referral for your project, including modal popups and dynamic UI scaling |\n| `LICENSE.md`             | Package license                                |\n| `Third Party Notices.md` | Third party notices                            |","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["310",{"pageContent":"FAQS\n\n<details>\n\n<summary>I can't find the SDK installation option.</summary>\n\nIf you don't see the option to [install the SDK](#2-install-the-sdk-for-unity) in your Unity menu,\nensure you're on the latest Unity version and that you have no red errors printed in your console.\nThis option not appearing is typically due to incorrect editor initialization, which you can\nusually resolve by restarting the editor or updating your Unity version.\n\n</details>\n\n<details>\n\n<summary>On iOS, why does a popup appear when using a deeplink?</summary>\n\nWhen deeplinking, a background service is created to facilitate the communication layer between the\nUnity game and MetaMask.\nOn iOS, background services expire after a certain amount of time.\nA notification pops up to let you know the socket connection has expired.\n\n</details>\n\n<details>\n\n<summary>What does the external dependency manager do?</summary>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["311",{"pageContent":"</details>\n\n<details>\n\n<summary>What does the external dependency manager do?</summary>\n\nThe Unity Jar Resolver is an external dependency manager specifically for Unity projects that use\nexternal libraries.\nIt helps manage the dependencies between Unity and external libraries, which can sometimes be\ncomplicated due to differences between the two environments.\nThis tool is particularly useful for MetaMask SDK, since Android and iOS need a variety of native\nlibraries to facilitate deeplinking and the persistent socket connection.\n\n</details>\n\n<details>\n\n<summary>Does the SDK increase my compilation time?</summary>\n\nNo.\nIf you notice an increased compilation time, it might be related to the ILL2CP pipeline, which can\ntake longer to build at compile time.\nThe SDK is filled with precompiled libraries to save on runtime compilation.\n\n</details>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/gaming/unity.md"}}],["312",{"pageContent":"---\ntitle: Native iOS\n---\n\n# Use MetaMask SDK with iOS\n\nYou can import MetaMask SDK into your native iOS dapp to enable your users to easily connect\nwith their MetaMask Mobile wallet.\n\n## Prerequisites\n\nAn iOS project set up with iOS version 14+.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["313",{"pageContent":"Steps\n\n### 1. Install the SDK\n\nTo add the SDK as a Swift Package Manager (SPM) package to your project, in Xcode, select\n**File > Swift Packages > Add Package Dependency**.\nEnter the URL of the MetaMask iOS SDK repository: `https://github.com/MetaMask/metamask-ios-sdk`.\n\nAlternatively, you can add the URL directly in your project's package file:\n\n```swift\ndependencies: [\n    .package(\n        url: \"https://github.com/MetaMask/metamask-ios-sdk\",\n        from: \"0.1.0\"\n    )\n]\n```\n\n:::note\nThe SDK supports `ios-arm64` (iOS devices) and `ios-arm64-simulator` (M1 chip simulators).\nIt currently doesn't support `ios-ax86_64-simulator` (Intel chip simulators).\n:::\n\n### 2. Import the SDK\n\nImport the SDK by adding the following line to the top of your project file:\n\n```\nimport metamask_ios_sdk\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["314",{"pageContent":"2. Import the SDK\n\nImport the SDK by adding the following line to the top of your project file:\n\n```\nimport metamask_ios_sdk\n```\n\n### 3. Connect your dapp\n\nConnect your dapp by adding the following code to your project file:\n\n```swift\n@ObservedObject var ethereum = MetaMaskSDK.shared.ethereum\n\nlet dapp = Dapp(name: \"Dub Dapp\", url: \"https://dubdapp.com\")\n\n// This is the same as calling eth_requestAccounts\nethereum.connect(dapp)\n```\n\nBy default, MetaMask logs three SDK events: `connectionRequest`, `connected`, and `disconnected`.\nThis allows MetaMask to monitor any SDK connection issues.\nTo disable this, set `MetaMaskSDK.shared.enableDebug = false` or `ethereum.enableDebug = false`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["315",{"pageContent":"4. Call provider methods\n\nYou can now call any [provider API method](../../../reference/provider-api.md).\n\nThe SDK uses [Combine](https://developer.apple.com/documentation/combine) to publish Ethereum\nevents, so you need to define an `AnyCancellable` storage by adding the following line to your\nproject file:\n\n```swift\n@State private var cancellables: Set<AnyCancellable> = []\n```\n\nThe following examples use the\n[`window.ethereum.request(args)`](../../../reference/provider-api.md#windowethereumrequestargs)\nprovider API method to call various [RPC API](../../../reference/rpc-api.md) methods.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["316",{"pageContent":"Example: Get chain ID\n\nThe following example gets the user's chain ID by calling\n[`eth_chainId`](https://metamask.github.io/api-playground/api-documentation/#eth_chainId).\n\n```swift\n@State var chainId: String?\n\nlet chainIdRequest = EthereumRequest(method: .ethChainId)\n\nethereum.request(chainIdRequest)?.sink(receiveCompletion: { completion in\n    switch completion {\n    case .failure(let error):\n        print(\"\\(error.localizedDescription)\")\n    default: break\n    }\n}, receiveValue: { result in\n    self.chainId = result\n})\n.store(in: &cancellables)\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["317",{"pageContent":"Example: Get account balance\n\nThe following example gets the user's account balance by calling\n[`eth_getBalance`](https://metamask.github.io/api-playground/api-documentation/#eth_getBalance).\n\n```swift\n@State var balance: String?\n\n// Create parameters\nlet parameters: [String] = [\n    ethereum.selectedAddress, // address to check for balance\n    \"latest\" // \"latest\", \"earliest\" or \"pending\" (optional)\n  ]\n\n// Create request\nlet getBalanceRequest = EthereumRequest(\n    method: .ethGetBalance,\n    params: parameters)\n\n// Make request\nethereum.request(getBalanceRequest)?.sink(receiveCompletion: { completion in\n    switch completion {\n    case .failure(let error):\n        print(\"\\(error.localizedDescription)\")\n    default: break\n    }\n}, receiveValue: { result in\n    self.balance = result\n})\n.store(in: &cancellables)\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["318",{"pageContent":"Example: Send transaction\n\nThe following examples send a transaction by calling\n[`eth_sendTransaction`](https://metamask.github.io/api-playground/api-documentation/#eth_sendTransaction).\n\n<!--tabs-->\n\n# Use a dictionary\n\nIf your request parameters make up a simple dictionary of string key-value pairs, you can use the\ndictionary directly.\nNote that `Any` or even `AnyHashable` types aren't supported, since the type must be explicitly known.\n\n```swift\n// Create parameters\nlet parameters: [String: String] = [\n    \"to\": \"0x...\", // receiver address\n    \"from\": ethereum.selectedAddress, // sender address\n    \"value\": \"0x...\" // amount\n  ]\n\n// Create request\nlet transactionRequest = EthereumRequest(\n    method: .ethSendTransaction,\n    params: [parameters] // eth_sendTransaction expects an array parameters object\n    )","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["319",{"pageContent":"// Create request\nlet transactionRequest = EthereumRequest(\n    method: .ethSendTransaction,\n    params: [parameters] // eth_sendTransaction expects an array parameters object\n    )\n\n// Make a transaction request\nethereum.request(transactionRequest)?.sink(receiveCompletion: { completion in\n    switch completion {\n    case .failure(let error):\n        print(\"\\(error.localizedDescription)\")\n    default: break\n    }\n}, receiveValue: { result in\n    print(result)\n})\n.store(in: &cancellables)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["320",{"pageContent":"# Use a struct\n\nFor more complex parameter representations, define and use a struct that conforms to `CodableData`,\nthat is, implements the following requirement:\n\n```\nfunc socketRepresentation() -> NetworkData","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["321",{"pageContent":"The type can then be represented as a socket packet.\n\n```swift\nstruct Transaction: CodableData {\n    let to: String\n    let from: String\n    let value: String\n    let data: String?\n\n    init(to: String, from: String, value: String, data: String? = nil) {\n        self.to = to\n        self.from = from\n        self.value = value\n        self.data = data\n    }\n\n    func socketRepresentation() -> NetworkData {\n        [\n            \"to\": to,\n            \"from\": from,\n            \"value\": value,\n            \"data\": data\n        ]\n    }\n}\n\n// Create parameters\nlet transaction = Transaction(\n    to: \"0x...\", // receiver address\n    from: ethereum.selectedAddress, // sender address\n    value: \"0x...\" // amount\n)\n\n// Create request\nlet transactionRequest = EthereumRequest(\n    method: .ethSendTransaction,\n    params: [transaction] // eth_sendTransaction expects an array parameters object\n    )","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["322",{"pageContent":"// Create request\nlet transactionRequest = EthereumRequest(\n    method: .ethSendTransaction,\n    params: [transaction] // eth_sendTransaction expects an array parameters object\n    )\n\n// Make a transaction request\nethereum.request(transactionRequest)?.sink(receiveCompletion: { completion in\n    switch completion {\n    case .failure(let error):\n        print(\"\\(error.localizedDescription)\")\n    default: break\n    }\n}, receiveValue: { result in\n    print(result)\n})\n.store(in: &cancellables)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["323",{"pageContent":"<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/use-sdk/mobile/ios.md"}}],["324",{"pageContent":"---\ntitle: Migrate the provider API\ndescription: Migrate to the current provider API.\n---\n\n# Migrate to the current provider API\n\nIn January 2021, MetaMask made a number of breaking changes to the\n[provider API](../reference/provider-api.md), and removed the injected `window.web3`.\nThese changes are live on all platforms as of version:\n\n- `9.0.2` of the MetaMask browser extension.\n- `1.0.9` of MetaMask Mobile.\n\nThis guide describes how to migrate to the new provider API, and how to replace `window.web3`.\nTo understand why MetaMask made these changes, please see\n[this blog post](https://medium.com/metamask/breaking-changes-to-the-metamask-provider-are-here-7b11c9388be9).\n\n:::note\nIf you're a MetaMask user attempting to use a legacy Ethereum website that hasn't migrated to the\nnew API, please see the [MetaMask legacy Web3 extension](#use-the-metamask-legacy-web3-extension).\n\nExcept for such legacy websites, no action is required for MetaMask users.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["325",{"pageContent":"Summary of breaking changes\n\n### window.web3 removal\n\nAs part of the breaking changes, MetaMask stopped injecting `web3.js` version `0.20.7` as `window.web3`\ninto web pages.\nMetaMask still injects a dummy object at `window.web3`, in order to issue warnings when websites\nattempt to access `window.web3`.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["326",{"pageContent":"window.ethereum API changes\n\nMetaMask made the following breaking changes to the `window.ethereum` API:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["327",{"pageContent":"- Ensure that chain IDs returned by `eth_chainId` are **not** 0-padded.\n    - For example, instead of `0x01`, we always return `0x1`, wherever the chain ID is returned or accessible.\n- Stop emitting `chainIdChanged`, and instead emit `chainChanged`.\n- Remove the following experimental methods:\n    - `ethereum._metamask.isEnabled`\n    - `ethereum._metamask.isApproved`\n- Remove the `ethereum.publicConfigStore` object.\n    - This object was, despite its name, never intended for public consumption.\n      Its removal _may_ affect those who do not use it directly, for example, if another library you\n      use relies on the object.\n- Remove the `ethereum.autoRefreshOnNetworkChange` property.\n    - Consumers can still set this property on the provider, it just won't do anything.\n- Deprecate the `web3.currentProvider` method.\n    - Use [@metamask/detect-provider](https://github.com/MetaMask/detect-provider) to detect the\n      current provider.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["328",{"pageContent":"Replace window.web3\n\n:::caution Pages no longer reload on chain changes\nSince we removed `window.web3`, MetaMask no longer automatically reloads the page on chain/network changes.\n\nPlease see [Handling the removal of `ethereum.autoRefreshOnNetworkChange`](#handle-the-removal-of-ethereumautorefreshonnetworkchange)\nfor details.\n:::\n\nFor historical reasons, MetaMask injected [`web3@0.20.7`](https://github.com/ethereum/web3.js/tree/0.20.7) into all web pages.\nThat version of `web3` is deprecated, [has known security issues](https://github.com/ethereum/web3.js/issues/3065), and is no longer maintained by the [web3.js](https://github.com/ethereum/web3.js/) team.\nTherefore, we decided to remove this library.\n\nIf your website relied on our `window.web3` object, you have to migrate.\nPlease continue reading to understand your options.\nSome are as simple as a one-line change.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["329",{"pageContent":"If your website relied on our `window.web3` object, you have to migrate.\nPlease continue reading to understand your options.\nSome are as simple as a one-line change.\n\n:::tip\nRegardless of how you choose to migrate, you may want to read the `web3@0.20.7` documentation, which\nyou can find [here](https://github.com/ethereum/web3.js/blob/0.20.7/DOCUMENTATION.md).\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["330",{"pageContent":"Use window.ethereum directly\n\nFor many web3 sites, the API provided by `window.ethereum` is sufficient.\nMuch of the `web3` API simply maps to RPC methods, all of which can be requested using\n[`ethereum.request()`](../reference/provider-api.md#windowethereumrequestargs).\nFor example, here are a couple of actions performed using first `window.web3`, and then their\nequivalents using `window.ethereum`.\n\n```javascript\n/**\n * Getting Accounts\n */\n\n// window.web3\nconst accounts = web3.eth.accounts;\n\n// window.ethereum\nconst accounts = await ethereum.request({ method: 'eth_accounts' });\n\n/**\n * Sending a Transaction\n */\n\n// window.web3\nweb3.eth.sendTransaction(\n  {\n    to: '0x...',\n    'from': '0x...',\n    value: '0x...',\n    // And so on...\n  },\n  (error, result) => {\n    if (error) {\n      return console.error(error);\n    }\n    // Handle the result\n    console.log(result);\n  }\n);","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["331",{"pageContent":"// window.ethereum\ntry {\n  const transactionHash = await ethereum.request({\n    method: 'eth_sendTransaction',\n    params: [\n      {\n        to: '0x...',\n        'from': '0x...',\n        value: '0x...',\n        // And so on...\n      },\n    ],\n  });\n  // Handle the result\n  console.log(transactionHash);\n} catch (error) {\n  console.error(error);\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["332",{"pageContent":"Use an updated convenience library\n\nIf you decide that you need a convenience library, you have to convert your usage of `window.web3`\nto an updated convenience library.\nWe recommend [`ethers`](https://npmjs.com/package/ethers) ([documentation](https://docs.ethers.io/)).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["333",{"pageContent":"Use @metamask/legacy-web3\n\n:::caution\nWe strongly recommend that you consider one of the other two migration paths before resorting to this one.\nIt is not future-proof, and we will not add new features to it.\n:::\n\nFinally, if you just want your web3 site to continue to work, we created\n[`@metamask/legacy-web3`](https://npmjs.com/package/@metamask/legacy-web3).\nThis package is a drop-in replacement for our `window.web3` that you can add to your website even\nbefore remove `window.web3` on all platforms.\n\n`@metamask/legacy-web3` should work exactly like our injected `window.web3`, including by refreshing\nthe page on chain/network changes, but _we cannot guarantee that it works perfectly_.\nWe will not fix any future incompatibilities between `web3@0.20.7` and MetaMask itself, nor will we\nfix any bugs in `web3@0.20.7` itself.\n\nFor installation and usage instructions, please see the\n[npm listing](https://npmjs.com/package/@metamask/legacy-web3).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["334",{"pageContent":"Use the MetaMask legacy Web3 extension\n\nWe created the [**MetaMask Legacy Web3 Extension**](https://github.com/MetaMask/legacy-web3-extension)\nfor any users of websites that still expect `window.web3` to be injected.\nIf you install this extension alongside the regular MetaMask wallet extension, websites that rely on\nour old window.web3 API should start working again.\n\nAs with the regular extension, it’s critical that you only install from the official browser\nextension stores.\nPlease follow the relevant link below to install the Legacy Web3 extension in your browser:\n\n- [Edge](https://microsoftedge.microsoft.com/addons/detail/metamask-legacy-web3/obkfjbjkiofoponpkmphnpaaadebfloh?hl=en-US)\n- [Firefox](https://addons.mozilla.org/en-US/firefox/addon/metamask-legacy-web3/)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["335",{"pageContent":"Migrate to the new provider API\n\n### Handle eth_chainId return values\n\nThe `eth_chainId` RPC method now returns correctly formatted values, e.g. `0x1` and `0x2`, instead\nof _incorrectly_ formatted values, e.g. `0x01` and `0x02`.\nMetaMask's implementation of `eth_chainId` used to return 0-padded values for the\n[default Ethereum chains](../get-started/detect-network.md#chain-ids) _except_ Kovan.\nIf you expect 0-padded chain ID values from `eth_chainId`, make sure to update your code to expect\nthe correct format instead.\n\nFor more details on chain IDs and how to handle them, see the\n[`chainChanged` event](../reference/provider-api.md#chainchanged).\n\n### Handle the removal of chainIdChanged\n\n`chainIdChanged` is a typo of `chainChanged`.\nTo migrate, simply listen for `chainChanged` instead:\n\n```javascript\n// Instead of this:\nethereum.on('chainIdChanged', (chainId) => {\n  /* handle the chainId */\n});\n\n// Do this:\nethereum.on('chainChanged', (chainId) => {\n  /* handle the chainId */\n});\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["336",{"pageContent":"Handle the removal of isEnabled() and isApproved()\n\nBefore the new provider API shipped, we added the `_metamask.isEnabled` and `_metamask.isApproved`\nmethods to enable web3 sites to check if they have\n[access to the user's accounts](../reference/rpc-api.md#eth_requestaccounts).\n`isEnabled` and `isApproved` functioned identically, except that `isApproved` was `async`.\nThese methods were arguably never that useful, and they became completely redundant with the\nintroduction of MetaMask's [permission system](../reference/rpc-api.md#restricted-methods).\n\nWe recommend that you check for account access in the following ways:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["337",{"pageContent":"We recommend that you check for account access in the following ways:\n\n1. You can call the [`wallet_getPermissions`](../reference/rpc-api.md#wallet_getpermissions) RPC method\n    and check for the `eth_accounts` permission.\n1. You can call the `eth_accounts` RPC method and the\n    [`ethereum._metamask.isUnlocked()`](../reference/provider-api.md#windowethereum_metamaskisunlocked) method.\n    - MetaMask has to be unlocked before you can access the user's accounts.\n      If the array returned by `eth_accounts` is empty, check if MetaMask is locked using `isUnlocked()`.\n    - If MetaMask is unlocked and you still aren't receiving any accounts, it's time to request\n      accounts using the [`eth_requestAccounts` RPC method](../reference/rpc-api.md#eth_requestaccounts).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["338",{"pageContent":"Handle the removal of ethereum.publicConfigStore\n\nHow to handle this change depends on if and how you relied on the `publicConfigStore`.\nWe have seen examples of listening for provider state changes the `publicConfigStore` `data` event,\nand accessing the `publicConfigStore` internal state directly.\n\nWe recommend that you search your code and its dependencies for references to `publicConfigStore`.\nIf you find any references, you should understand what it's being used for, and migrate to\n[one of the recommended provider APIs](../reference/provider-api.md) instead.\nIf you don't find any references, you should not be affected by this change.\n\nAlthough it is possible that your dependencies use the `publicConfigStore`, we have confirmed that\nthe latest versions (as of January 2021) of the following common libraries were not affected by this\nchange:\n\n- `ethers`\n- `web3` (web3.js)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["339",{"pageContent":"Handle the removal of ethereum.autoRefreshOnNetworkChange\n\nThe `ethereum.autoRefreshOnNetworkChange` was a mutable boolean property used to control whether\nMetaMask reloaded the page on chain/network changes.\nHowever, it only caused the page to be reloaded if the script access a property on `window.web3`.\nTherefore, this property was removed along with `window.web3`.\n\nDespite this, we still recommend reloading the page on chain changes.\nSome convenience libraries, such as [ethers](https://www.npmjs.com/package/ethers), will continue to\nreload the page by default.\nIf you don't use such a convenience library, you'll have to reload the page manually.\nPlease see the [`chainChanged` event](../reference/provider-api.md#chainchanged) for details.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/migrate-api.md"}}],["340",{"pageContent":"---\ndescription: MetaMask Ethereum JSON-RPC API reference\n---\n\n# JSON-RPC API\n\nMetaMask uses the [`window.ethereum.request(args)`](provider-api.md#windowethereumrequestargs)\nprovider method to wrap a JSON-RPC API.\nThe API contains standard Ethereum JSON-RPC API methods and MetaMask-specific methods.\n\n:::tip MetaMask API playground\nThe RPC methods are documented in the interactive\n[MetaMask JSON-RPC API Playground](https://metamask.github.io/api-playground/api-documentation/).\n:::\n\nMethods in the API playground may have the following tags:\n\n- **MetaMask** - These methods behave in ways specific to MetaMask, and may or may not be supported\n  by other wallets.\n  Some of these methods are documented in more detail on this page.\n- **Restricted** - These methods are [restricted](#restricted-methods), which require requesting\n  permission using [`wallet_requestPermissions`](#wallet_requestpermissions).\n- **Mobile** - These methods are only available on MetaMask Mobile.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["341",{"pageContent":"For more information on the standard Ethereum RPC methods, see the\n[Ethereum wiki](https://eth.wiki/json-rpc/API#json-rpc-methods).\n\n:::note\nAll RPC method requests can return errors.\nMake sure to handle errors for every call to\n[`window.ethereum.request(args)`](provider-api.md#windowethereumrequestargs).\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["342",{"pageContent":"Restricted methods\n\nMetaMask introduced web3 wallet permissions in [EIP-2255](https://eips.ethereum.org/EIPS/eip-2255).\nIn this permissions system, each RPC method is restricted or unrestricted.\nIf a method is restricted, a dapp must request permission to call it using\n[`wallet_requestPermssions`](#wallet_requestpermissions).\nUnder the hood, permissions are plain, JSON-compatible objects, with fields that are mostly used\ninternally by MetaMask.\n\nOutside of [Snaps restricted methods](../../snaps/reference/rpc-api#restricted-methods), the only\nrestricted method is\n[`eth_accounts`](https://metamask.github.io/api-playground/api-documentation/#eth_accounts), which\nallows you to access the user's Ethereum accounts.\nMore restricted methods will be added in the future.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["343",{"pageContent":"Unrestricted methods\n\nUnrestricted methods have no corresponding permission, but they might still rely on permissions to\nsucceed (for example, the signing methods require calling the restricted\n[`eth_accounts`](https://metamask.github.io/api-playground/api-documentation/#eth_accounts) method),\nor they might require confirmation by the user (for example,\n[`wallet_addEthereumChain`](#wallet_addethereumchain)).\n\nThe following are some MetaMask-specific unrestricted methods.\nFor the full list of MetaMask JSON-RPC API methods, see the\n[API playground](https://metamask.github.io/api-playground/api-documentation/).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["344",{"pageContent":"eth_requestAccounts\n\nRequests that the user provide an Ethereum address to be identified by.\nUse this method to [access a user's accounts](../get-started/access-accounts.md).\n\nThis method is specified by [EIP-1102](https://eips.ethereum.org/EIPS/eip-1102).\n\n:::info\nInternally, this method calls [`wallet_requestPermissions`](#wallet_requestpermissions) for\npermission to call [`eth_accounts`](https://metamask.github.io/api-playground/api-documentation/#eth_accounts).\n:::\n\n#### Returns\n\nIf the user accepts the request, this method returns an array of a single, hexadecimal Ethereum\naddress string.\nIf they reject the request, this method rejects with a `4001` error.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["345",{"pageContent":"Returns\n\nIf the user accepts the request, this method returns an array of a single, hexadecimal Ethereum\naddress string.\nIf they reject the request, this method rejects with a `4001` error.\n\n#### Example\n\n```javascript\ndocument.getElementById('connectButton', connect);\n\nfunction connect() {\n  ethereum\n    .request({ method: 'eth_requestAccounts' })\n    .then(handleAccountsChanged)\n    .catch((error) => {\n      if (error.code === 4001) {\n        // EIP-1193 userRejectedRequest error\n        console.log('Please connect to MetaMask.');\n      } else {\n        console.error(error);\n      }\n    });\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["346",{"pageContent":"wallet_getPermissions\n\nGets the caller's current [permissions](#restricted-methods).\n\n:::note\nThis method is not yet available on MetaMask Mobile.\n:::\n\n#### Returns\n\nAn array of the caller's permission objects.\nIf the caller has no permissions, the array is empty.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["347",{"pageContent":"wallet_requestPermissions\n\nRequests [permissions](#restricted-methods) from the user.\n\nThe request causes a MetaMask popup to appear.\nYou should only request permissions in response to a direct user action, such as a button click.\n\n:::note\nThis method is not yet available on MetaMask Mobile.\n:::\n\n#### Parameters\n\nAn array containing the requested permission objects.\n\n#### Returns\n\nAn array of the caller's permission objects.\nIf the user denies the request, a `4001` error is returned.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["348",{"pageContent":"Parameters\n\nAn array containing the requested permission objects.\n\n#### Returns\n\nAn array of the caller's permission objects.\nIf the user denies the request, a `4001` error is returned.\n\n#### Example\n\n```javascript\ndocument.getElementById('requestPermissionsButton', requestPermissions);\n\nfunction requestPermissions() {\n  ethereum\n    .request({\n      method: 'wallet_requestPermissions',\n      params: [{ eth_accounts: {} }],\n    })\n    .then((permissions) => {\n      const accountsPermission = permissions.find(\n        (permission) => permission.parentCapability === 'eth_accounts'\n      );\n      if (accountsPermission) {\n        console.log('eth_accounts permission successfully requested!');\n      }\n    })\n    .catch((error) => {\n      if (error.code === 4001) {\n        // EIP-1193 userRejectedRequest error\n        console.log('Permissions needed to continue.');\n      } else {\n        console.error(error);\n      }\n    });\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["349",{"pageContent":"wallet_addEthereumChain\n\nCreates a confirmation asking the user to add the specified chain to MetaMask.\nThe user may choose to switch to the chain once it has been added.\n\nYou should only call this method in response to a direct user action, such as a button click.\n\nMetaMask validates the parameters for this method, and rejects the request if any parameter is\nincorrectly formatted.\nMetaMask also rejects the request if any of the following occurs:\n\n- The RPC endpoint doesn't respond to RPC calls.\n  :::note\n  Calls are made from the extension's background page, not the foreground page.\n  If you use an origin allowlist, they're blocked.\n  :::\n- The RPC endpoint returns a different chain ID when\n  [`eth_chainId`](https://metamask.github.io/api-playground/api-documentation/#eth_chainId) is called.\n- The chain ID corresponds to any default MetaMask chains.\n\nThis method is specified by [EIP-3085](https://eips.ethereum.org/EIPS/eip-3085).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["350",{"pageContent":"Parameters\n\nAn array containing an object containing the following metadata about the chain to be added to MetaMask:\n\n- `chainId` - The chain ID as a `0x`-prefixed hexadecimal string.\n- `chainName` - The name of the chain.\n- `nativeCurrency` - An object containing:\n  - `name` - The name of the currency.\n  - `symbol` - The symbol of the currency, as a 2-6 character string.\n  - `decimals` - The number of decimals of the currency.\n    Currently only accepts `18`.\n- `rpcUrls` - An array of RPC URL strings.\n  At least one item is required, and only the first item is used.\n- `blockExplorerUrls` (optional) - An array of block explorer URL strings.\n  At least one item is required, and only the first item is used.\n- `iconUrls` (optional, currently ignored) - An array of icon URL strings.\n\n#### Returns\n\n`null` if the request was successful, and an error otherwise.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["351",{"pageContent":"Returns\n\n`null` if the request was successful, and an error otherwise.\n\n#### Example\n\nWe recommend using this method with [`wallet_addEthereumChain`](#wallet_addethereumchain):\n\n```javascript\ntry {\n  await ethereum.request({\n    method: 'wallet_switchEthereumChain',\n    params: [{ chainId: '0xf00' }],\n  });\n} catch (switchError) {\n  // This error code indicates that the chain has not been added to MetaMask.\n  if (switchError.code === 4902) {\n    try {\n      await ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: '0xf00',\n            chainName: '...',\n            rpcUrls: ['https://...'] /* ... */,\n          },\n        ],\n      });\n    } catch (addError) {\n      // handle \"add\" error\n    }\n  }\n  // handle other \"switch\" errors\n}\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["352",{"pageContent":"wallet_switchEthereumChain\n\nCreates a confirmation asking the user to switch to the chain with the specified chain ID.\n\nYou should only call this method in response to a direct user action, such as a button click.\n\nMetaMask rejects the request if any of the following occurs:\n\n- The chain ID is malformed.\n- The chain with the specified chain ID hasn't been added to MetaMask.\n\nThis method is specified by [EIP-3326](https://ethereum-magicians.org/t/eip-3326-wallet-switchethereumchain).\n\n#### Parameters\n\nAn array containing an object containing `chainId`, the chain ID as a `0x`-prefixed hexadecimal string.\n\n#### Returns\n\n`null` if the request was successful, and an error otherwise.\n\nIf the error code is `4902`, the requested chain hasn't been added by MetaMask, and you must request\nto add it using [`wallet_addEthereumChain`](#wallet_addethereumchain).\n\n#### Example\n\nSee the [`wallet_addEthereumChain`](#wallet_addethereumchain) example.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["353",{"pageContent":"wallet_registerOnboarding\n\nRegisters the requesting site with MetaMask as the initiator of onboarding, enabling MetaMask to\nredirect the user back to the site after onboarding has completed.\n\nThis method is intended to be called after MetaMask has been installed, but before the MetaMask\nonboarding has completed.\n\nInstead of calling this method directly, you should\n[use the MetaMask onboarding library](../how-to/use-onboarding-library.md).\n\n#### Returns\n\n`true` if the request was successful, `false` otherwise.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["354",{"pageContent":"wallet_watchAsset\n\nRequests that the user track the specified token in MetaMask.\n\nMost Ethereum wallets support some set of tokens, usually from a centrally curated registry of tokens.\nThis method enables dapp developers to ask their users to track tokens in their wallets, at runtime.\nOnce added, the token is indistinguishable from those added using legacy methods, such as a\ncentralized registry.\n\nThis method is specified by [EIP-747](https://eips.ethereum.org/EIPS/eip-747).\n\n#### Parameters\n\nAn object containing the following metadata of the token to watch:\n\n- `type` - Currently only supports `ERC20`.\n- `options` - An object containing:\n  - `address` - The address of the token contract.\n  - `symbol` - The symbol of the token, up to 11 characters.\n  - `decimals` - The number of token decimals.\n  - `image` - A URL string of the token logo.\n\n#### Returns\n\n`true` if the token was added, `false` otherwise.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["355",{"pageContent":"Returns\n\n`true` if the token was added, `false` otherwise.\n\n#### Example\n\n```javascript\nethereum\n  .request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: '0xb60e8dd61c5d32be8058bb8eb970870f07233155',\n        symbol: 'FOO',\n        decimals: 18,\n        image: 'https://foo.io/token-image.svg',\n      },\n    },\n  })\n  .then((success) => {\n    if (success) {\n      console.log('FOO successfully added to wallet!');\n    } else {\n      throw new Error('Something went wrong.');\n    }\n  })\n  .catch(console.error);\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["356",{"pageContent":"wallet_scanQRCode\n\nRequests that the user scan a QR code using their device camera.\n\nMetaMask previously introduced this feature in [EIP-945](https://github.com/ethereum/EIPs/issues/945).\nThe functionality was temporarily removed before being re-introduced as this RPC method.\n\n:::note\nThis method is only available on MetaMask Mobile.\n:::\n\n#### Parameters\n\nAn array containing an optional regular expression (regex) string for matching arbitrary QR code strings.\n\n#### Returns\n\nA string corresponding to the scanned QR code.\nIf a regex string is provided, the resulting string matches it.\nIf no regex string is provided, the resulting string matches an Ethereum address.\nIf neither condition is met, the method returns an error.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["357",{"pageContent":"Example\n\n```javascript\nethereum\n  .request({\n    method: 'wallet_scanQRCode',\n    // The regex string must be valid input to the RegExp constructor, if provided\n    params: ['\\\\D'],\n  })\n  .then((result) => {\n    console.log(result);\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/reference/rpc-api.md"}}],["358",{"pageContent":"---\ndescription: Sign data using eth_signTypedData_v4 and personal_sign.\n---\n\n# Sign data\n\nYou can use the following RPC methods to request cryptographic signatures from users:\n\n- [`eth_signTypedData_v4`](#use-eth_signtypeddata_v4) - Use this method to request the most human-readable\n  signatures that are efficient to process on-chain.\n  We recommend this for most use cases.\n- [`personal_sign`](#use-personal_sign) - Use this method for the easiest way to request human-readable\n  signatures that don't need to be efficiently processed on-chain.\n\nRead more about [the history of the signing methods](../concepts/signing-methods.md).\n\n:::caution\n[`eth_sign`](../concepts/signing-methods.md#eth_sign) is deprecated.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["359",{"pageContent":"Read more about [the history of the signing methods](../concepts/signing-methods.md).\n\n:::caution\n[`eth_sign`](../concepts/signing-methods.md#eth_sign) is deprecated.\n:::\n\n:::note\nMetaMask supports signing transactions using Trezor and Ledger hardware wallets.\nThese wallets only support signing data using `personal_sign`.\nIf you can't log in to a dapp when using a Ledger or Trezor, the dapp might be requesting you to\nsign data using an unsupported method, in which case we recommend using your standard MetaMask account.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["360",{"pageContent":"Use eth_signTypedData_v4\n\n[`eth_signTypedData_v4`](https://metamask.github.io/api-playground/api-documentation/#eth_signTypedData_v4)\nprovides the most human-readable signatures that are efficient to process on-chain.\nIt follows the [EIP-712](https://eips.ethereum.org/EIPS/eip-712) specification to allow users to sign\ntyped structured data that can be verified on-chain.\nIt renders the structured data as usefully as possible to the user (for example, displaying known\naccount names in place of addresses).\n\n<p align=\"center\">\n\n![eth_signTypedData_v4](../assets/signTypedData.png)\n\n</p>\n\nAn `eth_signTypedData_v4` payload uses a standard format of encoding structs, but has a different\nformat for the top-level struct that is signed, which includes some metadata about the verifying\ncontract to provide replay protection of these signatures between different contract instances.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["361",{"pageContent":"We recommend using [`eth-sig-util`](https://github.com/MetaMask/eth-sig-util) to generate and\nvalidate signatures.\nYou can use [`eip712-codegen`](https://github.com/danfinlay/eip712-codegen#readme) to generate most\nof the Solidity required to verify these signatures on-chain.\nIt currently doesn't generate the top-level struct verification code, so you must write that part manually.\nSee\n[this example implementation](https://github.com/delegatable/delegatable-sol/blob/fb34bb259890417285f7185bc6500fb0ab8bf86f/contracts/Delegatable.sol#L80).\n\n:::caution\nSince the top-level struct type's name and the `domain.name` are presented to the user prominently\nin the confirmation, consider your contract name, the top-level struct name, and the struct keys to\nbe a user-facing security interface.\nEnsure your contract is as readable as possible to the user.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["362",{"pageContent":"Example\n\nThe following is an example of using `eth_signTypedData_v4` with MetaMask.\nSee the [live example](https://metamask.github.io/test-dapp/#signTypedDataV4) and\n[test dapp source code](https://github.com/MetaMask/test-dapp).\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript\nsignTypedDataV4Button.addEventListener('click', async function (event) {\n  event.preventDefault();\n\n  // eth_signTypedData_v4 parameters. All of these parameters affect the resulting signature.\n  const msgParams = JSON.stringify({\n    domain: {\n      // This defines the network, in this case, Mainnet.\n      chainId: 1,\n      // Give a user-friendly name to the specific contract you're signing for.\n      name: 'Ether Mail',\n      // Add a verifying contract to make sure you're establishing contracts with the proper entity.\n      verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n      // This identifies the latest version.\n      version: '1',\n    },","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["363",{"pageContent":"// This defines the message you're proposing the user to sign, is dapp-specific, and contains\n    // anything you want. There are no required fields. Be as explicit as possible when building out\n    // the message schema.\n    message: {\n      contents: 'Hello, Bob!',\n      attachedMoneyInEth: 4.2,\n      from: {\n        name: 'Cow',\n        wallets: [\n          '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n          '0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF',\n        ],\n      },\n      to: [\n        {\n          name: 'Bob',\n          wallets: [\n            '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n            '0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57',\n            '0xB0B0b0b0b0b0B000000000000000000000000000',\n          ],\n        },\n      ],\n    },\n    // This refers to the keys of the following types object.\n    primaryType: 'Mail',\n    types: {\n      // This refers to the domain the contract is hosted on.\n      EIP712Domain: [\n        { name: 'name', type: 'string' },","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["364",{"pageContent":"primaryType: 'Mail',\n    types: {\n      // This refers to the domain the contract is hosted on.\n      EIP712Domain: [\n        { name: 'name', type: 'string' },\n        { name: 'version', type: 'string' },\n        { name: 'chainId', type: 'uint256' },\n        { name: 'verifyingContract', type: 'address' },\n      ],\n      // Not an EIP712Domain definition.\n      Group: [\n        { name: 'name', type: 'string' },\n        { name: 'members', type: 'Person[]' },\n      ],\n      // Refer to primaryType.\n      Mail: [\n        { name: 'from', type: 'Person' },\n        { name: 'to', type: 'Person[]' },\n        { name: 'contents', type: 'string' },\n      ],\n      // Not an EIP712Domain definition.\n      Person: [\n        { name: 'name', type: 'string' },\n        { name: 'wallets', type: 'address[]' },\n      ],\n    },\n  });","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["365",{"pageContent":"var from = await web3.eth.getAccounts();\n\n  var params = [from[0], msgParams];\n  var method = 'eth_signTypedData_v4';\n\n  web3.currentProvider.sendAsync(\n    {\n      method,\n      params,\n      from: from[0],\n    },\n    function (err, result) {\n      if (err) return console.dir(err);\n      if (result.error) {\n        alert(result.error.message);\n      }\n      if (result.error) return console.error('ERROR', result);\n      console.log('TYPED SIGNED:' + JSON.stringify(result.result));\n\n      const recovered = sigUtil.recoverTypedSignature_v4({\n        data: JSON.parse(msgParams),\n        sig: result.result,\n      });\n\n      if (\n        ethUtil.toChecksumAddress(recovered) === ethUtil.toChecksumAddress(from)\n      ) {\n        alert('Successfully recovered signer as ' + from);\n      } else {\n        alert(\n          'Failed to verify signer when comparing ' + result + ' to ' + from\n        );\n      }\n    }\n  );\n});","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["366",{"pageContent":"# HTML\n\n```html\n<h3>Sign typed data v4</h3>\n<button type=\"button\" id=\"signTypedDataV4Button\">eth_signTypedData_v4</button>\n```\n\n<!--/tabs-->","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["367",{"pageContent":"Use personal_sign\n\n[`personal_sign`](https://metamask.github.io/api-playground/api-documentation/#personal_sign) is the\neasiest way to request human-readable signatures that don't need to be efficiently processed on-chain.\nIt's often used for signature challenges that are authenticated on a web server, such as\n[Sign-In with Ethereum](https://login.xyz/).\n\n<p align=\"center\">\n\n![personal_sign](../assets/personal_sign.png)\n\n</p>\n\nSome other signers implement `personal_sign` as `eth_sign`, because the Go Ethereum client changed\nthe behavior of their `eth_sign` method.\nBecause MetaMask supports existing applications, MetaMask implements both `personal_sign` and `eth_sign`.\nYou might need to check what method your supported signers use for a given implementation.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["368",{"pageContent":":::caution important\n- Don't use this method to display binary data, because the user wouldn't be able to understand what\n  they're agreeing to.\n- If using this method for a signature challenge, think about what would prevent a phisher from\n  reusing the same challenge and impersonating your site.\n  Add text referring to your domain, or the current time, so the user can easily verify if this\n  challenge is legitimate.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["369",{"pageContent":"Example\n\nThe following is an example of using `personal_sign` with MetaMask.\nSee the [live example](https://metamask.github.io/test-dapp/#personalSign) and\n[test dapp source code](https://github.com/MetaMask/test-dapp).\n\n<!--tabs-->\n\n# JavaScript\n\n```javascript\npersonalSignButton.addEventListener('click', async function (event) {\n  event.preventDefault();\n  const exampleMessage = 'Example `personal_sign` message.';\n  try {\n    const from = accounts[0];\n    // For historical reasons, you must submit the message to sign in hex-encoded UTF-8.\n    // This uses a Node.js-style buffer shim in the browser.\n    const msg = `0x${Buffer.from(exampleMessage, 'utf8').toString('hex')}`;\n    const sign = await ethereum.request({\n      method: 'personal_sign',\n      params: [msg, from, 'Example password'],\n    });\n    personalSignResult.innerHTML = sign;\n    personalSignVerify.disabled = false;\n  } catch (err) {\n    console.error(err);\n    personalSign.innerHTML = `Error: ${err.message}`;\n  }\n});","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["370",{"pageContent":"# HTML\n\n```html\n<h3>Personal sign</h3>\n<button type=\"button\" id=\"personalSignButton\">personal_sign</button>\n```\n\n<!--/tabs-->\n\n`personal_sign` prepends the message with `\\x19Ethereum Signed Message:\\n<length of message>` before\nhashing and signing it.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/how-to/sign-data.md"}}],["371",{"pageContent":"---\ntitle: Create a React dapp with global state\ndescription: Create a multi-component React dapp with global state.\ntoc_max_heading_level: 4\n---\n\n# Create a React dapp with global state\n\nThis tutorial walks you through integrating a React dapp with MetaMask.\nThe dapp has multiple components, so requires managing global state.\nYou'll use the [Vite](https://v3.vitejs.dev/guide) build tool with React and TypeScript to create\nthe dapp.\n\n:::tip\nWe recommend first [creating a React dapp with local state](react-dapp-local-state.md).\nThis tutorial is a follow-up to that tutorial.\n:::\n\nThe [previous tutorial](react-dapp-local-state.md) walks you through creating a dapp that connects\nto MetaMask and handles account, balance, and network changes with a single component.\nIn real world use cases, a dapp might need to respond to state changes in different components.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["372",{"pageContent":"In this tutorial, you'll move that state and its relevant functions into\n[React context](https://react.dev/reference/react/useContext), creating a\n[global state](https://react.dev/learn/reusing-logic-with-custom-hooks#custom-hooks-sharing-logic-between-components)\nso other components and UI can affect it and get MetaMask wallet updates.\n\nThis tutorial also provides a few best practices for a clean code base, since you'll have multiple\ncomponents and a slightly more complex file structure.\n\n:::info Project source code\nYou can see the source code for the\n[starting point](https://github.com/MetaMask/react-dapp-tutorial/tree/global-state-start) and\n[final state](https://github.com/MetaMask/react-dapp-tutorial/tree/global-state-final) of this dapp.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["373",{"pageContent":"Prerequisites\n\n- [Node.js](https://nodejs.org/) version 18+\n- [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) version 9+\n- A text editor (for example, [VS Code](https://code.visualstudio.com/))\n- The [MetaMask extension](https://metamask.io/download) installed\n- Basic knowledge of TypeScript, React and React Hooks","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["374",{"pageContent":"Steps","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["375",{"pageContent":"1. Set up the project\n\nClone the [`react-dapp-tutorial`](https://github.com/MetaMask/react-dapp-tutorial) GitHub repository\non GitHub by running the following command:\n\n```bash\ngit clone https://github.com/MetaMask/react-dapp-tutorial.git\n```\n\nCheckout the `global-state-start` branch:\n\n```bash\ncd react-dapp-tutorial && git checkout global-state-start\n```\n\nInstall the node module dependencies:\n\n```bash\nnpm install","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["376",{"pageContent":"Install the node module dependencies:\n\n```bash\nnpm install\n```\n\nOpen the project in a text editor.\n\n:::note tip\nIf you use VS Code, you can run the command `code .` to open the project.\n:::\n\nThis is a working React dapp, but it's wiped out the code from the previous tutorial's\n[`App.tsx`](https://github.com/MetaMask/react-dapp-tutorial/blob/local-state-final/src/App.tsx) file.  \n\nRun the dapp using the command `npx vite`.\nThe starting point looks like the following:\n\n![](../assets/tutorials/react-dapp/pt2-01.png)\n\nThere are three components, each with static text: navigation (with a logo area and connect button),\ndisplay (main content area), and footer.\nYou'll use the footer to show any MetaMask errors.  \n\nBefore you start, comment out or remove the `border` CSS selector, as it's only used as a visual aid.\nRemove the following line from each component style sheet:\n\n```css title=\"Display.module.css | MetaMaskError.module.css | Navigation.module.css\"\n// border: 1px solid rgb(...);\n```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["377",{"pageContent":"Styling\n\nThis dapp has Vite's typical `App.css` and `index.css` files removed, and uses a modular approach to CSS.\n\nIn the `/src` directory, `App.global.css` contains styles for the entire dapp (not specific to a\nsingle component), and styles you might want to reuse (such as buttons).  \n\nIn the `/src` directory, `App.module.css` contains styles specific to `App.tsx`, your dapp's\ncontainer component.\nIt uses the `appContainer` class, which sets up a\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox) to define the `display` type\n(`flex`) and the `flex-direction` (`column`).   \n\nUsing Flexbox here ensures that any child `div`s are laid out in a single-column layout (vertically).","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["378",{"pageContent":"Using Flexbox here ensures that any child `div`s are laid out in a single-column layout (vertically).  \n\nFinally, the `/src/components` directory has subdirectories for `Display`, `Navigation`, and `MetaMaskError`.\nEach subdirectory contains a corresponding component file and CSS file.\nEach component is a\n[flex-items](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-basics-and-terminology)\nwithin a\n[flex-container](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flexbox-properties),\nstacked in a vertical column with the navigation and footer (`MetaMaskError`) being of fixed height\nand the middle component (`Display`) taking up the remaining vertical space.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["379",{"pageContent":"Optional: Linting with ESLint\n\nThis dapp uses a standard ESLint configuration to keep the code consistent.\nThere are two ways to use ESLint:\n\n1. Run `npm run lint` or `npm run lint:fix` from the command line.\n    The former displays all the linting errors, and the latter updates your code to fix linting\n    errors where possible.\n2. Set up your IDE to show linting errors and automatically fix them on save.\n    For example, in VS Code, you can create or update the file at `.vscode/settings.json` in the\n    root of the project with the following settings:\n\n    ```json title=\"settings.json\"\n    {\n      \"eslint.format.enable\": true,\n      \"eslint.packageManager\": \"npm\",\n      \"editor.codeActionsOnSave\": {\n        \"source.fixAll.eslint\": true\n      },\n      \"eslint.codeActionsOnSave.mode\": \"all\"\n    }\n    ```","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["380",{"pageContent":"Project structure\n\nThe following is a tree representation of the dapp's `/src` directory:\n\n```text\n├── src\n│   ├── assets\n│   ├── components\n│   │   └── Display\n│   │   |   └── index.tsx\n│   │   |   └── Display.module.css\n│   │   |   └── Display.tsx\n│   │   ├── MetaMaskError\n│   │   |   └── index.tsx\n│   │   |   └── MetaMaskError.module.css\n│   │   |   └── MetaMaskError.tsx\n│   │   ├─── Navigation\n│   │   |   └── index.tsx\n│   │   |   └── Navigation.module.css\n│   │   |   └── Navigation.tsx\n│   ├── hooks\n│   │   ├── useMetaMask.tsx\n│   ├── utils\n│   │   └── index.tsx\n├── App.global.css\n├── App.module.css\n├── App.tsx\n├── main.tsx\n├── vite-env.d.ts","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["381",{"pageContent":"Instead of a single component, there's a `src/components` directory with UI and functionality\ndistributed into multiple components.\nYou'll modify the dapp's state in this directory and make it available to the rest of the dapp using\na [context provider](https://react.dev/reference/react/useContext).\nThis provider will sit in the `src/App.tsx` file and wrap the three child components.  \n\nThe child components will have access to the global state and the functions that modify the global state.\nThis ensures that any change to the `wallet` (`address`, `balance`, and `chainId`), or the global\nstate's properties and functions (`hasProvider`, `error`, `errorMessage`, and `isConnecting`) will\nbe accessible by re-rendering those child components.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["382",{"pageContent":"The following graphic shows how the context provider wraps its child components, providing access to\nthe state modifier functions and the actual state itself.\nSince React uses a one-way data flow, any change to the data gets re-rendered in those components automatically.\n\n![](../assets/tutorials/react-dapp/pt2-02.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["383",{"pageContent":"2. Build the context provider\n\nIn this step, you'll create a context called `MetaMaskContext` and a provider component called\n`MetaMaskContextProvider` in the `/src/hooks/useMetaMask.tsx` file.\n\nThis provider component will use similar `useState` and `useEffect` hooks with some changes from\nthe previous tutorial's local state component to make it more DRY (don't repeat yourself).\n\nIt will also have similar `updateWallet`, `connectMetaMask`, and `clearError` functions, all of\nwhich do their part to connect to MetaMask or update the MetaMask state.\n\n`MetaMaskContext` will return a `MetaMaskContext.Provider`, which takes a value of type\n`MetaMaskContextData`, and supplies that to its children.\n\nYou'll export a React hook called `useMetaMask`, which uses your `MetaMaskContext`.\n\nUpdate `/src/hooks/useMetaMask.tsx` with the following:\n\n:::caution Read the comments\nThe following code contains comments describing advanced React patterns and how MetaMask state is managed.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["384",{"pageContent":"Update `/src/hooks/useMetaMask.tsx` with the following:\n\n:::caution Read the comments\nThe following code contains comments describing advanced React patterns and how MetaMask state is managed.\n:::\n\n```tsx title=\"useMetaMask.tsx\"\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useState, useEffect, createContext, PropsWithChildren, useContext, useCallback } from 'react'\n\nimport detectEthereumProvider from '@metamask/detect-provider'\nimport { formatBalance } from '~/utils'\n\ninterface WalletState {\n  accounts: any[]\n  balance: string\n  chainId: string\n}\n\ninterface MetaMaskContextData {\n  wallet: WalletState\n  hasProvider: boolean | null\n  error: boolean\n  errorMessage: string\n  isConnecting: boolean\n  connectMetaMask: () => void\n  clearError: () => void\n}\n\nconst disconnectedState: WalletState = { accounts: [], balance: '', chainId: '' }\n\nconst MetaMaskContext = createContext<MetaMaskContextData>({} as MetaMaskContextData)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["385",{"pageContent":"const disconnectedState: WalletState = { accounts: [], balance: '', chainId: '' }\n\nconst MetaMaskContext = createContext<MetaMaskContextData>({} as MetaMaskContextData)\n\nexport const MetaMaskContextProvider = ({ children }: PropsWithChildren) => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n\n  const [isConnecting, setIsConnecting] = useState(false)\n\n  const [errorMessage, setErrorMessage] = useState('')\n  const clearError = () => setErrorMessage('')\n\n  const [wallet, setWallet] = useState(disconnectedState)\n  // useCallback ensures that you don't uselessly recreate the _updateWallet function on every render\n  const _updateWallet = useCallback(async (providedAccounts?: any) => {\n    const accounts = providedAccounts || await window.ethereum.request(\n      { method: 'eth_accounts' },\n    )\n\n    if (accounts.length === 0) {\n      // If there are no accounts, then the user is disconnected\n      setWallet(disconnectedState)\n      return\n    }","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["386",{"pageContent":"if (accounts.length === 0) {\n      // If there are no accounts, then the user is disconnected\n      setWallet(disconnectedState)\n      return\n    }\n\n    const balance = formatBalance(await window.ethereum.request({\n      method: 'eth_getBalance',\n      params: [accounts[0], 'latest'],\n    }))\n    const chainId = await window.ethereum.request({\n      method: 'eth_chainId',\n    })\n\n    setWallet({ accounts, balance, chainId })\n  }, [])\n\n  const updateWalletAndAccounts = useCallback(() => _updateWallet(), [_updateWallet])\n  const updateWallet = useCallback((accounts: any) => _updateWallet(accounts), [_updateWallet])","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["387",{"pageContent":"const updateWalletAndAccounts = useCallback(() => _updateWallet(), [_updateWallet])\n  const updateWallet = useCallback((accounts: any) => _updateWallet(accounts), [_updateWallet])\n\n  /**\n   * This logic checks if MetaMask is installed. If it is, some event handlers are set up\n   * to update the wallet state when MetaMask changes. The function returned by useEffect\n   * is used as a \"cleanup\": it removes the event handlers whenever the MetaMaskProvider\n   * is unmounted.\n   */\n  useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))\n\n      if (provider) {\n        updateWalletAndAccounts()\n        window.ethereum.on('accountsChanged', updateWallet)\n        window.ethereum.on('chainChanged', updateWalletAndAccounts)\n      }\n    }\n\n    getProvider()","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["388",{"pageContent":"getProvider()\n\n    return () => {\n      window.ethereum?.removeListener('accountsChanged', updateWallet)\n      window.ethereum?.removeListener('chainChanged', updateWalletAndAccounts)\n    }\n  }, [updateWallet, updateWalletAndAccounts])\n\n  const connectMetaMask = async () => {\n    setIsConnecting(true)\n\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      })\n      clearError()\n      updateWallet(accounts)\n    } catch(err: any) {\n      setErrorMessage(err.message)\n    }\n    setIsConnecting(false)\n  }\n\n  return (\n    <MetaMaskContext.Provider\n      value={{\n        wallet,\n        hasProvider,\n        error: !!errorMessage,\n        errorMessage,\n        isConnecting,\n        connectMetaMask,\n        clearError,\n      }}\n    >\n      {children}\n    </MetaMaskContext.Provider>\n  )\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["389",{"pageContent":"export const useMetaMask = () => {\n  const context = useContext(MetaMaskContext)\n  if (context === undefined) {\n    throw new Error('useMetaMask must be used within a \"MetaMaskContextProvider\"')\n  }\n  return context\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["390",{"pageContent":"With this context provider in place, you can update `/src/App.tsx` to include the provider and wrap\nit around the three components.  \n\nNotice the use of `~/utils` to import the utility functions.  \n\n:::note vite-tsconfig-paths\nThis dapp is configured to use `vite-tsconfig-paths`, allowing it to load modules with locations\nspecified by the `compilerOptions.paths` object in `tsconfig.json`.\nThe path corresponding to the `./src/*` directory is represented by the `~/*` symbol.\nThere's also a reference to `./tsconfig.node.json` in the `reference`'s array objects that correspond\nto `path`.\n\n`vite.config.ts` imports `tsconfigPaths` from `vite-tsconfig-paths` and adds it to the `plugins` array.  \n\nSee more information about [`vite-tsconfig-paths`](https://github.com/aleclarson/vite-tsconfig-paths).\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["391",{"pageContent":"3. Wrap components with the context provider\n\nIn this step, you'll import the `MetaMaskContextProvider` in `/src/App.tsx` and wrap that component\naround the existing `Display`, `Navigation`, and `MetaMaskError` components.\n\nUpdate `/src/App.tsx` to the following:\n\n```tsx  title=\"App.tsx\"\nimport './App.global.css'\nimport styles from './App.module.css'\n\nimport { Navigation } from './components/Navigation'\nimport { Display } from './components/Display'\nimport { MetaMaskError } from './components/MetaMaskError'\nimport { MetaMaskContextProvider } from './hooks/useMetaMask'\n\nexport const App = () => {\n\n  return (\n    <MetaMaskContextProvider>\n      <div className={styles.appContainer}>\n        <Navigation />\n        <Display />\n        <MetaMaskError />\n      </div>\n    </MetaMaskContextProvider>\n  )\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["392",{"pageContent":"With `App.tsx` updated, you can update the `Display`, `Navigation`, and `MetaMaskError` components,\neach of which will use the `useMetaMask` hook to display the state or invoke functions that modify state.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["393",{"pageContent":"4. Connect to MetaMask in the navigation\n\nThe `Navigation` component will connect to MetaMask using conditional rendering to show an\n**Install MetaMask** or **Connect MetaMask** button or, once connected, display your wallet address\nin a hypertext link that connects to [Etherscan](https://etherscan.io).  \n\nUpdate `/src/components/Navigation/Navigation.tsx` to the following:\n\n```tsx  title=\"Navigation.tsx\"\nimport { useMetaMask } from '~/hooks/useMetaMask'\nimport { formatAddress } from '~/utils'\nimport styles from './Navigation.module.css'\n\nexport const Navigation = () => {\n\n  const { wallet, hasProvider, isConnecting, connectMetaMask } = useMetaMask()","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["394",{"pageContent":"return (\n    <div className={styles.navigation}>\n      <div className={styles.flexContainer}>\n        <div className={styles.leftNav}>Vite + React & MetaMask</div>\n        <div className={styles.rightNav}>\n          {!hasProvider &&\n            <a href=\"https://metamask.io\" target=\"_blank\">\n              Install MetaMask\n            </a>\n          }\n          {window.ethereum?.isMetaMask && wallet.accounts.length < 1 &&\n            <button disabled={isConnecting} onClick={connectMetaMask}>\n              Connect MetaMask\n            </button>\n          }\n          {hasProvider && wallet.accounts.length > 0 &&\n            <a\n              className=\"text_link tooltip-bottom\"\n              href={`https://etherscan.io/address/${wallet}`}\n              target=\"_blank\"\n              data-tooltip= \"Open in Block Explorer\"\n            >\n              {formatAddress(wallet.accounts[0])}\n            </a>\n          }\n        </div>\n      </div>\n    </div>\n  )\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["395",{"pageContent":"Notice how `useMetaMask` de-structures its return value to get the items within `MetaMaskContextData`:\n\n```ts\nconst { wallet, hasProvider, isConnecting, connectMetaMask } = useMetaMask()\n```\n\nAlso, the `formatAddress` function formats the wallet address for display purposes:\n\n```ts\n{formatAddress(wallet.accounts[0])}\n```\n\nThis function doesn't exist in the `@utils` file yet, so you'll need to add it.\nUpdate `/src/utils/index.tsx` to the following:\n\n```ts title=\"utils/index.ts\"\nexport const formatBalance = (rawBalance: string) => {\n  const balance = (parseInt(rawBalance) / 1000000000000000000).toFixed(2)\n  return balance\n}\n\nexport const formatChainAsNum = (chainIdHex: string) => {\n  const chainIdNum = parseInt(chainIdHex)\n  return chainIdNum\n}\n\nexport const formatAddress = (addr: string) => {\n  return `${addr.substring(0, 8)}...`\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["396",{"pageContent":"This should address any build errors in your `Navigation` component.  \n\nOther than using the new styling, the only thing this dapp has done differently than the local-state\ntutorial is display the user's `address` formatted inside a link once they're connected.\nNow that you have a place for connecting and showing the address, you could build out an entire\nprofile component (side quest).\n\n![](../assets/tutorials/react-dapp/pt2-03.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["397",{"pageContent":"5. Display MetaMask data\n\nIn the `Display` component, you won't call any functions that modify state; you'll read from\n`MetaMaskData`, a simple update.\n\nUpdate `/src/components/Display/Display.tsx` to the following:\n\n```tsx title=\"Display.tsx\"\nimport { useMetaMask } from '~/hooks/useMetaMask'\nimport { formatChainAsNum } from '~/utils'\nimport styles from './Display.module.css'\n\nexport const Display = () => {\n\n  const { wallet } = useMetaMask()\n\n  return (\n    <div className={styles.display}>\n      {wallet.accounts.length > 0 &&\n        <>\n          <div>Wallet Accounts: {wallet.accounts[0]}</div>\n          <div>Wallet Balance: {wallet.balance}</div>\n          <div>Hex ChainId: {wallet.chainId}</div>\n          <div>Numeric ChainId: {formatChainAsNum(wallet.chainId)}</div>\n        </>\n      }\n    </div>\n  )\n}\n```\n\nNotice how `useMetaMask` de-structures its return value to get only the `wallet` data:\n\n```ts\nconst { wallet } = useMetaMask()","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["398",{"pageContent":"Notice how `useMetaMask` de-structures its return value to get only the `wallet` data:\n\n```ts\nconst { wallet } = useMetaMask()\n```\n\nAt this point, you can display `account`, `balance`, and `chainId` in the `Display` component:\n\n![](../assets/tutorials/react-dapp/pt2-04.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["399",{"pageContent":"6. Show MetaMask errors in the footer\n\nIf MetaMask errors or the user rejects a connection, you can display that error in the footer, or\n`MetaMaskError` component.\n\nUpdate `/src/components/MetaMaskError/MetaMaskError.tsx` to the following:\n\n```tsx title=\"MetaMaskError.tsx\"\nimport { useMetaMask } from '~/hooks/useMetaMask'\nimport styles from './MetaMaskError.module.css'\n\nexport const MetaMaskError = () => {\n  const { error, errorMessage, clearError } = useMetaMask()\n  return (\n    <div className={styles.metaMaskError} style={\n      error ? { backgroundColor: 'brown' } : {}\n    }>\n      { error && (\n        <div onClick={clearError}>\n          <strong>Error:</strong> {errorMessage}\n        </div>\n      )\n      }\n    </div>\n  )\n}\n```\n\nNotice how `useMetaMask` de-structures its return value to get only the `error`, `errorMessage`, and\n`clearError` data:\n\n```ts\nconst { error, errorMessage, clearError } = useMetaMask()","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["400",{"pageContent":"Notice how `useMetaMask` de-structures its return value to get only the `error`, `errorMessage`, and\n`clearError` data:\n\n```ts\nconst { error, errorMessage, clearError } = useMetaMask()\n```\n\nWhen you generate an error by cancelling the connection to MetaMask, this shows up in the footer.\nThe background temporarily turns a dark red color:\n\n![](../assets/tutorials/react-dapp/pt2-05.png)\n\nIn this tutorial's dapp, you can dismiss any MetaMask error displayed in the footer by selecting it.\nIn a real-world dapp, the best UI/UX for error dismissing would be a component that displays in a\nmodal or overlay and provides an obvious dismiss button.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["401",{"pageContent":"Conclusion\n\nYou've successfully converted a single component dapp with local state to a multiple component dapp\nwith global state, using React context and provider.\nYou can modify the dapp's global state using functions and data that, when used anywhere in the dapp,\nwill show up-to-date data associated with your MetaMask wallet.\n\nYou can see the [source code](https://github.com/MetaMask/react-dapp-tutorial/tree/global-state-final)\nfor the final state of this dapp tutorial.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-global-state.md"}}],["402",{"pageContent":"---\ntitle: Create a React dapp with local state\ndescription: Create a single component React dapp with local state.\ntoc_max_heading_level: 4\n---\n\n# Create a React dapp with local state\n\nThis tutorial walks you through integrating a simple React dapp with MetaMask.\nThe dapp has a single component, so only requires managing local state.\nYou'll use the [Vite](https://v3.vitejs.dev/guide) build tool with React and TypeScript to create\nthe dapp.\n\nThis tutorial builds up your knowledge of working with MetaMask incrementally; this means you won't\nimplement the best solution at first, but you'll experiment with the MetaMask API and continually\nwork towards better solutions.\n\n:::tip Why React?\nReact is familiar to most web developers, and it makes it easy to work with state management and\nbuild with components that need updating.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["403",{"pageContent":":::tip Why React?\nReact is familiar to most web developers, and it makes it easy to work with state management and\nbuild with components that need updating.\n:::\n\n:::info Project source code\nYou can see the source code for the\n[starting point](https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-start) and\n[final state](https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-final) of this dapp.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["404",{"pageContent":"Prerequisites\n\n- [Node.js](https://nodejs.org/) version 18+\n- [npm](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) version 9+\n- A text editor (for example, [VS Code](https://code.visualstudio.com/))\n- The [MetaMask extension](https://metamask.io/download) installed\n- Basic knowledge of JavaScript and React","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["405",{"pageContent":"Steps","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["406",{"pageContent":"1. Set up the project\n\nSet up a new project using Vite, React, and TypeScript, by running the following command:\n\n```bash\nnpm create vite@latest mm-dapp-react -- --template react-ts\n```\n\nInstall the node module dependencies:\n\n```bash\ncd mm-dapp-react && npm install\n```\n\n:::note\nYou can use the `npx vite` or `npm run dev` command to run your project at any time if the\ndevelopment server has been stopped.\n:::\n\nOpen the project in a text editor.\nTo start with a blank slate, replace the code in `src/App.tsx` with the following:\n\n```tsx title=\"App.tsx\"\nimport './App.css'\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <button>Connect MetaMask</button>\n    </div>\n  )\n}\n\nexport default App\n```\n\nYou'll need to get around type-checking by defining the `window.ethereum` object as `any`.\nUpdate `src/vite-env.d.ts` to the following:\n\n```tsx title=\"vite-env.d.ts\"\n/// <reference types=\"vite/client\" />\n\ninterface Window {\n  ethereum: any;\n}","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["407",{"pageContent":"Also, update `src/App.css` to the following:\n\n```css title=\"App.css\"\n.App {\n  display: flex;\n  flex-direction: column;\n  place-items: center;\n  min-width: 100vw;\n  min-height: 100vh;\n}\nbutton {\n  margin-top: 0.5em;\n}\n```\n\nAt this point, you have a working React app with some basic styling and a button that you'll use to\nconnect to MetaMask.\n\n![Initial App State with Button](../assets/tutorials/react-dapp/pt1-01.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["408",{"pageContent":"2. Detect MetaMask\n\nNext, detect the injected provider that browser extension wallets use.\n\nAdd code to conditionally render a **Connect MetaMask** button in your component by updating\n`src/App.tsx` to the following:\n\n```tsx title=\"App.tsx\"\nimport './App.css'\nlet injectedProvider = false\n\nif (typeof window.ethereum !== 'undefined') {\n  injectedProvider = true\n  console.log(window.ethereum)\n}\n\nconst isMetaMask = injectedProvider ? window.ethereum.isMetaMask : false\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <h2>Injected Provider { injectedProvider ? 'DOES' : 'DOES NOT'} Exist</h2>\n      { isMetaMask && \n        <button>Connect MetaMask</button>\n      }\n    </div>\n  )\n}\n\nexport default App","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["409",{"pageContent":"If you don't have the [MetaMask browser extension](https://metamask.io/download/) installed or\nenabled, you won't see a **Connect MetaMask** button, and the text displays\n**Injected Provider DOES NOT Exist**.\n\n![Injected Provider DOES NOT Exist](../assets/tutorials/react-dapp/pt1-02.png)\n\nIf you have the extension installed and enabled, you'll see the **Connect MetaMask** button and the\ntext displays **Injected Provider DOES Exist**.\n\nYou'll also see the `ethereum` provider printed to the console.\n\n![Injected Provider DOES Exist](../assets/tutorials/react-dapp/pt1-03.png)\n\nYou can toggle back and forth between these two states by enabling and disabling the MetaMask\nextension from your browser's **Manage Extensions** menu.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["410",{"pageContent":"Use @metamask/detect-provider\n\nDevelopers often use the previous approach when tasked with detecting an injected provider (wallet extension).  \n\nHowever, MetaMask provides the\n[@metamask/detect-provider](https://github.com/MetaMask/detect-provider) module to detect the\nMetaMask Ethereum provider or any provider injected at `window.ethereum` on any platform or browser.\n\n:::caution important\nWe recommend [using `@metamask/detect-provider`](../get-started/detect-metamask.md#use-metamaskdetect-provider)\ninstead of manually detecting the provider yourself.\n:::\n\nIn your project directory, install the module using the following command:\n\n```bash\nnpm install @metamask/detect-provider","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["411",{"pageContent":"Update `src/App.tsx` to the following:\n\n```tsx title=\"App.tsx\"\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n\n  useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      console.log(provider)\n      setHasProvider(Boolean(provider)) // transform provider to true or false\n    }\n\n    getProvider()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div>Injected Provider {hasProvider ? 'DOES' : 'DOES NOT'} Exist</div>\n      { hasProvider &&\n        <button>Connect MetaMask</button>\n      }\n    </div>\n  )\n}\n\nexport default App","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["412",{"pageContent":"This code creates a piece of local state called `hasProvider` of type `boolean` or `null` value,\ninitialized with a `null` value.\n\nNext, it creates a `useEffect` with zero dependencies (it only runs once in your component lifecycle).\nReact's `useEffect` hook allows components to run code when a component is mounted or when some\nproperty's state changes.  \nThis hook also allows cleaning up when the component is unmounted.\n\nIf you explicitly declare no dependencies by passing in an empty array, then `useEffect` only runs\nonce before the component mounts.\n\nInside `useEffect`, there's an `async` function called `getProvider`.\nThis function awaits the `detectEthereumProvider` and uses an option (`silent: true`) to silence any\nconsole errors related to the provider not being available.\nYou can choose not to use that option if you prefer.\n\nThe setter function within `useEffect` transforms the provider's detection to a `boolean` value.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["413",{"pageContent":"The setter function within `useEffect` transforms the provider's detection to a `boolean` value.\n\nIf you run the code now, you'll see the same result in your dapp, but you're using\n`@metamask/detect-provider` instead of your own code.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["414",{"pageContent":"3. Connect to MetaMask\n\nTo connect your dapp to MetaMask, you'll create another `useState` named `wallet`, which keeps your\ndapp up to date with various MetaMask wallet properties such as `accounts`, `balance`, and  `chainId`.\nThese are essential properties to sync with your dapp constantly.\n\nYou'll first add a state for `accounts` and slowly build up your state over the following few\ntutorial sections.\n\nYou'll also set up a button to connect to the MetaMask wallet.\n\nUpdate the `src/App.tsx` to the following:\n\n```tsx title=\"App.tsx\" {7-8,19-21,23-28,34-36,38-40} showLineNumbers\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n  const initialState = { accounts: [] }               /* New */\n  const [wallet, setWallet] = useState(initialState)  /* New */","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["415",{"pageContent":"useEffect(() => {\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))\n    }\n\n    getProvider()\n  }, [])\n\n  const updateWallet = async (accounts:any) => {     /* New */\n    setWallet({ accounts })                          /* New */\n  }                                                  /* New */\n\n  const handleConnect = async () => {                /* New */\n    let accounts = await window.ethereum.request({   /* New */\n      method: \"eth_requestAccounts\",                 /* New */\n    })                                               /* New */\n    updateWallet(accounts)                           /* New */\n  }                                                  /* New */\n\n  return (\n    <div className=\"App\">\n      <div>Injected Provider {hasProvider ? 'DOES' : 'DOES NOT'} Exist</div>","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["416",{"pageContent":"return (\n    <div className=\"App\">\n      <div>Injected Provider {hasProvider ? 'DOES' : 'DOES NOT'} Exist</div>\n\n      { hasProvider &&                               /* Updated */\n        <button onClick={handleConnect}>Connect MetaMask</button>\n      }\n      \n      { wallet.accounts.length > 0 &&                /* New */\n        <div>Wallet Accounts: { wallet.accounts[0] }</div>\n      }\n    </div>\n  )\n}\n\nexport default App","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["417",{"pageContent":"The comments in the code snippet indicate any new or updated lines of code.\nThe changes include:\n\n- **Lines 7-8:** Create an object representing the initial empty state and a new `useState` hook to\n  reflect your MetaMask wallet state.\n\n- **Lines 19-21:** Add an `updateWallet` function that sets your new wallet state when you connect.\n  This will also be called when you add code later that refreshes our wallet state.\n  This function will be helpful as you start syncing the `balance` and `chainId`.\n\n- **Lines 23-28:** Add a `handleConnect` function that the UI calls to connect to MetaMask using\n  `window.ethereum.request` and the `eth_requestAccounts` RPC method.\n  Your dapp stores the result from this RPC call in a variable named `accounts` and passes it to\n  the `updateWallet` function.\n\n- **Lines 34-36:** On click, the **Connect MetaMask** button calls `handleConnect`, from which an RPC\n  call of `eth_requestAccounts` is awaited, and the user is prompted to connect to MetaMask:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["418",{"pageContent":"- **Lines 34-36:** On click, the **Connect MetaMask** button calls `handleConnect`, from which an RPC\n  call of `eth_requestAccounts` is awaited, and the user is prompted to connect to MetaMask:\n\n  ![Choose which MetaMask connects](../assets/tutorials/react-dapp/pt1-04.png)  \n\n  ![Grant permissions over MetaMask](../assets/tutorials/react-dapp/pt1-05.png)\n\n - **Lines 38-40:** Once connected, you'll see your account address displayed in your dapp:\n\n  ![MetaMask Account Address](../assets/tutorials/react-dapp/pt1-06.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["419",{"pageContent":"4. Handle state change\n\nWith the current code, your dapp loses the account data if you refresh the page.\nWhen you connect using the button, the dapp sets `accounts` in its state, but in the case of a\nbrowser refresh, you need something in `useEffect` to check if you've already connected and update\nthe wallet state.\n\nThinking ahead, once you track more than just `accounts`, you also need a mechanism to get the\n`balance` and `chainId` and update their state.\n\nUpdate `src/App.tsx` with some added logic to `useEffect`:\n\n```tsx title=\"App.tsx\" {11-18,24-30,34-36,54} showLineNumbers\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport detectEthereumProvider from '@metamask/detect-provider'\n\nconst App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n  const initialState = { accounts: [] }\n  const [wallet, setWallet] = useState(initialState)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["420",{"pageContent":"const App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n  const initialState = { accounts: [] }\n  const [wallet, setWallet] = useState(initialState)\n\n  useEffect(() => {\n    const refreshAccounts = (accounts: any) => {                /* New */\n      if (accounts.length > 0) {                                /* New */\n        updateWallet(accounts)                                  /* New */\n      } else {                                                  /* New */\n        // if length 0, user is disconnected                    /* New */\n        setWallet(initialState)                                 /* New */\n      }                                                         /* New */\n    }                                                           /* New */\n\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["421",{"pageContent":"const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))\n\n      if (provider) {                                           /* New */\n        const accounts = await window.ethereum.request(         /* New */\n          { method: 'eth_accounts' }                            /* New */\n        )                                                       /* New */\n        refreshAccounts(accounts)                               /* New */\n        window.ethereum.on('accountsChanged', refreshAccounts)  /* New */\n      }                                                         /* New */\n    }\n\n    getProvider()\n    return () => {                                              /* New */\n      window.ethereum?.removeListener('accountsChanged', refreshAccounts)\n    }                                                           /* New */\n  }, [])\n\n  const updateWallet = async (accounts:any) => {\n    setWallet({ accounts })\n  }","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["422",{"pageContent":"const updateWallet = async (accounts:any) => {\n    setWallet({ accounts })\n  }\n\n  const handleConnect = async () => {\n    let accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    })\n    updateWallet(accounts)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>Injected Provider {hasProvider ? 'DOES' : 'DOES NOT'} Exist</div>\n\n      { window.ethereum?.isMetaMask && wallet.accounts.length < 1 &&  /* Updated */\n        <button onClick={handleConnect}>Connect MetaMask</button>\n      }\n\n      { wallet.accounts.length > 0 &&\n        <div>Wallet Accounts: { wallet.accounts[0] }</div>\n      }\n    </div>\n  )\n}\n\nexport default App","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["423",{"pageContent":"Note that `useEffect` is a side effect; you use the hooks for fetching data, reading and writing to\nlocal storage, and setting up event listeners or subscriptions.\n\nThe side effect occurs on the first render only since you have nothing in your dependency array.\nYou also need to clean up those listeners upon unmount of your component.\n\nYou can now test your dapp and see that when you refresh the page, you retain the display of the\nuser's address.\n\nYou've synced with a source outside your dapp and managed the state in a single component.\n\n:::info Connection summary\nIn learning how to connect to MetaMask from a React application, you've learned how to track some\nessential state of your wallet, precisely, which account is selected and active in the MetaMask wallet.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["424",{"pageContent":"Your dapp syncs this state locally using React's `useState` and the React `useEffect` hooks.\nThe dapp ensures that if a user manually disconnects, changes the account, or refreshes the page,\nthe component is aware of any state change.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["425",{"pageContent":"5. Manage more MetaMask state\n\nNext, you'll add `balance` and `chainId` to your state.\n\nBefore editing `src/App.tsx`, you need a few utility functions to format `balance` and `chainId`.\nCreate a new file at `src/utils/index.tsx` with the following code:\n\n```tsx title=\"index.tsx\"\nexport const formatBalance = (rawBalance: string) => {\n  const balance = (parseInt(rawBalance) / 1000000000000000000).toFixed(2)\n  return balance\n}\n\nexport const formatChainAsNum = (chainIdHex: string) => {\n  const chainIdNum = parseInt(chainIdHex)\n  return chainIdNum\n}\n```\n\nWith those functions exported, you can import them into your component and use them to get\nhuman-readable balance and chain information.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["426",{"pageContent":"Watch user balance and chain\n\nTo display the connected address's balance and the current chain ID, you need to update the\n`initialState` object in your component.\n\nSince your dapp already uses `eth_requestAccounts` to determine the accounts, you need to add a\ndependent call to `eth_getBalance` once you have that account information.\n\nFinally, you need to parse the returned value of the balance and format it into a human-readable string.\nYou'll also create a function called `formatBalance`.\n\nUpdate `src/App.tsx` to the following:\n\n```tsx title=\"App.tsx\" {3,8,21-23,35,43,48-55,74,76-78} showLineNumbers\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport { formatBalance, formatChainAsNum } from './utils'  /* New */\nimport detectEthereumProvider from '@metamask/detect-provider'","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["427",{"pageContent":"const App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n  const initialState = { accounts: [], balance: \"\", chainId: \"\" }  /* Updated */\n  const [wallet, setWallet] = useState(initialState)\n\n  useEffect(() => {\n    const refreshAccounts = (accounts: any) => {\n      if (accounts.length > 0) {\n        updateWallet(accounts)\n      } else {\n        // if length 0, user is disconnected\n        setWallet(initialState)\n      }\n    }\n\n    const refreshChain = (chainId: any) => {               /* New */\n      setWallet((wallet) => ({ ...wallet, chainId }))      /* New */\n    }                                                      /* New */\n\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["428",{"pageContent":"const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))\n\n      if (provider) {                                           \n        const accounts = await window.ethereum.request(\n          { method: 'eth_accounts' }\n        )\n        refreshAccounts(accounts)\n        window.ethereum.on('accountsChanged', refreshAccounts)\n        window.ethereum.on(\"chainChanged\", refreshChain)  /* New */\n      }\n    }\n\n    getProvider()\n\n    return () => {\n      window.ethereum?.removeListener('accountsChanged', refreshAccounts)\n      window.ethereum?.removeListener(\"chainChanged\", refreshChain)  /* New */\n    }\n  }, [])","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["429",{"pageContent":"return () => {\n      window.ethereum?.removeListener('accountsChanged', refreshAccounts)\n      window.ethereum?.removeListener(\"chainChanged\", refreshChain)  /* New */\n    }\n  }, [])\n\n  const updateWallet = async (accounts:any) => {\n    const balance = formatBalance(await window.ethereum!.request({   /* New */\n      method: \"eth_getBalance\",                                      /* New */\n      params: [accounts[0], \"latest\"],                               /* New */ \n    }))                                                              /* New */\n    const chainId = await window.ethereum!.request({                 /* New */ \n      method: \"eth_chainId\",                                         /* New */ \n    })                                                               /* New */ \n    setWallet({ accounts, balance, chainId })                        /* Updated */ \n  }","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["430",{"pageContent":"const handleConnect = async () => {\n    let accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    })\n    updateWallet(accounts)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>Injected Provider {hasProvider ? 'DOES' : 'DOES NOT'} Exist</div>\n\n      { window.ethereum?.isMetaMask && wallet.accounts.length < 1 &&\n        <button onClick={handleConnect}>Connect MetaMask</button>\n      }\n\n      { wallet.accounts.length > 0 &&\n        <>                                                               {/* New */}\n          <div>Wallet Accounts: {wallet.accounts[0]}</div>\n          <div>Wallet Balance: {wallet.balance}</div>                    {/* New */}\n          <div>Hex ChainId: {wallet.chainId}</div>                       {/* New */}\n          <div>Numeric ChainId: {formatChainAsNum(wallet.chainId)}</div> {/* New */}\n        </>\n      }\n    </div>\n  )\n}\n\nexport default App","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["431",{"pageContent":"The changes here are minimal because you only need to update or duplicate existing functionality and\nadd a few utility functions.\n\nYour dapp now displays `account`, `balance`, and `chainId`, represented as hex values and numbers.\n\n![MetaMask address, balance, and chain](../assets/tutorials/react-dapp/pt1-07.png)\n\nYour dapp detects any changes to `balance` or `chain`, and the utility functions format hex strings\nto be human-readable for display.\n\nFor chain IDs, you use the hex version in RPC calls and the numeric version for display.\nTo get the human-readable number of the chain, you use `parseInt`.\n\n:::caution important\nFor this tutorial, your dapp only needs to display information about your wallet.\nFor a real web3 dapp, you might add more functionality for switching chains programmatically or\ninitiating transactions.\n\nYou might need to:","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["432",{"pageContent":"You might need to:\n\n- Have a list of chain IDs that your dapp supports.\n- Create UI that shows information on the supported networks.\n- Present a button that allows users to connect to a supported network.\n\n[Detecting a user's network](../get-started/detect-network.md) is crucial in almost every web3 dapp.\n:::","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["433",{"pageContent":"6. Handle errors\n\nNow that you have a working dapp, you should set up error handling.\nYou can approach this in several ways; the following is a basic suggestion for handling an error or\nrejection when the user connects their wallet using the `handleConnect` function.\n\nYou'll add `useState` to track `isConnecting`, `error`, and `errorMessage`.\n\nWhen a user is in the middle of connecting, you'll disable the **Connect MetaMask** button.\nIf you receive an error, you'll update `error` to `true` and set the `errorMessage` for display.\nYou'll also set `isConnecting` back to `false` once either the user has connected or you've caught\nthe error, and set `error` back to `false` once the message is resolved.\n\nUpdate `src/App.tsx` to the following:\n\n```tsx title=\"App.tsx\" {11-13,62-64,67-75,97-102} showLineNumbers\nimport './App.css'\nimport { useState, useEffect } from 'react'\nimport { formatBalance, formatChainAsNum } from './utils'\nimport detectEthereumProvider from '@metamask/detect-provider'","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["434",{"pageContent":"const App = () => {\n  const [hasProvider, setHasProvider] = useState<boolean | null>(null)\n  const initialState = { accounts: [], balance: \"\", chainId: \"\" }\n  const [wallet, setWallet] = useState(initialState)\n\n  const [isConnecting, setIsConnecting] = useState(false)  /* New */\n  const [error, setError] = useState(false)                /* New */\n  const [errorMessage, setErrorMessage] = useState(\"\")     /* New */\n\n  useEffect(() => {\n    const refreshAccounts = (accounts: any) => {\n      if (accounts.length > 0) {\n        updateWallet(accounts)\n      } else {\n        // if length 0, user is disconnected\n        setWallet(initialState)\n      }\n    }\n\n    const refreshChain = (chainId: any) => {\n      setWallet((wallet) => ({ ...wallet, chainId }))\n    }\n\n    const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["435",{"pageContent":"const getProvider = async () => {\n      const provider = await detectEthereumProvider({ silent: true })\n      setHasProvider(Boolean(provider))\n\n      if (provider) {\n        const accounts = await window.ethereum.request(\n          { method: 'eth_accounts' }\n        )\n        refreshAccounts(accounts)\n        window.ethereum.on('accountsChanged', refreshAccounts)\n        window.ethereum.on(\"chainChanged\", refreshChain)\n      }\n    }\n\n    getProvider()\n\n    return () => {\n      window.ethereum?.removeListener('accountsChanged', refreshAccounts)\n      window.ethereum?.removeListener(\"chainChanged\", refreshChain)\n    }\n  }, [])\n\n  const updateWallet = async (accounts: any) => {\n    const balance = formatBalance(await window.ethereum!.request({\n      method: \"eth_getBalance\",\n      params: [accounts[0], \"latest\"],\n    }))\n    const chainId = await window.ethereum!.request({\n      method: \"eth_chainId\",\n    })\n    setWallet({ accounts, balance, chainId })\n  }","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["436",{"pageContent":"const handleConnect = async () => {                   /* Updated */\n    setIsConnecting(true)                               /* New */\n    await window.ethereum.request({                     /* Updated */\n      method: \"eth_requestAccounts\",\n    })\n    .then((accounts:[]) => {                            /* New */\n      setError(false)                                   /* New */\n      updateWallet(accounts)                            /* New */\n    })                                                  /* New */\n    .catch((err:any) => {                               /* New */\n      setError(true)                                    /* New */\n      setErrorMessage(err.message)                      /* New */\n    })                                                  /* New */\n    setIsConnecting(false)                              /* New */\n  }\n\n  const disableConnect = Boolean(wallet) && isConnecting","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["437",{"pageContent":"const disableConnect = Boolean(wallet) && isConnecting\n\n  return (\n    <div className=\"App\">\n      <div>Injected Provider {hasProvider ? 'DOES' : 'DOES NOT'} Exist</div>\n\n      {window.ethereum?.isMetaMask && wallet.accounts.length < 1 &&\n                /* Updated */\n        <button disabled={disableConnect} onClick={handleConnect}>Connect MetaMask</button>\n      }\n\n      {wallet.accounts.length > 0 &&\n        <>\n          <div>Wallet Accounts: {wallet.accounts[0]}</div>\n          <div>Wallet Balance: {wallet.balance}</div>\n          <div>Hex ChainId: {wallet.chainId}</div>\n          <div>Numeric ChainId: {formatChainAsNum(wallet.chainId)}</div>\n        </>\n      }\n      { error && (                                        /* New code block */\n          <div onClick={() => setError(false)}>\n            <strong>Error:</strong> {errorMessage}\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\nexport default App","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["438",{"pageContent":"To test the error handling, disconnect from your accounts in MetaMask:\n\n![Disconnect from selected Account](../assets/tutorials/react-dapp/pt1-08.png)\n\nAttempt to connect again and choose to cancel the connection:\n\n![Cancel request to connect](../assets/tutorials/react-dapp/pt1-09.png)\n\nYou'll see the error message displayed on the dapp and in the console:\n\n![MetaMask User Reject Request Error](../assets/tutorials/react-dapp/pt1-10.png)","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}],["439",{"pageContent":"Conclusion\n\nThis tutorial walked you through creating a single component dapp using Vite, some basics of\ninteracting with MetaMask and its API, and managing state locally.\n\nYou can see the [source code](https://github.com/MetaMask/react-dapp-tutorial/tree/local-state-final)\nfor the final state of this dapp tutorial.\n\nAs a next step, you can [create a React dapp with global state](react-dapp-global-state.md).\nThis follow-up tutorial walks you through adding more than one component and working with global state.\nYou'll use [React's Context API](https://react.dev/reference/react/useContext) to manage the state\nglobally and ensure that any component in your dapp can be aware and conditionally render or display\ninformation about your MetaMask wallet.","metadata":{"source":"https://github.com/MetaMask/metamask-docs/tree/main/wallet/tutorials/react-dapp-local-state.md"}}]]